Search.setIndex({"alltitles": {"ABS": [[1264, "abs"]], "ACOS": [[1267, "acos"]], "ACOSD": [[1267, "acosd"]], "ARRAY_AGG": [[1261, "array-agg"]], "ARRAY_CONTAINS": [[1261, "array-contains"]], "ARRAY_GET": [[1261, "array-get"]], "ARRAY_LENGTH": [[1261, "array-length"]], "ARRAY_LOWER": [[1261, "array-lower"]], "ARRAY_MEAN": [[1261, "array-mean"]], "ARRAY_REVERSE": [[1261, "array-reverse"]], "ARRAY_SUM": [[1261, "array-sum"]], "ARRAY_TO_STRING": [[1261, "array-to-string"]], "ARRAY_UNIQUE": [[1261, "array-unique"]], "ARRAY_UPPER": [[1261, "array-upper"]], "ASIN": [[1267, "asin"]], "ASIND": [[1267, "asind"]], "ATAN": [[1267, "atan"]], "ATAN2": [[1267, "atan2"]], "ATAN2D": [[1267, "atan2d"]], "ATAND": [[1267, "atand"]], "AVG": [[1260, "avg"]], "Aggregate": [[1260, "aggregate"]], "Aggregation": [[169, "aggregation"], [316, "aggregation"], [788, "aggregation"], [891, "aggregation"]], "Aliases": [[1260, null], [1260, null], [1264, null], [1264, null], [1265, null], [1265, null]], "Array": [[766, "array"], [1236, "array"], [1261, "array"]], "Asserts": [[1273, "asserts"]], "Attributes": [[304, "attributes"], [880, "attributes"], [1237, "attributes"]], "Available registrations": [[1, "available-registrations"]], "Avro": [[787, "avro"]], "BIT_LENGTH": [[1265, "bit-length"]], "Binary": [[767, "binary"], [780, "binary"], [1238, "binary"]], "Boolean": [[768, "boolean"], [1239, "boolean"]], "CAST": [[1268, "cast"]], "CBRT": [[1264, "cbrt"]], "CEIL": [[1264, "ceil"]], "COALESCE": [[1262, "coalesce"]], "CONCAT": [[1265, "concat"]], "CONCAT_WS": [[1265, "concat-ws"]], "COS": [[1267, "cos"]], "COSD": [[1267, "cosd"]], "COT": [[1267, "cot"]], "COTD": [[1267, "cotd"]], "COUNT": [[1260, "count"]], "CREATE TABLE": [[1272, "create-table"]], "CSV": [[787, "csv"]], "Categories": [[769, "categories"], [1240, "categories"]], "Clipboard": [[787, "clipboard"]], "Columns / names": [[771, "columns-names"]], "Comparison": [[780, "comparison"]], "Computation": [[305, "computation"], [772, "computation"], [1241, "computation"]], "Conditional": [[1262, "conditional"]], "Config": [[168, "config"]], "Config load, save, state": [[168, "config-load-save-state"]], "Config options": [[168, "config-options"]], "Conjunction": [[780, "conjunction"]], "Conversion": [[785, "conversion"]], "DATE": [[1265, "date"]], "DATE_PART": [[1266, "date-part"]], "DEGREES": [[1267, "degrees"]], "DISTINCT": [[1259, "distinct"]], "DIV": [[1264, "div"]], "DROP TABLES": [[1272, "drop-tables"]], "Data types": [[314, "data-types"]], "DataFrame": [[309, "dataframe"]], "DataType": [[314, "datatype"]], "Database": [[787, "database"]], "Delta Lake": [[787, "delta-lake"]], "Descriptive": [[306, "descriptive"], [881, "descriptive"], [1242, "descriptive"]], "Documentation": [[1270, null], [1270, null], [1270, null]], "ENDS_WITH": [[1265, "ends-with"]], "EXCEPT": [[1271, "except"]], "EXP": [[1264, "exp"]], "EXPLAIN": [[1272, "explain"]], "EXTRACT": [[1266, "extract"]], "Errors": [[315, "errors"]], "Examples": [[1, "examples"], [890, "examples"], [1273, "examples"]], "Excel / ODS": [[787, "excel-ods"]], "Exceptions": [[315, "exceptions"]], "Export": [[307, "export"], [1243, "export"]], "Expression SQL": [[1270, "expression-sql"]], "Expressions": [[774, "expressions"]], "Extending the API": [[1, "extending-the-api"]], "FIRST": [[1260, "first"]], "FLOOR": [[1264, "floor"]], "FROM": [[1259, "from"]], "Feather / IPC": [[787, "feather-ipc"]], "Frame SQL": [[1270, "frame-sql"]], "Functions": [[773, "functions"], [785, "functions"], [890, "functions"]], "GREATEST": [[1262, "greatest"]], "GROUP BY": [[1259, "group-by"]], "Global SQL": [[1270, "global-sql"]], "GroupBy": [[308, "groupby"], [882, "groupby"]], "HAVING": [[1259, "having"]], "IF": [[1262, "if"]], "IFNULL": [[1262, "ifnull"]], "INITCAP": [[1265, "initcap"]], "INTERSECT": [[1271, "intersect"]], "Iceberg": [[787, "iceberg"]], "Importing": [[890, "importing"]], "InProcessQuery": [[883, "inprocessquery"]], "Index": [[0, "index"]], "Input/output": [[787, "input-output"]], "Introduction": [[1270, "introduction"]], "JOIN": [[1259, "join"]], "JSON": [[787, "json"]], "LAST": [[1260, "last"]], "LEAST": [[1262, "least"]], "LEFT": [[1265, "left"]], "LENGTH": [[1265, "length"]], "LIMIT": [[1259, "limit"]], "LN": [[1264, "ln"]], "LOG": [[1264, "log"]], "LOG10": [[1264, "log10"]], "LOG1P": [[1264, "log1p"]], "LOG2": [[1264, "log2"]], "LOWER": [[1265, "lower"]], "LTRIM": [[1265, "ltrim"]], "LazyFrame": [[884, "lazyframe"]], "List": [[775, "list"], [1245, "list"]], "MAX": [[1260, "max"]], "MEDIAN": [[1260, "median"]], "MIN": [[1260, "min"]], "MOD": [[1264, "mod"]], "Manipulation/selection": [[311, "manipulation-selection"], [778, "manipulation-selection"], [886, "manipulation-selection"], [1247, "manipulation-selection"]], "Math": [[1264, "math"]], "Meta": [[776, "meta"]], "Metadata": [[887, "metadata"]], "Methods": [[1270, "methods"]], "Miscellaneous": [[310, "miscellaneous"], [777, "miscellaneous"], [785, "miscellaneous"], [885, "miscellaneous"], [1246, "miscellaneous"]], "NULLIF": [[1262, "nullif"]], "Name": [[779, "name"]], "Nested": [[314, "nested"]], "Numeric": [[314, "numeric"], [780, "numeric"]], "OCTET_LENGTH": [[1265, "octet-length"]], "OFFSET": [[1259, "offset"]], "ORDER BY": [[1259, "order-by"]], "Operators": [[780, "operators"]], "Other": [[314, "other"]], "PI": [[1264, "pi"]], "POW": [[1264, "pow"]], "Panic": [[315, "panic"]], "Parallelization": [[785, "parallelization"]], "Parametric testing": [[1273, "parametric-testing"]], "Parquet": [[787, "parquet"]], "Plot": [[312, "plot"], [1248, "plot"]], "Plugins": [[888, "plugins"]], "Polars strategies": [[1273, "polars-strategies"]], "Profiles": [[1273, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[787, "pyarrow-datasets"]], "Python API": [[1270, "python-api"]], "Python API reference": [[786, "python-api-reference"]], "Querying": [[1270, "querying"]], "RADIANS": [[1267, "radians"]], "REGEXP_LIKE": [[1265, "regexp-like"]], "REPLACE": [[1265, "replace"]], "REVERSE": [[1265, "reverse"]], "RIGHT": [[1265, "right"]], "ROUND": [[1264, "round"]], "RTRIM": [[1265, "rtrim"]], "Random": [[785, "random"]], "SELECT": [[1259, "select"]], "SHOW TABLES": [[1272, "show-tables"]], "SIGN": [[1264, "sign"]], "SIN": [[1267, "sin"]], "SIND": [[1267, "sind"]], "SQL Clauses": [[1259, "sql-clauses"]], "SQL Functions": [[1263, "sql-functions"]], "SQL Interface": [[1269, "sql-interface"]], "SQLContext": [[1270, "sqlcontext"]], "SQRT": [[1264, "sqrt"]], "STARTS_WITH": [[1265, "starts-with"]], "STDDEV": [[1260, "stddev"]], "STRFTIME": [[1266, "strftime"]], "STRPOS": [[1265, "strpos"]], "STRPTIME": [[1265, "strptime"]], "SUBSTRING": [[1265, "substring"]], "SUM": [[1260, "sum"]], "Schema": [[889, "schema"]], "Selectors": [[890, "selectors"]], "Serialization": [[310, "serialization"], [885, "serialization"]], "Series": [[1244, "series"]], "Set Operations": [[1271, "set-operations"]], "Set operations": [[890, "set-operations"]], "Strategy helpers": [[1273, "strategy-helpers"]], "String": [[314, "string"], [781, "string"], [1249, "string"], [1265, "string"]], "StringCache": [[785, "stringcache"]], "Struct": [[782, "struct"], [1250, "struct"]], "Style": [[313, "style"]], "TAN": [[1267, "tan"]], "TAND": [[1267, "tand"]], "TIMESTAMP": [[1265, "timestamp"]], "TRUNCATE": [[1272, "truncate"]], "TRY_CAST": [[1268, "try-cast"]], "Table Operations": [[1272, "table-operations"]], "Temporal": [[314, "temporal"], [783, "temporal"], [1251, "temporal"], [1266, "temporal"]], "Testing": [[1273, "testing"]], "Trigonometry": [[1267, "trigonometry"]], "Types": [[1268, "types"]], "UNION": [[1271, "union"]], "UNION ALL": [[1271, "union-all"]], "UNION BY NAME": [[1271, "union-by-name"]], "UNNEST": [[1261, "unnest"], [1272, "unnest"]], "UPPER": [[1265, "upper"]], "Use as a context manager": [[168, "use-as-a-context-manager"]], "Use as a decorator": [[168, "use-as-a-decorator"]], "VARIANCE": [[1260, "variance"]], "WHERE": [[1259, "where"]], "Warnings": [[315, "warnings"]], "Window": [[784, "window"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.DataFrame.__dataframe__": [[170, "polars-dataframe-dataframe"]], "polars.DataFrame.approx_n_unique": [[171, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.bottom_k": [[172, "polars-dataframe-bottom-k"]], "polars.DataFrame.cast": [[173, "polars-dataframe-cast"]], "polars.DataFrame.clear": [[174, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[175, "polars-dataframe-clone"]], "polars.DataFrame.collect_schema": [[176, "polars-dataframe-collect-schema"]], "polars.DataFrame.columns": [[177, "polars-dataframe-columns"]], "polars.DataFrame.corr": [[178, "polars-dataframe-corr"]], "polars.DataFrame.count": [[179, "polars-dataframe-count"]], "polars.DataFrame.describe": [[180, "polars-dataframe-describe"]], "polars.DataFrame.deserialize": [[181, "polars-dataframe-deserialize"]], "polars.DataFrame.drop": [[182, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[183, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[184, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[185, "polars-dataframe-dtypes"]], "polars.DataFrame.equals": [[186, "polars-dataframe-equals"]], "polars.DataFrame.estimated_size": [[187, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[188, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[189, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[190, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[191, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[192, "polars-dataframe-filter"]], "polars.DataFrame.flags": [[193, "polars-dataframe-flags"]], "polars.DataFrame.fold": [[194, "polars-dataframe-fold"]], "polars.DataFrame.gather_every": [[195, "polars-dataframe-gather-every"]], "polars.DataFrame.get_column": [[196, "polars-dataframe-get-column"]], "polars.DataFrame.get_column_index": [[197, "polars-dataframe-get-column-index"]], "polars.DataFrame.get_columns": [[198, "polars-dataframe-get-columns"]], "polars.DataFrame.glimpse": [[199, "polars-dataframe-glimpse"]], "polars.DataFrame.group_by": [[200, "polars-dataframe-group-by"]], "polars.DataFrame.group_by_dynamic": [[201, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.hash_rows": [[202, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[203, "polars-dataframe-head"]], "polars.DataFrame.height": [[204, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[205, "polars-dataframe-hstack"]], "polars.DataFrame.insert_column": [[206, "polars-dataframe-insert-column"]], "polars.DataFrame.interpolate": [[207, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[208, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[209, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[210, "polars-dataframe-is-unique"]], "polars.DataFrame.item": [[211, "polars-dataframe-item"]], "polars.DataFrame.iter_columns": [[212, "polars-dataframe-iter-columns"]], "polars.DataFrame.iter_rows": [[213, "polars-dataframe-iter-rows"]], "polars.DataFrame.iter_slices": [[214, "polars-dataframe-iter-slices"]], "polars.DataFrame.join": [[215, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[216, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[217, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[218, "polars-dataframe-limit"]], "polars.DataFrame.map_rows": [[219, "polars-dataframe-map-rows"]], "polars.DataFrame.max": [[220, "polars-dataframe-max"]], "polars.DataFrame.max_horizontal": [[221, "polars-dataframe-max-horizontal"]], "polars.DataFrame.mean": [[222, "polars-dataframe-mean"]], "polars.DataFrame.mean_horizontal": [[223, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.median": [[224, "polars-dataframe-median"]], "polars.DataFrame.melt": [[225, "polars-dataframe-melt"]], "polars.DataFrame.merge_sorted": [[226, "polars-dataframe-merge-sorted"]], "polars.DataFrame.min": [[227, "polars-dataframe-min"]], "polars.DataFrame.min_horizontal": [[228, "polars-dataframe-min-horizontal"]], "polars.DataFrame.n_chunks": [[229, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[230, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[231, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[232, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[233, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[234, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[235, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[236, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[237, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[238, "polars-dataframe-rename"]], "polars.DataFrame.replace_column": [[239, "polars-dataframe-replace-column"]], "polars.DataFrame.reverse": [[240, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[241, "polars-dataframe-rolling"]], "polars.DataFrame.row": [[242, "polars-dataframe-row"]], "polars.DataFrame.rows": [[243, "polars-dataframe-rows"]], "polars.DataFrame.rows_by_key": [[244, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sample": [[245, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[246, "polars-dataframe-schema"]], "polars.DataFrame.select": [[247, "polars-dataframe-select"]], "polars.DataFrame.select_seq": [[248, "polars-dataframe-select-seq"]], "polars.DataFrame.serialize": [[249, "polars-dataframe-serialize"]], "polars.DataFrame.set_sorted": [[250, "polars-dataframe-set-sorted"]], "polars.DataFrame.shape": [[251, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[252, "polars-dataframe-shift"]], "polars.DataFrame.shrink_to_fit": [[253, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[254, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[255, "polars-dataframe-sort"]], "polars.DataFrame.sql": [[256, "polars-dataframe-sql"]], "polars.DataFrame.std": [[257, "polars-dataframe-std"]], "polars.DataFrame.sum": [[258, "polars-dataframe-sum"]], "polars.DataFrame.sum_horizontal": [[259, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.tail": [[260, "polars-dataframe-tail"]], "polars.DataFrame.to_arrow": [[261, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[262, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[263, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[264, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_init_repr": [[265, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_jax": [[266, "polars-dataframe-to-jax"]], "polars.DataFrame.to_numpy": [[267, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[268, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[269, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[270, "polars-dataframe-to-struct"]], "polars.DataFrame.to_torch": [[271, "polars-dataframe-to-torch"]], "polars.DataFrame.top_k": [[272, "polars-dataframe-top-k"]], "polars.DataFrame.transpose": [[273, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[274, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[275, "polars-dataframe-unnest"]], "polars.DataFrame.unpivot": [[276, "polars-dataframe-unpivot"]], "polars.DataFrame.unstack": [[277, "polars-dataframe-unstack"]], "polars.DataFrame.update": [[278, "polars-dataframe-update"]], "polars.DataFrame.upsample": [[279, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[280, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[281, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[282, "polars-dataframe-width"]], "polars.DataFrame.with_columns": [[283, "polars-dataframe-with-columns"]], "polars.DataFrame.with_columns_seq": [[284, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.with_row_count": [[285, "polars-dataframe-with-row-count"]], "polars.DataFrame.with_row_index": [[286, "polars-dataframe-with-row-index"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "polars.Expr.abs": [[317, "polars-expr-abs"]], "polars.Expr.add": [[318, "polars-expr-add"]], "polars.Expr.agg_groups": [[319, "polars-expr-agg-groups"]], "polars.Expr.alias": [[320, "polars-expr-alias"]], "polars.Expr.all": [[321, "polars-expr-all"]], "polars.Expr.and_": [[322, "polars-expr-and"]], "polars.Expr.any": [[323, "polars-expr-any"]], "polars.Expr.append": [[324, "polars-expr-append"]], "polars.Expr.approx_n_unique": [[325, "polars-expr-approx-n-unique"]], "polars.Expr.arccos": [[326, "polars-expr-arccos"]], "polars.Expr.arccosh": [[327, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[328, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[329, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[330, "polars-expr-arctan"]], "polars.Expr.arctanh": [[331, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[332, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[333, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[334, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[335, "polars-expr-arg-true"]], "polars.Expr.arg_unique": [[336, "polars-expr-arg-unique"]], "polars.Expr.arr.all": [[337, "polars-expr-arr-all"]], "polars.Expr.arr.any": [[338, "polars-expr-arr-any"]], "polars.Expr.arr.arg_max": [[339, "polars-expr-arr-arg-max"]], "polars.Expr.arr.arg_min": [[340, "polars-expr-arr-arg-min"]], "polars.Expr.arr.contains": [[341, "polars-expr-arr-contains"]], "polars.Expr.arr.count_matches": [[342, "polars-expr-arr-count-matches"]], "polars.Expr.arr.explode": [[343, "polars-expr-arr-explode"]], "polars.Expr.arr.first": [[344, "polars-expr-arr-first"]], "polars.Expr.arr.get": [[345, "polars-expr-arr-get"]], "polars.Expr.arr.join": [[346, "polars-expr-arr-join"]], "polars.Expr.arr.last": [[347, "polars-expr-arr-last"]], "polars.Expr.arr.max": [[348, "polars-expr-arr-max"]], "polars.Expr.arr.median": [[349, "polars-expr-arr-median"]], "polars.Expr.arr.min": [[350, "polars-expr-arr-min"]], "polars.Expr.arr.n_unique": [[351, "polars-expr-arr-n-unique"]], "polars.Expr.arr.reverse": [[352, "polars-expr-arr-reverse"]], "polars.Expr.arr.shift": [[353, "polars-expr-arr-shift"]], "polars.Expr.arr.sort": [[354, "polars-expr-arr-sort"]], "polars.Expr.arr.std": [[355, "polars-expr-arr-std"]], "polars.Expr.arr.sum": [[356, "polars-expr-arr-sum"]], "polars.Expr.arr.to_list": [[357, "polars-expr-arr-to-list"]], "polars.Expr.arr.to_struct": [[358, "polars-expr-arr-to-struct"]], "polars.Expr.arr.unique": [[359, "polars-expr-arr-unique"]], "polars.Expr.arr.var": [[360, "polars-expr-arr-var"]], "polars.Expr.backward_fill": [[361, "polars-expr-backward-fill"]], "polars.Expr.bin.contains": [[362, "polars-expr-bin-contains"]], "polars.Expr.bin.decode": [[363, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[364, "polars-expr-bin-encode"]], "polars.Expr.bin.ends_with": [[365, "polars-expr-bin-ends-with"]], "polars.Expr.bin.size": [[366, "polars-expr-bin-size"]], "polars.Expr.bin.starts_with": [[367, "polars-expr-bin-starts-with"]], "polars.Expr.bottom_k": [[368, "polars-expr-bottom-k"]], "polars.Expr.bottom_k_by": [[369, "polars-expr-bottom-k-by"]], "polars.Expr.cast": [[370, "polars-expr-cast"]], "polars.Expr.cat.get_categories": [[371, "polars-expr-cat-get-categories"]], "polars.Expr.cbrt": [[372, "polars-expr-cbrt"]], "polars.Expr.ceil": [[373, "polars-expr-ceil"]], "polars.Expr.clip": [[374, "polars-expr-clip"]], "polars.Expr.cos": [[375, "polars-expr-cos"]], "polars.Expr.cosh": [[376, "polars-expr-cosh"]], "polars.Expr.cot": [[377, "polars-expr-cot"]], "polars.Expr.count": [[378, "polars-expr-count"]], "polars.Expr.cum_count": [[379, "polars-expr-cum-count"]], "polars.Expr.cum_max": [[380, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[381, "polars-expr-cum-min"]], "polars.Expr.cum_prod": [[382, "polars-expr-cum-prod"]], "polars.Expr.cum_sum": [[383, "polars-expr-cum-sum"]], "polars.Expr.cumulative_eval": [[384, "polars-expr-cumulative-eval"]], "polars.Expr.cut": [[385, "polars-expr-cut"]], "polars.Expr.degrees": [[386, "polars-expr-degrees"]], "polars.Expr.deserialize": [[387, "polars-expr-deserialize"]], "polars.Expr.diff": [[388, "polars-expr-diff"]], "polars.Expr.dot": [[389, "polars-expr-dot"]], "polars.Expr.drop_nans": [[390, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[391, "polars-expr-drop-nulls"]], "polars.Expr.dt.add_business_days": [[392, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.base_utc_offset": [[393, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.cast_time_unit": [[394, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.century": [[395, "polars-expr-dt-century"]], "polars.Expr.dt.combine": [[396, "polars-expr-dt-combine"]], "polars.Expr.dt.convert_time_zone": [[397, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.date": [[398, "polars-expr-dt-date"]], "polars.Expr.dt.datetime": [[399, "polars-expr-dt-datetime"]], "polars.Expr.dt.day": [[400, "polars-expr-dt-day"]], "polars.Expr.dt.dst_offset": [[401, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.epoch": [[402, "polars-expr-dt-epoch"]], "polars.Expr.dt.hour": [[403, "polars-expr-dt-hour"]], "polars.Expr.dt.is_leap_year": [[404, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.iso_year": [[405, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microsecond": [[406, "polars-expr-dt-microsecond"]], "polars.Expr.dt.millennium": [[407, "polars-expr-dt-millennium"]], "polars.Expr.dt.millisecond": [[408, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[409, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[410, "polars-expr-dt-month"]], "polars.Expr.dt.month_end": [[411, "polars-expr-dt-month-end"]], "polars.Expr.dt.month_start": [[412, "polars-expr-dt-month-start"]], "polars.Expr.dt.nanosecond": [[413, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.offset_by": [[414, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[415, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.quarter": [[416, "polars-expr-dt-quarter"]], "polars.Expr.dt.replace_time_zone": [[417, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.round": [[418, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[419, "polars-expr-dt-second"]], "polars.Expr.dt.strftime": [[420, "polars-expr-dt-strftime"]], "polars.Expr.dt.time": [[421, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[422, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[423, "polars-expr-dt-to-string"]], "polars.Expr.dt.total_days": [[424, "polars-expr-dt-total-days"]], "polars.Expr.dt.total_hours": [[425, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_microseconds": [[426, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_milliseconds": [[427, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_minutes": [[428, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.total_nanoseconds": [[429, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.total_seconds": [[430, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.truncate": [[431, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[432, "polars-expr-dt-week"]], "polars.Expr.dt.weekday": [[433, "polars-expr-dt-weekday"]], "polars.Expr.dt.with_time_unit": [[434, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.year": [[435, "polars-expr-dt-year"]], "polars.Expr.entropy": [[436, "polars-expr-entropy"]], "polars.Expr.eq": [[437, "polars-expr-eq"]], "polars.Expr.eq_missing": [[438, "polars-expr-eq-missing"]], "polars.Expr.ewm_mean": [[439, "polars-expr-ewm-mean"]], "polars.Expr.ewm_mean_by": [[440, "polars-expr-ewm-mean-by"]], "polars.Expr.ewm_std": [[441, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[442, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[443, "polars-expr-exclude"]], "polars.Expr.exp": [[444, "polars-expr-exp"]], "polars.Expr.explode": [[445, "polars-expr-explode"]], "polars.Expr.extend_constant": [[446, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[447, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[448, "polars-expr-fill-null"]], "polars.Expr.filter": [[449, "polars-expr-filter"]], "polars.Expr.first": [[450, "polars-expr-first"]], "polars.Expr.flatten": [[451, "polars-expr-flatten"]], "polars.Expr.floor": [[452, "polars-expr-floor"]], "polars.Expr.floordiv": [[453, "polars-expr-floordiv"]], "polars.Expr.forward_fill": [[454, "polars-expr-forward-fill"]], "polars.Expr.from_json": [[455, "polars-expr-from-json"]], "polars.Expr.gather": [[456, "polars-expr-gather"]], "polars.Expr.gather_every": [[457, "polars-expr-gather-every"]], "polars.Expr.ge": [[458, "polars-expr-ge"]], "polars.Expr.get": [[459, "polars-expr-get"]], "polars.Expr.gt": [[460, "polars-expr-gt"]], "polars.Expr.has_nulls": [[461, "polars-expr-has-nulls"]], "polars.Expr.hash": [[462, "polars-expr-hash"]], "polars.Expr.head": [[463, "polars-expr-head"]], "polars.Expr.hist": [[464, "polars-expr-hist"]], "polars.Expr.implode": [[465, "polars-expr-implode"]], "polars.Expr.inspect": [[466, "polars-expr-inspect"]], "polars.Expr.interpolate": [[467, "polars-expr-interpolate"]], "polars.Expr.interpolate_by": [[468, "polars-expr-interpolate-by"]], "polars.Expr.is_between": [[469, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[470, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[471, "polars-expr-is-finite"]], "polars.Expr.is_first_distinct": [[472, "polars-expr-is-first-distinct"]], "polars.Expr.is_in": [[473, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[474, "polars-expr-is-infinite"]], "polars.Expr.is_last_distinct": [[475, "polars-expr-is-last-distinct"]], "polars.Expr.is_nan": [[476, "polars-expr-is-nan"]], "polars.Expr.is_not_nan": [[477, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[478, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[479, "polars-expr-is-null"]], "polars.Expr.is_unique": [[480, "polars-expr-is-unique"]], "polars.Expr.kurtosis": [[481, "polars-expr-kurtosis"]], "polars.Expr.last": [[482, "polars-expr-last"]], "polars.Expr.le": [[483, "polars-expr-le"]], "polars.Expr.len": [[484, "polars-expr-len"]], "polars.Expr.limit": [[485, "polars-expr-limit"]], "polars.Expr.list.all": [[486, "polars-expr-list-all"]], "polars.Expr.list.any": [[487, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[488, "polars-expr-list-arg-max"]], "polars.Expr.list.arg_min": [[489, "polars-expr-list-arg-min"]], "polars.Expr.list.concat": [[490, "polars-expr-list-concat"]], "polars.Expr.list.contains": [[491, "polars-expr-list-contains"]], "polars.Expr.list.count_matches": [[492, "polars-expr-list-count-matches"]], "polars.Expr.list.diff": [[493, "polars-expr-list-diff"]], "polars.Expr.list.drop_nulls": [[494, "polars-expr-list-drop-nulls"]], "polars.Expr.list.eval": [[495, "polars-expr-list-eval"]], "polars.Expr.list.explode": [[496, "polars-expr-list-explode"]], "polars.Expr.list.first": [[497, "polars-expr-list-first"]], "polars.Expr.list.gather": [[498, "polars-expr-list-gather"]], "polars.Expr.list.gather_every": [[499, "polars-expr-list-gather-every"]], "polars.Expr.list.get": [[500, "polars-expr-list-get"]], "polars.Expr.list.head": [[501, "polars-expr-list-head"]], "polars.Expr.list.join": [[502, "polars-expr-list-join"]], "polars.Expr.list.last": [[503, "polars-expr-list-last"]], "polars.Expr.list.len": [[504, "polars-expr-list-len"]], "polars.Expr.list.max": [[505, "polars-expr-list-max"]], "polars.Expr.list.mean": [[506, "polars-expr-list-mean"]], "polars.Expr.list.median": [[507, "polars-expr-list-median"]], "polars.Expr.list.min": [[508, "polars-expr-list-min"]], "polars.Expr.list.n_unique": [[509, "polars-expr-list-n-unique"]], "polars.Expr.list.reverse": [[510, "polars-expr-list-reverse"]], "polars.Expr.list.sample": [[511, "polars-expr-list-sample"]], "polars.Expr.list.set_difference": [[512, "polars-expr-list-set-difference"]], "polars.Expr.list.set_intersection": [[513, "polars-expr-list-set-intersection"]], "polars.Expr.list.set_symmetric_difference": [[514, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[515, "polars-expr-list-set-union"]], "polars.Expr.list.shift": [[516, "polars-expr-list-shift"]], "polars.Expr.list.slice": [[517, "polars-expr-list-slice"]], "polars.Expr.list.sort": [[518, "polars-expr-list-sort"]], "polars.Expr.list.std": [[519, "polars-expr-list-std"]], "polars.Expr.list.sum": [[520, "polars-expr-list-sum"]], "polars.Expr.list.tail": [[521, "polars-expr-list-tail"]], "polars.Expr.list.to_array": [[522, "polars-expr-list-to-array"]], "polars.Expr.list.to_struct": [[523, "polars-expr-list-to-struct"]], "polars.Expr.list.unique": [[524, "polars-expr-list-unique"]], "polars.Expr.list.var": [[525, "polars-expr-list-var"]], "polars.Expr.log": [[526, "polars-expr-log"]], "polars.Expr.log10": [[527, "polars-expr-log10"]], "polars.Expr.log1p": [[528, "polars-expr-log1p"]], "polars.Expr.lower_bound": [[529, "polars-expr-lower-bound"]], "polars.Expr.lt": [[530, "polars-expr-lt"]], "polars.Expr.map_batches": [[531, "polars-expr-map-batches"]], "polars.Expr.map_elements": [[532, "polars-expr-map-elements"]], "polars.Expr.max": [[533, "polars-expr-max"]], "polars.Expr.mean": [[534, "polars-expr-mean"]], "polars.Expr.median": [[535, "polars-expr-median"]], "polars.Expr.meta.eq": [[536, "polars-expr-meta-eq"]], "polars.Expr.meta.has_multiple_outputs": [[537, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.is_column_selection": [[538, "polars-expr-meta-is-column-selection"]], "polars.Expr.meta.is_regex_projection": [[539, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[540, "polars-expr-meta-ne"]], "polars.Expr.meta.output_name": [[541, "polars-expr-meta-output-name"]], "polars.Expr.meta.pop": [[542, "polars-expr-meta-pop"]], "polars.Expr.meta.root_names": [[543, "polars-expr-meta-root-names"]], "polars.Expr.meta.serialize": [[544, "polars-expr-meta-serialize"]], "polars.Expr.meta.tree_format": [[545, "polars-expr-meta-tree-format"]], "polars.Expr.meta.undo_aliases": [[546, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.write_json": [[547, "polars-expr-meta-write-json"]], "polars.Expr.min": [[548, "polars-expr-min"]], "polars.Expr.mod": [[549, "polars-expr-mod"]], "polars.Expr.mode": [[550, "polars-expr-mode"]], "polars.Expr.mul": [[551, "polars-expr-mul"]], "polars.Expr.n_unique": [[552, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[553, "polars-expr-name-keep"]], "polars.Expr.name.map": [[554, "polars-expr-name-map"]], "polars.Expr.name.map_fields": [[555, "polars-expr-name-map-fields"]], "polars.Expr.name.prefix": [[556, "polars-expr-name-prefix"]], "polars.Expr.name.prefix_fields": [[557, "polars-expr-name-prefix-fields"]], "polars.Expr.name.suffix": [[558, "polars-expr-name-suffix"]], "polars.Expr.name.suffix_fields": [[559, "polars-expr-name-suffix-fields"]], "polars.Expr.name.to_lowercase": [[560, "polars-expr-name-to-lowercase"]], "polars.Expr.name.to_uppercase": [[561, "polars-expr-name-to-uppercase"]], "polars.Expr.nan_max": [[562, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[563, "polars-expr-nan-min"]], "polars.Expr.ne": [[564, "polars-expr-ne"]], "polars.Expr.ne_missing": [[565, "polars-expr-ne-missing"]], "polars.Expr.neg": [[566, "polars-expr-neg"]], "polars.Expr.not_": [[567, "polars-expr-not"]], "polars.Expr.null_count": [[568, "polars-expr-null-count"]], "polars.Expr.or_": [[569, "polars-expr-or"]], "polars.Expr.over": [[570, "polars-expr-over"]], "polars.Expr.pct_change": [[571, "polars-expr-pct-change"]], "polars.Expr.peak_max": [[572, "polars-expr-peak-max"]], "polars.Expr.peak_min": [[573, "polars-expr-peak-min"]], "polars.Expr.pipe": [[574, "polars-expr-pipe"]], "polars.Expr.pow": [[575, "polars-expr-pow"]], "polars.Expr.product": [[576, "polars-expr-product"]], "polars.Expr.qcut": [[577, "polars-expr-qcut"]], "polars.Expr.quantile": [[578, "polars-expr-quantile"]], "polars.Expr.radians": [[579, "polars-expr-radians"]], "polars.Expr.rank": [[580, "polars-expr-rank"]], "polars.Expr.rechunk": [[581, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[582, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[583, "polars-expr-repeat-by"]], "polars.Expr.replace": [[584, "polars-expr-replace"]], "polars.Expr.replace_strict": [[585, "polars-expr-replace-strict"]], "polars.Expr.reshape": [[586, "polars-expr-reshape"]], "polars.Expr.reverse": [[587, "polars-expr-reverse"]], "polars.Expr.rle": [[588, "polars-expr-rle"]], "polars.Expr.rle_id": [[589, "polars-expr-rle-id"]], "polars.Expr.rolling": [[590, "polars-expr-rolling"]], "polars.Expr.rolling_map": [[591, "polars-expr-rolling-map"]], "polars.Expr.rolling_max": [[592, "polars-expr-rolling-max"]], "polars.Expr.rolling_max_by": [[593, "polars-expr-rolling-max-by"]], "polars.Expr.rolling_mean": [[594, "polars-expr-rolling-mean"]], "polars.Expr.rolling_mean_by": [[595, "polars-expr-rolling-mean-by"]], "polars.Expr.rolling_median": [[596, "polars-expr-rolling-median"]], "polars.Expr.rolling_median_by": [[597, "polars-expr-rolling-median-by"]], "polars.Expr.rolling_min": [[598, "polars-expr-rolling-min"]], "polars.Expr.rolling_min_by": [[599, "polars-expr-rolling-min-by"]], "polars.Expr.rolling_quantile": [[600, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_quantile_by": [[601, "polars-expr-rolling-quantile-by"]], "polars.Expr.rolling_skew": [[602, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[603, "polars-expr-rolling-std"]], "polars.Expr.rolling_std_by": [[604, "polars-expr-rolling-std-by"]], "polars.Expr.rolling_sum": [[605, "polars-expr-rolling-sum"]], "polars.Expr.rolling_sum_by": [[606, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_var": [[607, "polars-expr-rolling-var"]], "polars.Expr.rolling_var_by": [[608, "polars-expr-rolling-var-by"]], "polars.Expr.round": [[609, "polars-expr-round"]], "polars.Expr.round_sig_figs": [[610, "polars-expr-round-sig-figs"]], "polars.Expr.sample": [[611, "polars-expr-sample"]], "polars.Expr.search_sorted": [[612, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[613, "polars-expr-set-sorted"]], "polars.Expr.shift": [[614, "polars-expr-shift"]], "polars.Expr.shrink_dtype": [[615, "polars-expr-shrink-dtype"]], "polars.Expr.shuffle": [[616, "polars-expr-shuffle"]], "polars.Expr.sign": [[617, "polars-expr-sign"]], "polars.Expr.sin": [[618, "polars-expr-sin"]], "polars.Expr.sinh": [[619, "polars-expr-sinh"]], "polars.Expr.skew": [[620, "polars-expr-skew"]], "polars.Expr.slice": [[621, "polars-expr-slice"]], "polars.Expr.sort": [[622, "polars-expr-sort"]], "polars.Expr.sort_by": [[623, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[624, "polars-expr-sqrt"]], "polars.Expr.std": [[625, "polars-expr-std"]], "polars.Expr.str.concat": [[626, "polars-expr-str-concat"]], "polars.Expr.str.contains": [[627, "polars-expr-str-contains"]], "polars.Expr.str.contains_any": [[628, "polars-expr-str-contains-any"]], "polars.Expr.str.count_matches": [[629, "polars-expr-str-count-matches"]], "polars.Expr.str.decode": [[630, "polars-expr-str-decode"]], "polars.Expr.str.encode": [[631, "polars-expr-str-encode"]], "polars.Expr.str.ends_with": [[632, "polars-expr-str-ends-with"]], "polars.Expr.str.explode": [[633, "polars-expr-str-explode"]], "polars.Expr.str.extract": [[634, "polars-expr-str-extract"]], "polars.Expr.str.extract_all": [[635, "polars-expr-str-extract-all"]], "polars.Expr.str.extract_groups": [[636, "polars-expr-str-extract-groups"]], "polars.Expr.str.extract_many": [[637, "polars-expr-str-extract-many"]], "polars.Expr.str.find": [[638, "polars-expr-str-find"]], "polars.Expr.str.head": [[639, "polars-expr-str-head"]], "polars.Expr.str.join": [[640, "polars-expr-str-join"]], "polars.Expr.str.json_decode": [[641, "polars-expr-str-json-decode"]], "polars.Expr.str.json_path_match": [[642, "polars-expr-str-json-path-match"]], "polars.Expr.str.len_bytes": [[643, "polars-expr-str-len-bytes"]], "polars.Expr.str.len_chars": [[644, "polars-expr-str-len-chars"]], "polars.Expr.str.pad_end": [[645, "polars-expr-str-pad-end"]], "polars.Expr.str.pad_start": [[646, "polars-expr-str-pad-start"]], "polars.Expr.str.replace": [[647, "polars-expr-str-replace"]], "polars.Expr.str.replace_all": [[648, "polars-expr-str-replace-all"]], "polars.Expr.str.replace_many": [[649, "polars-expr-str-replace-many"]], "polars.Expr.str.reverse": [[650, "polars-expr-str-reverse"]], "polars.Expr.str.slice": [[651, "polars-expr-str-slice"]], "polars.Expr.str.split": [[652, "polars-expr-str-split"]], "polars.Expr.str.split_exact": [[653, "polars-expr-str-split-exact"]], "polars.Expr.str.splitn": [[654, "polars-expr-str-splitn"]], "polars.Expr.str.starts_with": [[655, "polars-expr-str-starts-with"]], "polars.Expr.str.strip_chars": [[656, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip_chars_end": [[657, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_chars_start": [[658, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strip_prefix": [[659, "polars-expr-str-strip-prefix"]], "polars.Expr.str.strip_suffix": [[660, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strptime": [[661, "polars-expr-str-strptime"]], "polars.Expr.str.tail": [[662, "polars-expr-str-tail"]], "polars.Expr.str.to_date": [[663, "polars-expr-str-to-date"]], "polars.Expr.str.to_datetime": [[664, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_decimal": [[665, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_integer": [[666, "polars-expr-str-to-integer"]], "polars.Expr.str.to_lowercase": [[667, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_time": [[668, "polars-expr-str-to-time"]], "polars.Expr.str.to_titlecase": [[669, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_uppercase": [[670, "polars-expr-str-to-uppercase"]], "polars.Expr.str.zfill": [[671, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[672, "polars-expr-struct-field"]], "polars.Expr.struct.json_encode": [[673, "polars-expr-struct-json-encode"]], "polars.Expr.struct.rename_fields": [[674, "polars-expr-struct-rename-fields"]], "polars.Expr.struct.with_fields": [[675, "polars-expr-struct-with-fields"]], "polars.Expr.sub": [[676, "polars-expr-sub"]], "polars.Expr.sum": [[677, "polars-expr-sum"]], "polars.Expr.tail": [[678, "polars-expr-tail"]], "polars.Expr.tan": [[679, "polars-expr-tan"]], "polars.Expr.tanh": [[680, "polars-expr-tanh"]], "polars.Expr.to_physical": [[681, "polars-expr-to-physical"]], "polars.Expr.top_k": [[682, "polars-expr-top-k"]], "polars.Expr.top_k_by": [[683, "polars-expr-top-k-by"]], "polars.Expr.truediv": [[684, "polars-expr-truediv"]], "polars.Expr.unique": [[685, "polars-expr-unique"]], "polars.Expr.unique_counts": [[686, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[687, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[688, "polars-expr-value-counts"]], "polars.Expr.var": [[689, "polars-expr-var"]], "polars.Expr.where": [[690, "polars-expr-where"]], "polars.Expr.xor": [[691, "polars-expr-xor"]], "polars.LazyFrame.approx_n_unique": [[789, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.bottom_k": [[790, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.cache": [[791, "polars-lazyframe-cache"]], "polars.LazyFrame.cast": [[792, "polars-lazyframe-cast"]], "polars.LazyFrame.clear": [[793, "polars-lazyframe-clear"]], "polars.LazyFrame.clone": [[794, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[795, "polars-lazyframe-collect"]], "polars.LazyFrame.collect_async": [[796, "polars-lazyframe-collect-async"]], "polars.LazyFrame.collect_schema": [[797, "polars-lazyframe-collect-schema"]], "polars.LazyFrame.columns": [[798, "polars-lazyframe-columns"]], "polars.LazyFrame.count": [[799, "polars-lazyframe-count"]], "polars.LazyFrame.describe": [[800, "polars-lazyframe-describe"]], "polars.LazyFrame.deserialize": [[801, "polars-lazyframe-deserialize"]], "polars.LazyFrame.drop": [[802, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[803, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[804, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explain": [[805, "polars-lazyframe-explain"]], "polars.LazyFrame.explode": [[806, "polars-lazyframe-explode"]], "polars.LazyFrame.fill_nan": [[807, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[808, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[809, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[810, "polars-lazyframe-first"]], "polars.LazyFrame.gather_every": [[811, "polars-lazyframe-gather-every"]], "polars.LazyFrame.group_by": [[812, "polars-lazyframe-group-by"]], "polars.LazyFrame.group_by_dynamic": [[813, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.head": [[814, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[815, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[816, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[817, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[818, "polars-lazyframe-join-asof"]], "polars.LazyFrame.last": [[819, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[820, "polars-lazyframe-lazy"]], "polars.LazyFrame.limit": [[821, "polars-lazyframe-limit"]], "polars.LazyFrame.map_batches": [[822, "polars-lazyframe-map-batches"]], "polars.LazyFrame.max": [[823, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[824, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[825, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[826, "polars-lazyframe-melt"]], "polars.LazyFrame.merge_sorted": [[827, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.min": [[828, "polars-lazyframe-min"]], "polars.LazyFrame.null_count": [[829, "polars-lazyframe-null-count"]], "polars.LazyFrame.pipe": [[830, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[831, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[832, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[833, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[834, "polars-lazyframe-reverse"]], "polars.LazyFrame.rolling": [[835, "polars-lazyframe-rolling"]], "polars.LazyFrame.schema": [[836, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[837, "polars-lazyframe-select"]], "polars.LazyFrame.select_seq": [[838, "polars-lazyframe-select-seq"]], "polars.LazyFrame.serialize": [[839, "polars-lazyframe-serialize"]], "polars.LazyFrame.set_sorted": [[840, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.shift": [[841, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[842, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.slice": [[843, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[844, "polars-lazyframe-sort"]], "polars.LazyFrame.sql": [[845, "polars-lazyframe-sql"]], "polars.LazyFrame.std": [[846, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[847, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[848, "polars-lazyframe-tail"]], "polars.LazyFrame.top_k": [[849, "polars-lazyframe-top-k"]], "polars.LazyFrame.unique": [[850, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[851, "polars-lazyframe-unnest"]], "polars.LazyFrame.unpivot": [[852, "polars-lazyframe-unpivot"]], "polars.LazyFrame.update": [[853, "polars-lazyframe-update"]], "polars.LazyFrame.var": [[854, "polars-lazyframe-var"]], "polars.LazyFrame.width": [[855, "polars-lazyframe-width"]], "polars.LazyFrame.with_columns": [[856, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_columns_seq": [[857, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.with_context": [[858, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[859, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.with_row_index": [[860, "polars-lazyframe-with-row-index"]], "polars.SQLContext.execute": [[1252, "polars-sqlcontext-execute"]], "polars.SQLContext.execute_global": [[1253, "polars-sqlcontext-execute-global"]], "polars.SQLContext.register": [[1254, "polars-sqlcontext-register"]], "polars.SQLContext.register_globals": [[1255, "polars-sqlcontext-register-globals"]], "polars.SQLContext.register_many": [[1256, "polars-sqlcontext-register-many"]], "polars.SQLContext.tables": [[1257, "polars-sqlcontext-tables"]], "polars.SQLContext.unregister": [[1258, "polars-sqlcontext-unregister"]], "polars.Series.abs": [[892, "polars-series-abs"]], "polars.Series.alias": [[893, "polars-series-alias"]], "polars.Series.all": [[894, "polars-series-all"]], "polars.Series.any": [[895, "polars-series-any"]], "polars.Series.append": [[896, "polars-series-append"]], "polars.Series.arccos": [[897, "polars-series-arccos"]], "polars.Series.arccosh": [[898, "polars-series-arccosh"]], "polars.Series.arcsin": [[899, "polars-series-arcsin"]], "polars.Series.arcsinh": [[900, "polars-series-arcsinh"]], "polars.Series.arctan": [[901, "polars-series-arctan"]], "polars.Series.arctanh": [[902, "polars-series-arctanh"]], "polars.Series.arg_max": [[903, "polars-series-arg-max"]], "polars.Series.arg_min": [[904, "polars-series-arg-min"]], "polars.Series.arg_sort": [[905, "polars-series-arg-sort"]], "polars.Series.arg_true": [[906, "polars-series-arg-true"]], "polars.Series.arg_unique": [[907, "polars-series-arg-unique"]], "polars.Series.arr.all": [[908, "polars-series-arr-all"]], "polars.Series.arr.any": [[909, "polars-series-arr-any"]], "polars.Series.arr.arg_max": [[910, "polars-series-arr-arg-max"]], "polars.Series.arr.arg_min": [[911, "polars-series-arr-arg-min"]], "polars.Series.arr.contains": [[912, "polars-series-arr-contains"]], "polars.Series.arr.count_matches": [[913, "polars-series-arr-count-matches"]], "polars.Series.arr.explode": [[914, "polars-series-arr-explode"]], "polars.Series.arr.first": [[915, "polars-series-arr-first"]], "polars.Series.arr.get": [[916, "polars-series-arr-get"]], "polars.Series.arr.join": [[917, "polars-series-arr-join"]], "polars.Series.arr.last": [[918, "polars-series-arr-last"]], "polars.Series.arr.max": [[919, "polars-series-arr-max"]], "polars.Series.arr.median": [[920, "polars-series-arr-median"]], "polars.Series.arr.min": [[921, "polars-series-arr-min"]], "polars.Series.arr.n_unique": [[922, "polars-series-arr-n-unique"]], "polars.Series.arr.reverse": [[923, "polars-series-arr-reverse"]], "polars.Series.arr.shift": [[924, "polars-series-arr-shift"]], "polars.Series.arr.sort": [[925, "polars-series-arr-sort"]], "polars.Series.arr.std": [[926, "polars-series-arr-std"]], "polars.Series.arr.sum": [[927, "polars-series-arr-sum"]], "polars.Series.arr.to_list": [[928, "polars-series-arr-to-list"]], "polars.Series.arr.to_struct": [[929, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[930, "polars-series-arr-unique"]], "polars.Series.arr.var": [[931, "polars-series-arr-var"]], "polars.Series.bin.contains": [[932, "polars-series-bin-contains"]], "polars.Series.bin.decode": [[933, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[934, "polars-series-bin-encode"]], "polars.Series.bin.ends_with": [[935, "polars-series-bin-ends-with"]], "polars.Series.bin.size": [[936, "polars-series-bin-size"]], "polars.Series.bin.starts_with": [[937, "polars-series-bin-starts-with"]], "polars.Series.bottom_k": [[938, "polars-series-bottom-k"]], "polars.Series.cast": [[939, "polars-series-cast"]], "polars.Series.cat.get_categories": [[940, "polars-series-cat-get-categories"]], "polars.Series.cat.is_local": [[941, "polars-series-cat-is-local"]], "polars.Series.cat.to_local": [[942, "polars-series-cat-to-local"]], "polars.Series.cat.uses_lexical_ordering": [[943, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cbrt": [[944, "polars-series-cbrt"]], "polars.Series.ceil": [[945, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[946, "polars-series-chunk-lengths"]], "polars.Series.clear": [[947, "polars-series-clear"]], "polars.Series.clip": [[948, "polars-series-clip"]], "polars.Series.clone": [[949, "polars-series-clone"]], "polars.Series.cos": [[950, "polars-series-cos"]], "polars.Series.cosh": [[951, "polars-series-cosh"]], "polars.Series.cot": [[952, "polars-series-cot"]], "polars.Series.cum_count": [[953, "polars-series-cum-count"]], "polars.Series.cum_max": [[954, "polars-series-cum-max"]], "polars.Series.cum_min": [[955, "polars-series-cum-min"]], "polars.Series.cum_prod": [[956, "polars-series-cum-prod"]], "polars.Series.cum_sum": [[957, "polars-series-cum-sum"]], "polars.Series.cumulative_eval": [[958, "polars-series-cumulative-eval"]], "polars.Series.cut": [[959, "polars-series-cut"]], "polars.Series.describe": [[960, "polars-series-describe"]], "polars.Series.diff": [[961, "polars-series-diff"]], "polars.Series.dot": [[962, "polars-series-dot"]], "polars.Series.drop_nans": [[963, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[964, "polars-series-drop-nulls"]], "polars.Series.dt.add_business_days": [[965, "polars-series-dt-add-business-days"]], "polars.Series.dt.base_utc_offset": [[966, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.cast_time_unit": [[967, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.century": [[968, "polars-series-dt-century"]], "polars.Series.dt.combine": [[969, "polars-series-dt-combine"]], "polars.Series.dt.convert_time_zone": [[970, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.date": [[971, "polars-series-dt-date"]], "polars.Series.dt.datetime": [[972, "polars-series-dt-datetime"]], "polars.Series.dt.day": [[973, "polars-series-dt-day"]], "polars.Series.dt.dst_offset": [[974, "polars-series-dt-dst-offset"]], "polars.Series.dt.epoch": [[975, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[976, "polars-series-dt-hour"]], "polars.Series.dt.is_leap_year": [[977, "polars-series-dt-is-leap-year"]], "polars.Series.dt.iso_year": [[978, "polars-series-dt-iso-year"]], "polars.Series.dt.max": [[979, "polars-series-dt-max"]], "polars.Series.dt.mean": [[980, "polars-series-dt-mean"]], "polars.Series.dt.median": [[981, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[982, "polars-series-dt-microsecond"]], "polars.Series.dt.millennium": [[983, "polars-series-dt-millennium"]], "polars.Series.dt.millisecond": [[984, "polars-series-dt-millisecond"]], "polars.Series.dt.min": [[985, "polars-series-dt-min"]], "polars.Series.dt.minute": [[986, "polars-series-dt-minute"]], "polars.Series.dt.month": [[987, "polars-series-dt-month"]], "polars.Series.dt.month_end": [[988, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[989, "polars-series-dt-month-start"]], "polars.Series.dt.nanosecond": [[990, "polars-series-dt-nanosecond"]], "polars.Series.dt.offset_by": [[991, "polars-series-dt-offset-by"]], "polars.Series.dt.ordinal_day": [[992, "polars-series-dt-ordinal-day"]], "polars.Series.dt.quarter": [[993, "polars-series-dt-quarter"]], "polars.Series.dt.replace_time_zone": [[994, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.round": [[995, "polars-series-dt-round"]], "polars.Series.dt.second": [[996, "polars-series-dt-second"]], "polars.Series.dt.strftime": [[997, "polars-series-dt-strftime"]], "polars.Series.dt.time": [[998, "polars-series-dt-time"]], "polars.Series.dt.timestamp": [[999, "polars-series-dt-timestamp"]], "polars.Series.dt.to_string": [[1000, "polars-series-dt-to-string"]], "polars.Series.dt.total_days": [[1001, "polars-series-dt-total-days"]], "polars.Series.dt.total_hours": [[1002, "polars-series-dt-total-hours"]], "polars.Series.dt.total_microseconds": [[1003, "polars-series-dt-total-microseconds"]], "polars.Series.dt.total_milliseconds": [[1004, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.total_minutes": [[1005, "polars-series-dt-total-minutes"]], "polars.Series.dt.total_nanoseconds": [[1006, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.total_seconds": [[1007, "polars-series-dt-total-seconds"]], "polars.Series.dt.truncate": [[1008, "polars-series-dt-truncate"]], "polars.Series.dt.week": [[1009, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[1010, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[1011, "polars-series-dt-with-time-unit"]], "polars.Series.dt.year": [[1012, "polars-series-dt-year"]], "polars.Series.dtype": [[1013, "polars-series-dtype"]], "polars.Series.entropy": [[1014, "polars-series-entropy"]], "polars.Series.equals": [[1015, "polars-series-equals"]], "polars.Series.estimated_size": [[1016, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[1017, "polars-series-ewm-mean"]], "polars.Series.ewm_mean_by": [[1018, "polars-series-ewm-mean-by"]], "polars.Series.ewm_std": [[1019, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[1020, "polars-series-ewm-var"]], "polars.Series.exp": [[1021, "polars-series-exp"]], "polars.Series.explode": [[1022, "polars-series-explode"]], "polars.Series.extend": [[1023, "polars-series-extend"]], "polars.Series.extend_constant": [[1024, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[1025, "polars-series-fill-nan"]], "polars.Series.fill_null": [[1026, "polars-series-fill-null"]], "polars.Series.filter": [[1027, "polars-series-filter"]], "polars.Series.flags": [[1028, "polars-series-flags"]], "polars.Series.floor": [[1029, "polars-series-floor"]], "polars.Series.gather": [[1030, "polars-series-gather"]], "polars.Series.gather_every": [[1031, "polars-series-gather-every"]], "polars.Series.get_chunks": [[1032, "polars-series-get-chunks"]], "polars.Series.has_nulls": [[1033, "polars-series-has-nulls"]], "polars.Series.has_validity": [[1034, "polars-series-has-validity"]], "polars.Series.hash": [[1035, "polars-series-hash"]], "polars.Series.head": [[1036, "polars-series-head"]], "polars.Series.hist": [[1037, "polars-series-hist"]], "polars.Series.implode": [[1038, "polars-series-implode"]], "polars.Series.interpolate": [[1039, "polars-series-interpolate"]], "polars.Series.interpolate_by": [[1040, "polars-series-interpolate-by"]], "polars.Series.is_between": [[1041, "polars-series-is-between"]], "polars.Series.is_duplicated": [[1042, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[1043, "polars-series-is-empty"]], "polars.Series.is_finite": [[1044, "polars-series-is-finite"]], "polars.Series.is_first_distinct": [[1045, "polars-series-is-first-distinct"]], "polars.Series.is_in": [[1046, "polars-series-is-in"]], "polars.Series.is_infinite": [[1047, "polars-series-is-infinite"]], "polars.Series.is_last_distinct": [[1048, "polars-series-is-last-distinct"]], "polars.Series.is_nan": [[1049, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[1050, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[1051, "polars-series-is-not-null"]], "polars.Series.is_null": [[1052, "polars-series-is-null"]], "polars.Series.is_sorted": [[1053, "polars-series-is-sorted"]], "polars.Series.is_unique": [[1054, "polars-series-is-unique"]], "polars.Series.item": [[1055, "polars-series-item"]], "polars.Series.kurtosis": [[1056, "polars-series-kurtosis"]], "polars.Series.len": [[1057, "polars-series-len"]], "polars.Series.limit": [[1058, "polars-series-limit"]], "polars.Series.list.all": [[1059, "polars-series-list-all"]], "polars.Series.list.any": [[1060, "polars-series-list-any"]], "polars.Series.list.arg_max": [[1061, "polars-series-list-arg-max"]], "polars.Series.list.arg_min": [[1062, "polars-series-list-arg-min"]], "polars.Series.list.concat": [[1063, "polars-series-list-concat"]], "polars.Series.list.contains": [[1064, "polars-series-list-contains"]], "polars.Series.list.count_matches": [[1065, "polars-series-list-count-matches"]], "polars.Series.list.diff": [[1066, "polars-series-list-diff"]], "polars.Series.list.drop_nulls": [[1067, "polars-series-list-drop-nulls"]], "polars.Series.list.eval": [[1068, "polars-series-list-eval"]], "polars.Series.list.explode": [[1069, "polars-series-list-explode"]], "polars.Series.list.first": [[1070, "polars-series-list-first"]], "polars.Series.list.gather": [[1071, "polars-series-list-gather"]], "polars.Series.list.gather_every": [[1072, "polars-series-list-gather-every"]], "polars.Series.list.get": [[1073, "polars-series-list-get"]], "polars.Series.list.head": [[1074, "polars-series-list-head"]], "polars.Series.list.join": [[1075, "polars-series-list-join"]], "polars.Series.list.last": [[1076, "polars-series-list-last"]], "polars.Series.list.len": [[1077, "polars-series-list-len"]], "polars.Series.list.max": [[1078, "polars-series-list-max"]], "polars.Series.list.mean": [[1079, "polars-series-list-mean"]], "polars.Series.list.median": [[1080, "polars-series-list-median"]], "polars.Series.list.min": [[1081, "polars-series-list-min"]], "polars.Series.list.n_unique": [[1082, "polars-series-list-n-unique"]], "polars.Series.list.reverse": [[1083, "polars-series-list-reverse"]], "polars.Series.list.sample": [[1084, "polars-series-list-sample"]], "polars.Series.list.set_difference": [[1085, "polars-series-list-set-difference"]], "polars.Series.list.set_intersection": [[1086, "polars-series-list-set-intersection"]], "polars.Series.list.set_symmetric_difference": [[1087, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.set_union": [[1088, "polars-series-list-set-union"]], "polars.Series.list.shift": [[1089, "polars-series-list-shift"]], "polars.Series.list.slice": [[1090, "polars-series-list-slice"]], "polars.Series.list.sort": [[1091, "polars-series-list-sort"]], "polars.Series.list.std": [[1092, "polars-series-list-std"]], "polars.Series.list.sum": [[1093, "polars-series-list-sum"]], "polars.Series.list.tail": [[1094, "polars-series-list-tail"]], "polars.Series.list.to_array": [[1095, "polars-series-list-to-array"]], "polars.Series.list.to_struct": [[1096, "polars-series-list-to-struct"]], "polars.Series.list.unique": [[1097, "polars-series-list-unique"]], "polars.Series.list.var": [[1098, "polars-series-list-var"]], "polars.Series.log": [[1099, "polars-series-log"]], "polars.Series.log10": [[1100, "polars-series-log10"]], "polars.Series.log1p": [[1101, "polars-series-log1p"]], "polars.Series.lower_bound": [[1102, "polars-series-lower-bound"]], "polars.Series.map_elements": [[1103, "polars-series-map-elements"]], "polars.Series.max": [[1104, "polars-series-max"]], "polars.Series.mean": [[1105, "polars-series-mean"]], "polars.Series.median": [[1106, "polars-series-median"]], "polars.Series.min": [[1107, "polars-series-min"]], "polars.Series.mode": [[1108, "polars-series-mode"]], "polars.Series.n_chunks": [[1109, "polars-series-n-chunks"]], "polars.Series.n_unique": [[1110, "polars-series-n-unique"]], "polars.Series.name": [[1111, "polars-series-name"]], "polars.Series.nan_max": [[1112, "polars-series-nan-max"]], "polars.Series.nan_min": [[1113, "polars-series-nan-min"]], "polars.Series.new_from_index": [[1114, "polars-series-new-from-index"]], "polars.Series.not_": [[1115, "polars-series-not"]], "polars.Series.null_count": [[1116, "polars-series-null-count"]], "polars.Series.pct_change": [[1117, "polars-series-pct-change"]], "polars.Series.peak_max": [[1118, "polars-series-peak-max"]], "polars.Series.peak_min": [[1119, "polars-series-peak-min"]], "polars.Series.product": [[1120, "polars-series-product"]], "polars.Series.qcut": [[1121, "polars-series-qcut"]], "polars.Series.quantile": [[1122, "polars-series-quantile"]], "polars.Series.rank": [[1123, "polars-series-rank"]], "polars.Series.rechunk": [[1124, "polars-series-rechunk"]], "polars.Series.reinterpret": [[1125, "polars-series-reinterpret"]], "polars.Series.rename": [[1126, "polars-series-rename"]], "polars.Series.replace": [[1127, "polars-series-replace"]], "polars.Series.replace_strict": [[1128, "polars-series-replace-strict"]], "polars.Series.reshape": [[1129, "polars-series-reshape"]], "polars.Series.reverse": [[1130, "polars-series-reverse"]], "polars.Series.rle": [[1131, "polars-series-rle"]], "polars.Series.rle_id": [[1132, "polars-series-rle-id"]], "polars.Series.rolling_map": [[1133, "polars-series-rolling-map"]], "polars.Series.rolling_max": [[1134, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[1135, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[1136, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[1137, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[1138, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[1139, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[1140, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[1141, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[1142, "polars-series-rolling-var"]], "polars.Series.round": [[1143, "polars-series-round"]], "polars.Series.round_sig_figs": [[1144, "polars-series-round-sig-figs"]], "polars.Series.sample": [[1145, "polars-series-sample"]], "polars.Series.scatter": [[1146, "polars-series-scatter"]], "polars.Series.search_sorted": [[1147, "polars-series-search-sorted"]], "polars.Series.set": [[1148, "polars-series-set"]], "polars.Series.set_sorted": [[1149, "polars-series-set-sorted"]], "polars.Series.shape": [[1150, "polars-series-shape"]], "polars.Series.shift": [[1151, "polars-series-shift"]], "polars.Series.shrink_dtype": [[1152, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[1153, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[1154, "polars-series-shuffle"]], "polars.Series.sign": [[1155, "polars-series-sign"]], "polars.Series.sin": [[1156, "polars-series-sin"]], "polars.Series.sinh": [[1157, "polars-series-sinh"]], "polars.Series.skew": [[1158, "polars-series-skew"]], "polars.Series.slice": [[1159, "polars-series-slice"]], "polars.Series.sort": [[1160, "polars-series-sort"]], "polars.Series.sqrt": [[1161, "polars-series-sqrt"]], "polars.Series.std": [[1162, "polars-series-std"]], "polars.Series.str.concat": [[1163, "polars-series-str-concat"]], "polars.Series.str.contains": [[1164, "polars-series-str-contains"]], "polars.Series.str.contains_any": [[1165, "polars-series-str-contains-any"]], "polars.Series.str.count_matches": [[1166, "polars-series-str-count-matches"]], "polars.Series.str.decode": [[1167, "polars-series-str-decode"]], "polars.Series.str.encode": [[1168, "polars-series-str-encode"]], "polars.Series.str.ends_with": [[1169, "polars-series-str-ends-with"]], "polars.Series.str.explode": [[1170, "polars-series-str-explode"]], "polars.Series.str.extract": [[1171, "polars-series-str-extract"]], "polars.Series.str.extract_all": [[1172, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1173, "polars-series-str-extract-groups"]], "polars.Series.str.extract_many": [[1174, "polars-series-str-extract-many"]], "polars.Series.str.find": [[1175, "polars-series-str-find"]], "polars.Series.str.head": [[1176, "polars-series-str-head"]], "polars.Series.str.join": [[1177, "polars-series-str-join"]], "polars.Series.str.json_decode": [[1178, "polars-series-str-json-decode"]], "polars.Series.str.json_path_match": [[1179, "polars-series-str-json-path-match"]], "polars.Series.str.len_bytes": [[1180, "polars-series-str-len-bytes"]], "polars.Series.str.len_chars": [[1181, "polars-series-str-len-chars"]], "polars.Series.str.pad_end": [[1182, "polars-series-str-pad-end"]], "polars.Series.str.pad_start": [[1183, "polars-series-str-pad-start"]], "polars.Series.str.replace": [[1184, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[1185, "polars-series-str-replace-all"]], "polars.Series.str.replace_many": [[1186, "polars-series-str-replace-many"]], "polars.Series.str.reverse": [[1187, "polars-series-str-reverse"]], "polars.Series.str.slice": [[1188, "polars-series-str-slice"]], "polars.Series.str.split": [[1189, "polars-series-str-split"]], "polars.Series.str.split_exact": [[1190, "polars-series-str-split-exact"]], "polars.Series.str.splitn": [[1191, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[1192, "polars-series-str-starts-with"]], "polars.Series.str.strip_chars": [[1193, "polars-series-str-strip-chars"]], "polars.Series.str.strip_chars_end": [[1194, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_chars_start": [[1195, "polars-series-str-strip-chars-start"]], "polars.Series.str.strip_prefix": [[1196, "polars-series-str-strip-prefix"]], "polars.Series.str.strip_suffix": [[1197, "polars-series-str-strip-suffix"]], "polars.Series.str.strptime": [[1198, "polars-series-str-strptime"]], "polars.Series.str.tail": [[1199, "polars-series-str-tail"]], "polars.Series.str.to_date": [[1200, "polars-series-str-to-date"]], "polars.Series.str.to_datetime": [[1201, "polars-series-str-to-datetime"]], "polars.Series.str.to_decimal": [[1202, "polars-series-str-to-decimal"]], "polars.Series.str.to_integer": [[1203, "polars-series-str-to-integer"]], "polars.Series.str.to_lowercase": [[1204, "polars-series-str-to-lowercase"]], "polars.Series.str.to_time": [[1205, "polars-series-str-to-time"]], "polars.Series.str.to_titlecase": [[1206, "polars-series-str-to-titlecase"]], "polars.Series.str.to_uppercase": [[1207, "polars-series-str-to-uppercase"]], "polars.Series.str.zfill": [[1208, "polars-series-str-zfill"]], "polars.Series.struct.field": [[1209, "polars-series-struct-field"]], "polars.Series.struct.fields": [[1210, "polars-series-struct-fields"]], "polars.Series.struct.json_encode": [[1211, "polars-series-struct-json-encode"]], "polars.Series.struct.rename_fields": [[1212, "polars-series-struct-rename-fields"]], "polars.Series.struct.schema": [[1213, "polars-series-struct-schema"]], "polars.Series.struct.unnest": [[1214, "polars-series-struct-unnest"]], "polars.Series.sum": [[1215, "polars-series-sum"]], "polars.Series.tail": [[1216, "polars-series-tail"]], "polars.Series.tan": [[1217, "polars-series-tan"]], "polars.Series.tanh": [[1218, "polars-series-tanh"]], "polars.Series.to_arrow": [[1219, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[1220, "polars-series-to-dummies"]], "polars.Series.to_frame": [[1221, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1222, "polars-series-to-init-repr"]], "polars.Series.to_jax": [[1223, "polars-series-to-jax"]], "polars.Series.to_list": [[1224, "polars-series-to-list"]], "polars.Series.to_numpy": [[1225, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[1226, "polars-series-to-pandas"]], "polars.Series.to_physical": [[1227, "polars-series-to-physical"]], "polars.Series.to_torch": [[1228, "polars-series-to-torch"]], "polars.Series.top_k": [[1229, "polars-series-top-k"]], "polars.Series.unique": [[1230, "polars-series-unique"]], "polars.Series.unique_counts": [[1231, "polars-series-unique-counts"]], "polars.Series.upper_bound": [[1232, "polars-series-upper-bound"]], "polars.Series.value_counts": [[1233, "polars-series-value-counts"]], "polars.Series.var": [[1234, "polars-series-var"]], "polars.Series.zip_with": [[1235, "polars-series-zip-with"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.all": [[692, "polars-all"]], "polars.all_horizontal": [[693, "polars-all-horizontal"]], "polars.any": [[694, "polars-any"]], "polars.any_horizontal": [[695, "polars-any-horizontal"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.approx_n_unique": [[696, "polars-approx-n-unique"]], "polars.arange": [[697, "polars-arange"]], "polars.arctan2": [[698, "polars-arctan2"]], "polars.arctan2d": [[699, "polars-arctan2d"]], "polars.arg_sort_by": [[700, "polars-arg-sort-by"]], "polars.arg_where": [[701, "polars-arg-where"]], "polars.build_info": [[52, "polars-build-info"]], "polars.business_day_count": [[702, "polars-business-day-count"]], "polars.coalesce": [[703, "polars-coalesce"]], "polars.col": [[770, "polars-col"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.concat": [[55, "polars-concat"]], "polars.concat_list": [[704, "polars-concat-list"]], "polars.concat_str": [[705, "polars-concat-str"]], "polars.corr": [[706, "polars-corr"]], "polars.count": [[707, "polars-count"]], "polars.cov": [[708, "polars-cov"]], "polars.cum_count": [[709, "polars-cum-count"]], "polars.cum_fold": [[710, "polars-cum-fold"]], "polars.cum_reduce": [[711, "polars-cum-reduce"]], "polars.cum_sum": [[712, "polars-cum-sum"]], "polars.cum_sum_horizontal": [[713, "polars-cum-sum-horizontal"]], "polars.dataframe.group_by.GroupBy.__iter__": [[287, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.agg": [[288, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.all": [[289, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.count": [[290, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.first": [[291, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.head": [[292, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.last": [[293, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.len": [[294, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.map_groups": [[295, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.max": [[296, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.mean": [[297, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.median": [[298, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.min": [[299, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.n_unique": [[300, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.quantile": [[301, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.sum": [[302, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.tail": [[303, "polars-dataframe-group-by-groupby-tail"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.date": [[714, "polars-date"]], "polars.date_range": [[715, "polars-date-range"]], "polars.date_ranges": [[716, "polars-date-ranges"]], "polars.datetime": [[717, "polars-datetime"]], "polars.datetime_range": [[718, "polars-datetime-range"]], "polars.datetime_ranges": [[719, "polars-datetime-ranges"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.duration": [[720, "polars-duration"]], "polars.element": [[721, "polars-element"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.exceptions.CategoricalRemappingWarning": [[86, "polars-exceptions-categoricalremappingwarning"]], "polars.exceptions.ChronoFormatWarning": [[87, "polars-exceptions-chronoformatwarning"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.exceptions.CustomUFuncWarning": [[90, "polars-exceptions-customufuncwarning"]], "polars.exceptions.DataOrientationWarning": [[91, "polars-exceptions-dataorientationwarning"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[94, "polars-exceptions-mapwithoutreturndtypewarning"]], "polars.exceptions.ModuleUpgradeRequiredError": [[95, "polars-exceptions-moduleupgraderequirederror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.OutOfBoundsError": [[98, "polars-exceptions-outofboundserror"]], "polars.exceptions.PanicException": [[99, "polars-exceptions-panicexception"]], "polars.exceptions.ParameterCollisionError": [[100, "polars-exceptions-parametercollisionerror"]], "polars.exceptions.PerformanceWarning": [[101, "polars-exceptions-performancewarning"]], "polars.exceptions.PolarsError": [[102, "polars-exceptions-polarserror"]], "polars.exceptions.PolarsInefficientMapWarning": [[103, "polars-exceptions-polarsinefficientmapwarning"]], "polars.exceptions.PolarsWarning": [[104, "polars-exceptions-polarswarning"]], "polars.exceptions.RowsError": [[105, "polars-exceptions-rowserror"]], "polars.exceptions.SQLInterfaceError": [[106, "polars-exceptions-sqlinterfaceerror"]], "polars.exceptions.SQLSyntaxError": [[107, "polars-exceptions-sqlsyntaxerror"]], "polars.exceptions.SchemaError": [[108, "polars-exceptions-schemaerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[109, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ShapeError": [[110, "polars-exceptions-shapeerror"]], "polars.exceptions.StringCacheMismatchError": [[111, "polars-exceptions-stringcachemismatcherror"]], "polars.exceptions.StructFieldNotFoundError": [[112, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.TooManyRowsReturnedError": [[113, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.UnstableWarning": [[114, "polars-exceptions-unstablewarning"]], "polars.exceptions.UnsuitableSQLError": [[115, "polars-exceptions-unsuitablesqlerror"]], "polars.exclude": [[722, "polars-exclude"]], "polars.first": [[723, "polars-first"]], "polars.fold": [[724, "polars-fold"]], "polars.format": [[725, "polars-format"]], "polars.from_arrow": [[116, "polars-from-arrow"]], "polars.from_dataframe": [[117, "polars-from-dataframe"]], "polars.from_dict": [[118, "polars-from-dict"]], "polars.from_dicts": [[119, "polars-from-dicts"]], "polars.from_epoch": [[726, "polars-from-epoch"]], "polars.from_numpy": [[120, "polars-from-numpy"]], "polars.from_pandas": [[121, "polars-from-pandas"]], "polars.from_records": [[122, "polars-from-records"]], "polars.from_repr": [[123, "polars-from-repr"]], "polars.get_index_type": [[124, "polars-get-index-type"]], "polars.groups": [[727, "polars-groups"]], "polars.head": [[728, "polars-head"]], "polars.implode": [[729, "polars-implode"]], "polars.int_range": [[730, "polars-int-range"]], "polars.int_ranges": [[731, "polars-int-ranges"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[125, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.json_normalize": [[126, "polars-json-normalize"]], "polars.last": [[732, "polars-last"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[861, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[862, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[863, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[864, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[865, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[866, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[867, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[868, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[869, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[870, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[871, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[872, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[873, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[874, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[875, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[876, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[877, "polars-lazyframe-in-process-inprocessquery-cancel"]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[878, "polars-lazyframe-in-process-inprocessquery-fetch"]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[879, "polars-lazyframe-in-process-inprocessquery-fetch-blocking"]], "polars.len": [[733, "polars-len"]], "polars.lit": [[734, "polars-lit"]], "polars.map_batches": [[735, "polars-map-batches"]], "polars.map_groups": [[736, "polars-map-groups"]], "polars.max": [[737, "polars-max"]], "polars.max_horizontal": [[738, "polars-max-horizontal"]], "polars.mean": [[739, "polars-mean"]], "polars.mean_horizontal": [[740, "polars-mean-horizontal"]], "polars.median": [[741, "polars-median"]], "polars.min": [[742, "polars-min"]], "polars.min_horizontal": [[743, "polars-min-horizontal"]], "polars.n_unique": [[744, "polars-n-unique"]], "polars.nth": [[745, "polars-nth"]], "polars.ones": [[746, "polars-ones"]], "polars.quantile": [[747, "polars-quantile"]], "polars.read_avro": [[127, "polars-read-avro"]], "polars.read_clipboard": [[128, "polars-read-clipboard"]], "polars.read_csv": [[129, "polars-read-csv"]], "polars.read_csv_batched": [[130, "polars-read-csv-batched"]], "polars.read_database": [[131, "polars-read-database"]], "polars.read_database_uri": [[132, "polars-read-database-uri"]], "polars.read_delta": [[133, "polars-read-delta"]], "polars.read_excel": [[134, "polars-read-excel"]], "polars.read_ipc": [[135, "polars-read-ipc"]], "polars.read_ipc_schema": [[136, "polars-read-ipc-schema"]], "polars.read_ipc_stream": [[137, "polars-read-ipc-stream"]], "polars.read_json": [[138, "polars-read-json"]], "polars.read_ndjson": [[139, "polars-read-ndjson"]], "polars.read_ods": [[140, "polars-read-ods"]], "polars.read_parquet": [[141, "polars-read-parquet"]], "polars.read_parquet_schema": [[142, "polars-read-parquet-schema"]], "polars.reduce": [[748, "polars-reduce"]], "polars.repeat": [[749, "polars-repeat"]], "polars.rolling_corr": [[750, "polars-rolling-corr"]], "polars.rolling_cov": [[751, "polars-rolling-cov"]], "polars.scan_csv": [[143, "polars-scan-csv"]], "polars.scan_delta": [[144, "polars-scan-delta"]], "polars.scan_iceberg": [[145, "polars-scan-iceberg"]], "polars.scan_ipc": [[146, "polars-scan-ipc"]], "polars.scan_ndjson": [[147, "polars-scan-ndjson"]], "polars.scan_parquet": [[148, "polars-scan-parquet"]], "polars.scan_pyarrow_dataset": [[149, "polars-scan-pyarrow-dataset"]], "polars.select": [[752, "polars-select"]], "polars.set_random_seed": [[150, "polars-set-random-seed"]], "polars.show_versions": [[151, "polars-show-versions"]], "polars.sql": [[753, "polars-sql"]], "polars.sql_expr": [[754, "polars-sql-expr"]], "polars.std": [[755, "polars-std"]], "polars.struct": [[756, "polars-struct"]], "polars.sum": [[757, "polars-sum"]], "polars.sum_horizontal": [[758, "polars-sum-horizontal"]], "polars.tail": [[759, "polars-tail"]], "polars.testing.assert_frame_equal": [[152, "polars-testing-assert-frame-equal"]], "polars.testing.assert_frame_not_equal": [[153, "polars-testing-assert-frame-not-equal"]], "polars.testing.assert_series_equal": [[154, "polars-testing-assert-series-equal"]], "polars.testing.assert_series_not_equal": [[155, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.column": [[156, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[157, "polars-testing-parametric-columns"]], "polars.testing.parametric.create_list_strategy": [[158, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.dataframes": [[159, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.dtypes": [[160, "polars-testing-parametric-dtypes"]], "polars.testing.parametric.lists": [[161, "polars-testing-parametric-lists"]], "polars.testing.parametric.load_profile": [[162, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.series": [[163, "polars-testing-parametric-series"]], "polars.testing.parametric.set_profile": [[164, "polars-testing-parametric-set-profile"]], "polars.thread_pool_size": [[165, "polars-thread-pool-size"]], "polars.threadpool_size": [[166, "polars-threadpool-size"]], "polars.time": [[760, "polars-time"]], "polars.time_range": [[761, "polars-time-range"]], "polars.time_ranges": [[762, "polars-time-ranges"]], "polars.using_string_cache": [[167, "polars-using-string-cache"]], "polars.var": [[763, "polars-var"]], "polars.when": [[764, "polars-when"]], "polars.zeros": [[765, "polars-zeros"]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__dataframe__() (polars.dataframe method)": [[170, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1270, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1270, "polars.SQLContext.__exit__", false]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.sqlcontext method)": [[1270, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[156, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[317, "polars.Expr.abs", false]], "abs() (polars.series method)": [[892, "polars.Series.abs", false]], "add() (polars.expr method)": [[318, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[392, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[965, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[861, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[319, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[320, "polars.Expr.alias", false]], "alias() (polars.series method)": [[893, "polars.Series.alias", false]], "align_frames() (in module polars)": [[47, "polars.align_frames", false]], "all() (in module polars)": [[692, "polars.all", false]], "all() (in module polars.selectors)": [[890, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[321, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[337, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[486, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[862, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[894, "polars.Series.all", false]], "all() (polars.series.arr method)": [[908, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1059, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[693, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[890, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[890, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[322, "polars.Expr.and_", false]], "any() (in module polars)": [[694, "polars.any", false]], "any() (polars.expr method)": [[323, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[338, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[487, "polars.Expr.list.any", false]], "any() (polars.series method)": [[895, "polars.Series.any", false]], "any() (polars.series.arr method)": [[909, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1060, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[695, "polars.any_horizontal", false]], "append() (polars.expr method)": [[324, "polars.Expr.append", false]], "append() (polars.series method)": [[896, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[696, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[171, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[325, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[789, "polars.LazyFrame.approx_n_unique", false]], "arange() (in module polars)": [[697, "polars.arange", false]], "arccos() (polars.expr method)": [[326, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[897, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[327, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[898, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[328, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[899, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[329, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[900, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[330, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[901, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[698, "polars.arctan2", false]], "arctan2d() (in module polars)": [[699, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[331, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[902, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[332, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[339, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[488, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[903, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[910, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1061, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[333, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[340, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[489, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[904, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[911, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1062, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[334, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[905, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[700, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[335, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[906, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[336, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[907, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[701, "polars.arg_where", false]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[152, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[153, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[154, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[155, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[361, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[393, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[966, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[890, "polars.selectors.binary", false]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[890, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[172, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[368, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[790, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[938, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[369, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[52, "polars.build_info", false]], "business_day_count() (in module polars)": [[702, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[890, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[890, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[890, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[791, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[877, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[173, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[370, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[792, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[939, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[394, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[967, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[890, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[86, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[372, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[944, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[373, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[945, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[395, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[968, "polars.Series.dt.century", false]], "chronoformatwarning": [[87, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[946, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[174, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[793, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[947, "polars.Series.clear", false]], "clip() (polars.expr method)": [[374, "polars.Expr.clip", false]], "clip() (polars.series method)": [[948, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[175, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[794, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[949, "polars.Series.clone", false]], "coalesce() (in module polars)": [[703, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[795, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[53, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[796, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[176, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[797, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[156, "polars.testing.parametric.column", false]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[177, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[798, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[157, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[396, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[969, "polars.Series.dt.combine", false]], "computeerror": [[89, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[55, "polars.concat", false]], "concat() (polars.expr.list method)": [[490, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[626, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1063, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1163, "polars.Series.str.concat", false]], "concat_list() (in module polars)": [[704, "polars.concat_list", false]], "concat_str() (in module polars)": [[705, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[890, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[341, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[362, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[491, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[627, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[912, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[932, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1064, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1164, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[628, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1165, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[397, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[970, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[706, "polars.corr", false]], "corr() (polars.dataframe method)": [[178, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[375, "polars.Expr.cos", false]], "cos() (polars.series method)": [[950, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[376, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[951, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[377, "polars.Expr.cot", false]], "cot() (polars.series method)": [[952, "polars.Series.cot", false]], "count() (in module polars)": [[707, "polars.count", false]], "count() (polars.dataframe method)": [[179, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[378, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[799, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[863, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count_matches() (polars.expr.arr method)": [[342, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[492, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[629, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[913, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1065, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1166, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[708, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[158, "polars.testing.parametric.create_list_strategy", false]], "cum_count() (in module polars)": [[709, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[379, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[953, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[710, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[380, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[954, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[381, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[955, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[382, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[956, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[711, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[712, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[383, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[957, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[713, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[384, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[958, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[90, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[385, "polars.Expr.cut", false]], "cut() (polars.series method)": [[959, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[159, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[91, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date", false]], "date() (in module polars)": [[714, "polars.date", false]], "date() (in module polars.selectors)": [[890, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[398, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[971, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[715, "polars.date_range", false]], "date_ranges() (in module polars)": [[716, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[717, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[890, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[399, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[972, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[718, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[719, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[400, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[973, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[890, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[363, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[630, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[933, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1167, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[386, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[180, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[800, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[960, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[181, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[387, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[801, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[388, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[493, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[961, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1066, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[890, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[389, "polars.Expr.dot", false]], "dot() (polars.series method)": [[962, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[182, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[802, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[183, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.expr method)": [[390, "polars.Expr.drop_nans", false]], "drop_nans() (polars.series method)": [[963, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[184, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[391, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[494, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[803, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[964, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1067, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[401, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[974, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1013, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[185, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[804, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[160, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[92, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[720, "polars.duration", false]], "duration() (in module polars.selectors)": [[890, "polars.selectors.duration", false]], "element() (in module polars)": [[721, "polars.element", false]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[364, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[631, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[934, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1168, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[890, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[365, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[632, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[935, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1169, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[436, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1014, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[402, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[975, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[437, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[536, "polars.Expr.meta.eq", false]], "eq_missing() (polars.expr method)": [[438, "polars.Expr.eq_missing", false]], "equals() (polars.dataframe method)": [[186, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1015, "polars.Series.equals", false]], "estimated_size() (polars.dataframe method)": [[187, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1016, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[495, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1068, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[439, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1017, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[440, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1018, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[441, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1019, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[442, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1020, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[722, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[890, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[443, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1252, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1253, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[444, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1021, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[890, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[805, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[188, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[445, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[343, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[496, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[633, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[806, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1022, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[914, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1069, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1170, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[189, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1023, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[446, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1024, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[634, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1171, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[635, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1172, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[636, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1173, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[637, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1174, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[878, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[879, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[672, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1209, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1210, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[190, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[447, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[807, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1025, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[191, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[448, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[808, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1026, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[192, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[449, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[809, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1027, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[638, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1175, "polars.Series.str.find", false]], "first() (in module polars)": [[723, "polars.first", false]], "first() (in module polars.selectors)": [[890, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[450, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[344, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[497, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[810, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[864, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series.arr method)": [[915, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1070, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[193, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1028, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[451, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[890, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[452, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1029, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[453, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[724, "polars.fold", false]], "fold() (polars.dataframe method)": [[194, "polars.DataFrame.fold", false]], "format() (in module polars)": [[725, "polars.format", false]], "forward_fill() (polars.expr method)": [[454, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[116, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[117, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[118, "polars.from_dict", false]], "from_dicts() (in module polars)": [[119, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[726, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[455, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[120, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[121, "polars.from_pandas", false]], "from_records() (in module polars)": [[122, "polars.from_records", false]], "from_repr() (in module polars)": [[123, "polars.from_repr", false]], "gather() (polars.expr method)": [[456, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[498, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1030, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1071, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[195, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[457, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[499, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[811, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1031, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1072, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[458, "polars.Expr.ge", false]], "get() (polars.expr method)": [[459, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[345, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[500, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[916, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1073, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[371, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[940, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1032, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[196, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[197, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[198, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[124, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[199, "polars.DataFrame.glimpse", false]], "group_by() (polars.dataframe method)": [[200, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[812, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[201, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[813, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[727, "polars.groups", false]], "gt() (polars.expr method)": [[460, "polars.Expr.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[537, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[461, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1033, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1034, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[462, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1035, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[202, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[728, "polars.head", false]], "head() (polars.dataframe method)": [[203, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[463, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[501, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[639, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[814, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[865, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1036, "polars.Series.head", false]], "head() (polars.series.list method)": [[1074, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1176, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[204, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[464, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1037, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[403, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[976, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[205, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[729, "polars.implode", false]], "implode() (polars.expr method)": [[465, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1038, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[206, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[466, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[815, "polars.LazyFrame.inspect", false]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[730, "polars.int_range", false]], "int_ranges() (in module polars)": [[731, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[890, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[207, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[467, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[816, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1039, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[468, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1040, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[469, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1041, "polars.Series.is_between", false]], "is_column_selection() (polars.expr.meta method)": [[538, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[208, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[470, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1042, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[209, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1043, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[471, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1044, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[472, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1045, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[473, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1046, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[474, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1047, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[475, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1048, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[404, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[977, "polars.Series.dt.is_leap_year", false]], "is_local() (polars.series.cat method)": [[941, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[476, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1049, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[477, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1050, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[478, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1051, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[479, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1052, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[539, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[890, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1053, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[210, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[480, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1054, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[405, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[978, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[211, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1055, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[212, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[213, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[214, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[215, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[346, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[502, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[640, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[817, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[917, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1075, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1177, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[216, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[818, "polars.LazyFrame.join_asof", false]], "json_decode() (polars.expr.str method)": [[641, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1178, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[673, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1211, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[126, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[642, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1179, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[553, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[481, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1056, "polars.Series.kurtosis", false]], "last() (in module polars)": [[732, "polars.last", false]], "last() (in module polars.selectors)": [[890, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[482, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[347, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[503, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[819, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series.arr method)": [[918, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1076, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[217, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[820, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[483, "polars.Expr.le", false]], "len() (in module polars)": [[733, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[484, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[504, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[867, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1057, "polars.Series.len", false]], "len() (polars.series.list method)": [[1077, "polars.Series.list.len", false]], "len_bytes() (polars.expr.str method)": [[643, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1180, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.str method)": [[644, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.str method)": [[1181, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[218, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[485, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[821, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1058, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[734, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[526, "polars.Expr.log", false]], "log() (polars.series method)": [[1099, "polars.Series.log", false]], "log10() (polars.expr method)": [[527, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1100, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[528, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1101, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[529, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1102, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[530, "polars.Expr.lt", false]], "map() (polars.expr.name method)": [[554, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[735, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[531, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[822, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[532, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1103, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[555, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[736, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[868, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[219, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[94, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[890, "polars.selectors.matches", false]], "max() (in module polars)": [[737, "polars.max", false]], "max() (polars.dataframe method)": [[220, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[533, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[348, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[505, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[823, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1104, "polars.Series.max", false]], "max() (polars.series.arr method)": [[919, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[979, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1078, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[738, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[221, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[739, "polars.mean", false]], "mean() (polars.dataframe method)": [[222, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[534, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[506, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[824, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1105, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[980, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1079, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[740, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[223, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[741, "polars.median", false]], "median() (polars.dataframe method)": [[224, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[535, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[349, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[507, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[825, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1106, "polars.Series.median", false]], "median() (polars.series.arr method)": [[920, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[981, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1080, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[225, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[826, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[226, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[827, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[406, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[982, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[407, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[983, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[408, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[984, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[742, "polars.min", false]], "min() (polars.dataframe method)": [[227, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[548, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[350, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[508, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[828, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[872, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1107, "polars.Series.min", false]], "min() (polars.series.arr method)": [[921, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[985, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1081, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[743, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[228, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[409, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[986, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[549, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[550, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1108, "polars.Series.mode", false]], "module": [[888, "module-polars.plugins", false], [890, "module-polars.selectors", false]], "moduleupgraderequirederror": [[95, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[410, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[987, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[411, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[988, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[412, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[989, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[551, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[229, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1109, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[744, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[230, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[552, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[351, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[509, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[873, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1110, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[922, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1082, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1111, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[562, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1112, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[563, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1113, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[413, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[990, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[564, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[540, "polars.Expr.meta.ne", false]], "ne_missing() (polars.expr method)": [[565, "polars.Expr.ne_missing", false]], "neg() (polars.expr method)": [[566, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1114, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[125, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[96, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[567, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1115, "polars.Series.not_", false]], "nth() (in module polars)": [[745, "polars.nth", false]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[231, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[568, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[829, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1116, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[890, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[414, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[991, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[746, "polars.ones", false]], "or_() (polars.expr method)": [[569, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[415, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[992, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[98, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[541, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[570, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[645, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1182, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[646, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1183, "polars.Series.str.pad_start", false]], "panicexception": [[99, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[100, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[232, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[571, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1117, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[572, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1118, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[573, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1119, "polars.Series.peak_min", false]], "performancewarning": [[101, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[233, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[574, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[830, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[234, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[312, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1248, "polars.Series.plot", false]], "polars.plugins": [[888, "module-polars.plugins", false]], "polars.selectors": [[890, "module-polars.selectors", false]], "polarserror": [[102, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[103, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[104, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[542, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[575, "polars.Expr.pow", false]], "prefix() (polars.expr.name method)": [[556, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[557, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[235, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[576, "polars.Expr.product", false]], "product() (polars.series method)": [[1120, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[831, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[577, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1121, "polars.Series.qcut", false]], "quantile() (in module polars)": [[747, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[236, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[578, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[832, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[874, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1122, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[416, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[993, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[579, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[580, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1123, "polars.Series.rank", false]], "read_avro() (in module polars)": [[127, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[128, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[129, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[130, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[131, "polars.read_database", false]], "read_database_uri() (in module polars)": [[132, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[133, "polars.read_delta", false]], "read_excel() (in module polars)": [[134, "polars.read_excel", false]], "read_ipc() (in module polars)": [[135, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[136, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[137, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[138, "polars.read_json", false]], "read_ndjson() (in module polars)": [[139, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[140, "polars.read_ods", false]], "read_parquet() (in module polars)": [[141, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[142, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[237, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[581, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1124, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[748, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1254, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1255, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1256, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[888, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[582, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1125, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[238, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[833, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1126, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[674, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1212, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[749, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[583, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[584, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[647, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1127, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1184, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[648, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1185, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[239, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[649, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1186, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[585, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1128, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[417, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[994, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[586, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1129, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[240, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[587, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[352, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[510, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[650, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[834, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1130, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[923, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1083, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1187, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[588, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1131, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[589, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1132, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[241, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[590, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[835, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[750, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[751, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[591, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1133, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[592, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1134, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[593, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[594, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1135, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[595, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[596, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1136, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[597, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[598, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1137, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[599, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[600, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1138, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[601, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[602, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1139, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[603, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1140, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[604, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[605, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1141, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[606, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[607, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1142, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[608, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[543, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[609, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[418, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1143, "polars.Series.round", false]], "round() (polars.series.dt method)": [[995, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[610, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1144, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[242, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[243, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[244, "polars.DataFrame.rows_by_key", false]], "rowserror": [[105, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[245, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[611, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[511, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1145, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1084, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[143, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[144, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[145, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[146, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[147, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[148, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[149, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1146, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[246, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[836, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1213, "polars.Series.struct.schema", false]], "schemaerror": [[108, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[109, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[612, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1147, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[419, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[996, "polars.Series.dt.second", false]], "select() (in module polars)": [[752, "polars.select", false]], "select() (polars.dataframe method)": [[247, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[837, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[248, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[838, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[249, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[544, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[839, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1148, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[512, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1085, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[513, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1086, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[150, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[250, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[613, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[840, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1149, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[514, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1087, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[515, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1088, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[251, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1150, "polars.Series.shape", false]], "shapeerror": [[110, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[252, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[614, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[353, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[516, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[841, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1151, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[924, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1089, "polars.Series.list.shift", false]], "show_graph() (polars.lazyframe method)": [[842, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[151, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[615, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1152, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[253, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1153, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[616, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1154, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[617, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1155, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[890, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[618, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1156, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[619, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1157, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[366, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[936, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[620, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1158, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[254, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[621, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[517, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[651, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[843, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1159, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1090, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1188, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[255, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[622, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[354, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[518, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[844, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1160, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[925, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1091, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[623, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[652, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1189, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[653, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1190, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[654, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1191, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[753, "polars.sql", false]], "sql() (polars.dataframe method)": [[256, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[845, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[754, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1270, "polars.SQLContext", false]], "sqlinterfaceerror": [[106, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[107, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[624, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1161, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[890, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[367, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[655, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[937, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1192, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[755, "polars.std", false]], "std() (polars.dataframe method)": [[257, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[625, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[355, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[519, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[846, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1162, "polars.Series.std", false]], "std() (polars.series.arr method)": [[926, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1092, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[420, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[997, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[890, "polars.selectors.string", false]], "stringcache (class in polars)": [[46, "polars.StringCache", false]], "stringcachemismatcherror": [[111, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[656, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1193, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[657, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1194, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[658, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1195, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[659, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1196, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[660, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1197, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[661, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1198, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[756, "polars.struct", false]], "structfieldnotfounderror": [[112, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[313, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[676, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[558, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[559, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[757, "polars.sum", false]], "sum() (polars.dataframe method)": [[258, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[677, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[356, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[520, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[847, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[875, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1215, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[927, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1093, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[758, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[259, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1257, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[759, "polars.tail", false]], "tail() (polars.dataframe method)": [[260, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[678, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[521, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[662, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[848, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[876, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1216, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1094, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1199, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[679, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1217, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[680, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1218, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[890, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[165, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[166, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time", false]], "time() (in module polars)": [[760, "polars.time", false]], "time() (in module polars.selectors)": [[890, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[421, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[998, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[761, "polars.time_range", false]], "time_ranges() (in module polars)": [[762, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[422, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[999, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[522, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1095, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[261, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1219, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[663, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1200, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[664, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1201, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[665, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1202, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[262, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[263, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[264, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1220, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1221, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[265, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1222, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[666, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1203, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[266, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1223, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[357, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1224, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[928, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[942, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[560, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[667, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1204, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[267, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1225, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[268, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1226, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[681, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1227, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[269, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[423, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1000, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[270, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[358, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[523, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[929, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1096, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[668, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1205, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[669, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1206, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[271, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1228, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[561, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[670, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1207, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[113, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[272, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[682, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[849, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1229, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[683, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[424, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1001, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[425, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1002, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[426, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1003, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[427, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1004, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[428, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1005, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[429, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1006, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[430, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1007, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[273, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[545, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[684, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[431, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1008, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[546, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[274, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[685, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[359, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[524, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[850, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1230, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[930, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1097, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[686, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1231, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[275, "polars.DataFrame.unnest", false]], "unnest() (polars.lazyframe method)": [[851, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1214, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[276, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[852, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1258, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[890, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[114, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[277, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[115, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[278, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[853, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[687, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1232, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[279, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[943, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[167, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[688, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1233, "polars.Series.value_counts", false]], "var() (in module polars)": [[763, "polars.var", false]], "var() (polars.dataframe method)": [[280, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[689, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[360, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[525, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[854, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1234, "polars.Series.var", false]], "var() (polars.series.arr method)": [[931, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1098, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[281, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[432, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1009, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[433, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1010, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[764, "polars.when", false]], "where() (polars.expr method)": [[690, "polars.Expr.where", false]], "width (polars.dataframe property)": [[282, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[855, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[283, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[856, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[284, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[857, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[858, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[675, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[285, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[859, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[286, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[860, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[434, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1011, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[547, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[691, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[435, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1012, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[765, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[671, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1208, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1235, "polars.Series.zip_with", false]]}, "objects": {"polars": [[1270, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [692, 4, 1, "", "all"], [693, 4, 1, "", "all_horizontal"], [694, 4, 1, "", "any"], [695, 4, 1, "", "any_horizontal"], [696, 4, 1, "", "approx_n_unique"], [697, 4, 1, "", "arange"], [698, 4, 1, "", "arctan2"], [699, 4, 1, "", "arctan2d"], [700, 4, 1, "", "arg_sort_by"], [701, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [702, 4, 1, "", "business_day_count"], [703, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [704, 4, 1, "", "concat_list"], [705, 4, 1, "", "concat_str"], [706, 4, 1, "", "corr"], [707, 4, 1, "", "count"], [708, 4, 1, "", "cov"], [709, 4, 1, "", "cum_count"], [710, 4, 1, "", "cum_fold"], [711, 4, 1, "", "cum_reduce"], [712, 4, 1, "", "cum_sum"], [713, 4, 1, "", "cum_sum_horizontal"], [714, 4, 1, "", "date"], [715, 4, 1, "", "date_range"], [716, 4, 1, "", "date_ranges"], [717, 4, 1, "", "datetime"], [718, 4, 1, "", "datetime_range"], [719, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [720, 4, 1, "", "duration"], [721, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [722, 4, 1, "", "exclude"], [723, 4, 1, "", "first"], [724, 4, 1, "", "fold"], [725, 4, 1, "", "format"], [116, 4, 1, "", "from_arrow"], [117, 4, 1, "", "from_dataframe"], [118, 4, 1, "", "from_dict"], [119, 4, 1, "", "from_dicts"], [726, 4, 1, "", "from_epoch"], [120, 4, 1, "", "from_numpy"], [121, 4, 1, "", "from_pandas"], [122, 4, 1, "", "from_records"], [123, 4, 1, "", "from_repr"], [124, 4, 1, "", "get_index_type"], [727, 4, 1, "", "groups"], [728, 4, 1, "", "head"], [729, 4, 1, "", "implode"], [730, 4, 1, "", "int_range"], [731, 4, 1, "", "int_ranges"], [126, 4, 1, "", "json_normalize"], [732, 4, 1, "", "last"], [733, 4, 1, "", "len"], [734, 4, 1, "", "lit"], [735, 4, 1, "", "map_batches"], [736, 4, 1, "", "map_groups"], [737, 4, 1, "", "max"], [738, 4, 1, "", "max_horizontal"], [739, 4, 1, "", "mean"], [740, 4, 1, "", "mean_horizontal"], [741, 4, 1, "", "median"], [742, 4, 1, "", "min"], [743, 4, 1, "", "min_horizontal"], [744, 4, 1, "", "n_unique"], [745, 4, 1, "", "nth"], [746, 4, 1, "", "ones"], [888, 6, 0, "-", "plugins"], [747, 4, 1, "", "quantile"], [127, 4, 1, "", "read_avro"], [128, 4, 1, "", "read_clipboard"], [129, 4, 1, "", "read_csv"], [130, 4, 1, "", "read_csv_batched"], [131, 4, 1, "", "read_database"], [132, 4, 1, "", "read_database_uri"], [133, 4, 1, "", "read_delta"], [134, 4, 1, "", "read_excel"], [135, 4, 1, "", "read_ipc"], [136, 4, 1, "", "read_ipc_schema"], [137, 4, 1, "", "read_ipc_stream"], [138, 4, 1, "", "read_json"], [139, 4, 1, "", "read_ndjson"], [140, 4, 1, "", "read_ods"], [141, 4, 1, "", "read_parquet"], [142, 4, 1, "", "read_parquet_schema"], [748, 4, 1, "", "reduce"], [749, 4, 1, "", "repeat"], [750, 4, 1, "", "rolling_corr"], [751, 4, 1, "", "rolling_cov"], [143, 4, 1, "", "scan_csv"], [144, 4, 1, "", "scan_delta"], [145, 4, 1, "", "scan_iceberg"], [146, 4, 1, "", "scan_ipc"], [147, 4, 1, "", "scan_ndjson"], [148, 4, 1, "", "scan_parquet"], [149, 4, 1, "", "scan_pyarrow_dataset"], [752, 4, 1, "", "select"], [890, 6, 0, "-", "selectors"], [150, 4, 1, "", "set_random_seed"], [151, 4, 1, "", "show_versions"], [753, 4, 1, "", "sql"], [754, 4, 1, "", "sql_expr"], [755, 4, 1, "", "std"], [756, 4, 1, "", "struct"], [757, 4, 1, "", "sum"], [758, 4, 1, "", "sum_horizontal"], [759, 4, 1, "", "tail"], [165, 4, 1, "", "thread_pool_size"], [166, 4, 1, "", "threadpool_size"], [760, 4, 1, "", "time"], [761, 4, 1, "", "time_range"], [762, 4, 1, "", "time_ranges"], [167, 4, 1, "", "using_string_cache"], [763, 4, 1, "", "var"], [764, 4, 1, "", "when"], [765, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[170, 0, 1, "", "__dataframe__"], [171, 0, 1, "", "approx_n_unique"], [172, 0, 1, "", "bottom_k"], [173, 0, 1, "", "cast"], [174, 0, 1, "", "clear"], [175, 0, 1, "", "clone"], [176, 0, 1, "", "collect_schema"], [177, 1, 1, "", "columns"], [178, 0, 1, "", "corr"], [179, 0, 1, "", "count"], [180, 0, 1, "", "describe"], [181, 0, 1, "", "deserialize"], [182, 0, 1, "", "drop"], [183, 0, 1, "", "drop_in_place"], [184, 0, 1, "", "drop_nulls"], [185, 1, 1, "", "dtypes"], [186, 0, 1, "", "equals"], [187, 0, 1, "", "estimated_size"], [188, 0, 1, "", "explode"], [189, 0, 1, "", "extend"], [190, 0, 1, "", "fill_nan"], [191, 0, 1, "", "fill_null"], [192, 0, 1, "", "filter"], [193, 1, 1, "", "flags"], [194, 0, 1, "", "fold"], [195, 0, 1, "", "gather_every"], [196, 0, 1, "", "get_column"], [197, 0, 1, "", "get_column_index"], [198, 0, 1, "", "get_columns"], [199, 0, 1, "", "glimpse"], [200, 0, 1, "", "group_by"], [201, 0, 1, "", "group_by_dynamic"], [202, 0, 1, "", "hash_rows"], [203, 0, 1, "", "head"], [204, 1, 1, "", "height"], [205, 0, 1, "", "hstack"], [206, 0, 1, "", "insert_column"], [207, 0, 1, "", "interpolate"], [208, 0, 1, "", "is_duplicated"], [209, 0, 1, "", "is_empty"], [210, 0, 1, "", "is_unique"], [211, 0, 1, "", "item"], [212, 0, 1, "", "iter_columns"], [213, 0, 1, "", "iter_rows"], [214, 0, 1, "", "iter_slices"], [215, 0, 1, "", "join"], [216, 0, 1, "", "join_asof"], [217, 0, 1, "", "lazy"], [218, 0, 1, "", "limit"], [219, 0, 1, "", "map_rows"], [220, 0, 1, "", "max"], [221, 0, 1, "", "max_horizontal"], [222, 0, 1, "", "mean"], [223, 0, 1, "", "mean_horizontal"], [224, 0, 1, "", "median"], [225, 0, 1, "", "melt"], [226, 0, 1, "", "merge_sorted"], [227, 0, 1, "", "min"], [228, 0, 1, "", "min_horizontal"], [229, 0, 1, "", "n_chunks"], [230, 0, 1, "", "n_unique"], [231, 0, 1, "", "null_count"], [232, 0, 1, "", "partition_by"], [233, 0, 1, "", "pipe"], [234, 0, 1, "", "pivot"], [312, 1, 1, "", "plot"], [235, 0, 1, "", "product"], [236, 0, 1, "", "quantile"], [237, 0, 1, "", "rechunk"], [238, 0, 1, "", "rename"], [239, 0, 1, "", "replace_column"], [240, 0, 1, "", "reverse"], [241, 0, 1, "", "rolling"], [242, 0, 1, "", "row"], [243, 0, 1, "", "rows"], [244, 0, 1, "", "rows_by_key"], [245, 0, 1, "", "sample"], [246, 1, 1, "", "schema"], [247, 0, 1, "", "select"], [248, 0, 1, "", "select_seq"], [249, 0, 1, "", "serialize"], [250, 0, 1, "", "set_sorted"], [251, 1, 1, "", "shape"], [252, 0, 1, "", "shift"], [253, 0, 1, "", "shrink_to_fit"], [254, 0, 1, "", "slice"], [255, 0, 1, "", "sort"], [256, 0, 1, "", "sql"], [257, 0, 1, "", "std"], [313, 1, 1, "", "style"], [258, 0, 1, "", "sum"], [259, 0, 1, "", "sum_horizontal"], [260, 0, 1, "", "tail"], [261, 0, 1, "", "to_arrow"], [262, 0, 1, "", "to_dict"], [263, 0, 1, "", "to_dicts"], [264, 0, 1, "", "to_dummies"], [265, 0, 1, "", "to_init_repr"], [266, 0, 1, "", "to_jax"], [267, 0, 1, "", "to_numpy"], [268, 0, 1, "", "to_pandas"], [269, 0, 1, "", "to_series"], [270, 0, 1, "", "to_struct"], [271, 0, 1, "", "to_torch"], [272, 0, 1, "", "top_k"], [273, 0, 1, "", "transpose"], [274, 0, 1, "", "unique"], [275, 0, 1, "", "unnest"], [276, 0, 1, "", "unpivot"], [277, 0, 1, "", "unstack"], [278, 0, 1, "", "update"], [279, 0, 1, "", "upsample"], [280, 0, 1, "", "var"], [281, 0, 1, "", "vstack"], [282, 1, 1, "", "width"], [283, 0, 1, "", "with_columns"], [284, 0, 1, "", "with_columns_seq"], [285, 0, 1, "", "with_row_count"], [286, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[317, 0, 1, "", "abs"], [318, 0, 1, "", "add"], [319, 0, 1, "", "agg_groups"], [320, 0, 1, "", "alias"], [321, 0, 1, "", "all"], [322, 0, 1, "", "and_"], [323, 0, 1, "", "any"], [324, 0, 1, "", "append"], [325, 0, 1, "", "approx_n_unique"], [326, 0, 1, "", "arccos"], [327, 0, 1, "", "arccosh"], [328, 0, 1, "", "arcsin"], [329, 0, 1, "", "arcsinh"], [330, 0, 1, "", "arctan"], [331, 0, 1, "", "arctanh"], [332, 0, 1, "", "arg_max"], [333, 0, 1, "", "arg_min"], [334, 0, 1, "", "arg_sort"], [335, 0, 1, "", "arg_true"], [336, 0, 1, "", "arg_unique"], [361, 0, 1, "", "backward_fill"], [368, 0, 1, "", "bottom_k"], [369, 0, 1, "", "bottom_k_by"], [370, 0, 1, "", "cast"], [372, 0, 1, "", "cbrt"], [373, 0, 1, "", "ceil"], [374, 0, 1, "", "clip"], [375, 0, 1, "", "cos"], [376, 0, 1, "", "cosh"], [377, 0, 1, "", "cot"], [378, 0, 1, "", "count"], [379, 0, 1, "", "cum_count"], [380, 0, 1, "", "cum_max"], [381, 0, 1, "", "cum_min"], [382, 0, 1, "", "cum_prod"], [383, 0, 1, "", "cum_sum"], [384, 0, 1, "", "cumulative_eval"], [385, 0, 1, "", "cut"], [386, 0, 1, "", "degrees"], [387, 0, 1, "", "deserialize"], [388, 0, 1, "", "diff"], [389, 0, 1, "", "dot"], [390, 0, 1, "", "drop_nans"], [391, 0, 1, "", "drop_nulls"], [436, 0, 1, "", "entropy"], [437, 0, 1, "", "eq"], [438, 0, 1, "", "eq_missing"], [439, 0, 1, "", "ewm_mean"], [440, 0, 1, "", "ewm_mean_by"], [441, 0, 1, "", "ewm_std"], [442, 0, 1, "", "ewm_var"], [443, 0, 1, "", "exclude"], [444, 0, 1, "", "exp"], [445, 0, 1, "", "explode"], [446, 0, 1, "", "extend_constant"], [447, 0, 1, "", "fill_nan"], [448, 0, 1, "", "fill_null"], [449, 0, 1, "", "filter"], [450, 0, 1, "", "first"], [451, 0, 1, "", "flatten"], [452, 0, 1, "", "floor"], [453, 0, 1, "", "floordiv"], [454, 0, 1, "", "forward_fill"], [455, 0, 1, "", "from_json"], [456, 0, 1, "", "gather"], [457, 0, 1, "", "gather_every"], [458, 0, 1, "", "ge"], [459, 0, 1, "", "get"], [460, 0, 1, "", "gt"], [461, 0, 1, "", "has_nulls"], [462, 0, 1, "", "hash"], [463, 0, 1, "", "head"], [464, 0, 1, "", "hist"], [465, 0, 1, "", "implode"], [466, 0, 1, "", "inspect"], [467, 0, 1, "", "interpolate"], [468, 0, 1, "", "interpolate_by"], [469, 0, 1, "", "is_between"], [470, 0, 1, "", "is_duplicated"], [471, 0, 1, "", "is_finite"], [472, 0, 1, "", "is_first_distinct"], [473, 0, 1, "", "is_in"], [474, 0, 1, "", "is_infinite"], [475, 0, 1, "", "is_last_distinct"], [476, 0, 1, "", "is_nan"], [477, 0, 1, "", "is_not_nan"], [478, 0, 1, "", "is_not_null"], [479, 0, 1, "", "is_null"], [480, 0, 1, "", "is_unique"], [481, 0, 1, "", "kurtosis"], [482, 0, 1, "", "last"], [483, 0, 1, "", "le"], [484, 0, 1, "", "len"], [485, 0, 1, "", "limit"], [526, 0, 1, "", "log"], [527, 0, 1, "", "log10"], [528, 0, 1, "", "log1p"], [529, 0, 1, "", "lower_bound"], [530, 0, 1, "", "lt"], [531, 0, 1, "", "map_batches"], [532, 0, 1, "", "map_elements"], [533, 0, 1, "", "max"], [534, 0, 1, "", "mean"], [535, 0, 1, "", "median"], [548, 0, 1, "", "min"], [549, 0, 1, "", "mod"], [550, 0, 1, "", "mode"], [551, 0, 1, "", "mul"], [552, 0, 1, "", "n_unique"], [562, 0, 1, "", "nan_max"], [563, 0, 1, "", "nan_min"], [564, 0, 1, "", "ne"], [565, 0, 1, "", "ne_missing"], [566, 0, 1, "", "neg"], [567, 0, 1, "", "not_"], [568, 0, 1, "", "null_count"], [569, 0, 1, "", "or_"], [570, 0, 1, "", "over"], [571, 0, 1, "", "pct_change"], [572, 0, 1, "", "peak_max"], [573, 0, 1, "", "peak_min"], [574, 0, 1, "", "pipe"], [575, 0, 1, "", "pow"], [576, 0, 1, "", "product"], [577, 0, 1, "", "qcut"], [578, 0, 1, "", "quantile"], [579, 0, 1, "", "radians"], [580, 0, 1, "", "rank"], [581, 0, 1, "", "rechunk"], [582, 0, 1, "", "reinterpret"], [583, 0, 1, "", "repeat_by"], [584, 0, 1, "", "replace"], [585, 0, 1, "", "replace_strict"], [586, 0, 1, "", "reshape"], [587, 0, 1, "", "reverse"], [588, 0, 1, "", "rle"], [589, 0, 1, "", "rle_id"], [590, 0, 1, "", "rolling"], [591, 0, 1, "", "rolling_map"], [592, 0, 1, "", "rolling_max"], [593, 0, 1, "", "rolling_max_by"], [594, 0, 1, "", "rolling_mean"], [595, 0, 1, "", "rolling_mean_by"], [596, 0, 1, "", "rolling_median"], [597, 0, 1, "", "rolling_median_by"], [598, 0, 1, "", "rolling_min"], [599, 0, 1, "", "rolling_min_by"], [600, 0, 1, "", "rolling_quantile"], [601, 0, 1, "", "rolling_quantile_by"], [602, 0, 1, "", "rolling_skew"], [603, 0, 1, "", "rolling_std"], [604, 0, 1, "", "rolling_std_by"], [605, 0, 1, "", "rolling_sum"], [606, 0, 1, "", "rolling_sum_by"], [607, 0, 1, "", "rolling_var"], [608, 0, 1, "", "rolling_var_by"], [609, 0, 1, "", "round"], [610, 0, 1, "", "round_sig_figs"], [611, 0, 1, "", "sample"], [612, 0, 1, "", "search_sorted"], [613, 0, 1, "", "set_sorted"], [614, 0, 1, "", "shift"], [615, 0, 1, "", "shrink_dtype"], [616, 0, 1, "", "shuffle"], [617, 0, 1, "", "sign"], [618, 0, 1, "", "sin"], [619, 0, 1, "", "sinh"], [620, 0, 1, "", "skew"], [621, 0, 1, "", "slice"], [622, 0, 1, "", "sort"], [623, 0, 1, "", "sort_by"], [624, 0, 1, "", "sqrt"], [625, 0, 1, "", "std"], [676, 0, 1, "", "sub"], [677, 0, 1, "", "sum"], [678, 0, 1, "", "tail"], [679, 0, 1, "", "tan"], [680, 0, 1, "", "tanh"], [681, 0, 1, "", "to_physical"], [682, 0, 1, "", "top_k"], [683, 0, 1, "", "top_k_by"], [684, 0, 1, "", "truediv"], [685, 0, 1, "", "unique"], [686, 0, 1, "", "unique_counts"], [687, 0, 1, "", "upper_bound"], [688, 0, 1, "", "value_counts"], [689, 0, 1, "", "var"], [690, 0, 1, "", "where"], [691, 0, 1, "", "xor"]], "polars.Expr.arr": [[337, 0, 1, "", "all"], [338, 0, 1, "", "any"], [339, 0, 1, "", "arg_max"], [340, 0, 1, "", "arg_min"], [341, 0, 1, "", "contains"], [342, 0, 1, "", "count_matches"], [343, 0, 1, "", "explode"], [344, 0, 1, "", "first"], [345, 0, 1, "", "get"], [346, 0, 1, "", "join"], [347, 0, 1, "", "last"], [348, 0, 1, "", "max"], [349, 0, 1, "", "median"], [350, 0, 1, "", "min"], [351, 0, 1, "", "n_unique"], [352, 0, 1, "", "reverse"], [353, 0, 1, "", "shift"], [354, 0, 1, "", "sort"], [355, 0, 1, "", "std"], [356, 0, 1, "", "sum"], [357, 0, 1, "", "to_list"], [358, 0, 1, "", "to_struct"], [359, 0, 1, "", "unique"], [360, 0, 1, "", "var"]], "polars.Expr.bin": [[362, 0, 1, "", "contains"], [363, 0, 1, "", "decode"], [364, 0, 1, "", "encode"], [365, 0, 1, "", "ends_with"], [366, 0, 1, "", "size"], [367, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[371, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[392, 0, 1, "", "add_business_days"], [393, 0, 1, "", "base_utc_offset"], [394, 0, 1, "", "cast_time_unit"], [395, 0, 1, "", "century"], [396, 0, 1, "", "combine"], [397, 0, 1, "", "convert_time_zone"], [398, 0, 1, "", "date"], [399, 0, 1, "", "datetime"], [400, 0, 1, "", "day"], [401, 0, 1, "", "dst_offset"], [402, 0, 1, "", "epoch"], [403, 0, 1, "", "hour"], [404, 0, 1, "", "is_leap_year"], [405, 0, 1, "", "iso_year"], [406, 0, 1, "", "microsecond"], [407, 0, 1, "", "millennium"], [408, 0, 1, "", "millisecond"], [409, 0, 1, "", "minute"], [410, 0, 1, "", "month"], [411, 0, 1, "", "month_end"], [412, 0, 1, "", "month_start"], [413, 0, 1, "", "nanosecond"], [414, 0, 1, "", "offset_by"], [415, 0, 1, "", "ordinal_day"], [416, 0, 1, "", "quarter"], [417, 0, 1, "", "replace_time_zone"], [418, 0, 1, "", "round"], [419, 0, 1, "", "second"], [420, 0, 1, "", "strftime"], [421, 0, 1, "", "time"], [422, 0, 1, "", "timestamp"], [423, 0, 1, "", "to_string"], [424, 0, 1, "", "total_days"], [425, 0, 1, "", "total_hours"], [426, 0, 1, "", "total_microseconds"], [427, 0, 1, "", "total_milliseconds"], [428, 0, 1, "", "total_minutes"], [429, 0, 1, "", "total_nanoseconds"], [430, 0, 1, "", "total_seconds"], [431, 0, 1, "", "truncate"], [432, 0, 1, "", "week"], [433, 0, 1, "", "weekday"], [434, 0, 1, "", "with_time_unit"], [435, 0, 1, "", "year"]], "polars.Expr.list": [[486, 0, 1, "", "all"], [487, 0, 1, "", "any"], [488, 0, 1, "", "arg_max"], [489, 0, 1, "", "arg_min"], [490, 0, 1, "", "concat"], [491, 0, 1, "", "contains"], [492, 0, 1, "", "count_matches"], [493, 0, 1, "", "diff"], [494, 0, 1, "", "drop_nulls"], [495, 0, 1, "", "eval"], [496, 0, 1, "", "explode"], [497, 0, 1, "", "first"], [498, 0, 1, "", "gather"], [499, 0, 1, "", "gather_every"], [500, 0, 1, "", "get"], [501, 0, 1, "", "head"], [502, 0, 1, "", "join"], [503, 0, 1, "", "last"], [504, 0, 1, "", "len"], [505, 0, 1, "", "max"], [506, 0, 1, "", "mean"], [507, 0, 1, "", "median"], [508, 0, 1, "", "min"], [509, 0, 1, "", "n_unique"], [510, 0, 1, "", "reverse"], [511, 0, 1, "", "sample"], [512, 0, 1, "", "set_difference"], [513, 0, 1, "", "set_intersection"], [514, 0, 1, "", "set_symmetric_difference"], [515, 0, 1, "", "set_union"], [516, 0, 1, "", "shift"], [517, 0, 1, "", "slice"], [518, 0, 1, "", "sort"], [519, 0, 1, "", "std"], [520, 0, 1, "", "sum"], [521, 0, 1, "", "tail"], [522, 0, 1, "", "to_array"], [523, 0, 1, "", "to_struct"], [524, 0, 1, "", "unique"], [525, 0, 1, "", "var"]], "polars.Expr.meta": [[536, 0, 1, "", "eq"], [537, 0, 1, "", "has_multiple_outputs"], [538, 0, 1, "", "is_column_selection"], [539, 0, 1, "", "is_regex_projection"], [540, 0, 1, "", "ne"], [541, 0, 1, "", "output_name"], [542, 0, 1, "", "pop"], [543, 0, 1, "", "root_names"], [544, 0, 1, "", "serialize"], [545, 0, 1, "", "tree_format"], [546, 0, 1, "", "undo_aliases"], [547, 0, 1, "", "write_json"]], "polars.Expr.name": [[553, 0, 1, "", "keep"], [554, 0, 1, "", "map"], [555, 0, 1, "", "map_fields"], [556, 0, 1, "", "prefix"], [557, 0, 1, "", "prefix_fields"], [558, 0, 1, "", "suffix"], [559, 0, 1, "", "suffix_fields"], [560, 0, 1, "", "to_lowercase"], [561, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[626, 0, 1, "", "concat"], [627, 0, 1, "", "contains"], [628, 0, 1, "", "contains_any"], [629, 0, 1, "", "count_matches"], [630, 0, 1, "", "decode"], [631, 0, 1, "", "encode"], [632, 0, 1, "", "ends_with"], [633, 0, 1, "", "explode"], [634, 0, 1, "", "extract"], [635, 0, 1, "", "extract_all"], [636, 0, 1, "", "extract_groups"], [637, 0, 1, "", "extract_many"], [638, 0, 1, "", "find"], [639, 0, 1, "", "head"], [640, 0, 1, "", "join"], [641, 0, 1, "", "json_decode"], [642, 0, 1, "", "json_path_match"], [643, 0, 1, "", "len_bytes"], [644, 0, 1, "", "len_chars"], [645, 0, 1, "", "pad_end"], [646, 0, 1, "", "pad_start"], [647, 0, 1, "", "replace"], [648, 0, 1, "", "replace_all"], [649, 0, 1, "", "replace_many"], [650, 0, 1, "", "reverse"], [651, 0, 1, "", "slice"], [652, 0, 1, "", "split"], [653, 0, 1, "", "split_exact"], [654, 0, 1, "", "splitn"], [655, 0, 1, "", "starts_with"], [656, 0, 1, "", "strip_chars"], [657, 0, 1, "", "strip_chars_end"], [658, 0, 1, "", "strip_chars_start"], [659, 0, 1, "", "strip_prefix"], [660, 0, 1, "", "strip_suffix"], [661, 0, 1, "", "strptime"], [662, 0, 1, "", "tail"], [663, 0, 1, "", "to_date"], [664, 0, 1, "", "to_datetime"], [665, 0, 1, "", "to_decimal"], [666, 0, 1, "", "to_integer"], [667, 0, 1, "", "to_lowercase"], [668, 0, 1, "", "to_time"], [669, 0, 1, "", "to_titlecase"], [670, 0, 1, "", "to_uppercase"], [671, 0, 1, "", "zfill"]], "polars.Expr.struct": [[672, 0, 1, "", "field"], [673, 0, 1, "", "json_encode"], [674, 0, 1, "", "rename_fields"], [675, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[789, 0, 1, "", "approx_n_unique"], [790, 0, 1, "", "bottom_k"], [791, 0, 1, "", "cache"], [792, 0, 1, "", "cast"], [793, 0, 1, "", "clear"], [794, 0, 1, "", "clone"], [795, 0, 1, "", "collect"], [796, 0, 1, "", "collect_async"], [797, 0, 1, "", "collect_schema"], [798, 1, 1, "", "columns"], [799, 0, 1, "", "count"], [800, 0, 1, "", "describe"], [801, 0, 1, "", "deserialize"], [802, 0, 1, "", "drop"], [803, 0, 1, "", "drop_nulls"], [804, 1, 1, "", "dtypes"], [805, 0, 1, "", "explain"], [806, 0, 1, "", "explode"], [807, 0, 1, "", "fill_nan"], [808, 0, 1, "", "fill_null"], [809, 0, 1, "", "filter"], [810, 0, 1, "", "first"], [811, 0, 1, "", "gather_every"], [812, 0, 1, "", "group_by"], [813, 0, 1, "", "group_by_dynamic"], [814, 0, 1, "", "head"], [815, 0, 1, "", "inspect"], [816, 0, 1, "", "interpolate"], [817, 0, 1, "", "join"], [818, 0, 1, "", "join_asof"], [819, 0, 1, "", "last"], [820, 0, 1, "", "lazy"], [821, 0, 1, "", "limit"], [822, 0, 1, "", "map_batches"], [823, 0, 1, "", "max"], [824, 0, 1, "", "mean"], [825, 0, 1, "", "median"], [826, 0, 1, "", "melt"], [827, 0, 1, "", "merge_sorted"], [828, 0, 1, "", "min"], [829, 0, 1, "", "null_count"], [830, 0, 1, "", "pipe"], [831, 0, 1, "", "profile"], [832, 0, 1, "", "quantile"], [833, 0, 1, "", "rename"], [834, 0, 1, "", "reverse"], [835, 0, 1, "", "rolling"], [836, 1, 1, "", "schema"], [837, 0, 1, "", "select"], [838, 0, 1, "", "select_seq"], [839, 0, 1, "", "serialize"], [840, 0, 1, "", "set_sorted"], [841, 0, 1, "", "shift"], [842, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [843, 0, 1, "", "slice"], [844, 0, 1, "", "sort"], [845, 0, 1, "", "sql"], [846, 0, 1, "", "std"], [847, 0, 1, "", "sum"], [848, 0, 1, "", "tail"], [849, 0, 1, "", "top_k"], [850, 0, 1, "", "unique"], [851, 0, 1, "", "unnest"], [852, 0, 1, "", "unpivot"], [853, 0, 1, "", "update"], [854, 0, 1, "", "var"], [855, 1, 1, "", "width"], [856, 0, 1, "", "with_columns"], [857, 0, 1, "", "with_columns_seq"], [858, 0, 1, "", "with_context"], [859, 0, 1, "", "with_row_count"], [860, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1270, 0, 1, "", "__enter__"], [1270, 0, 1, "", "__exit__"], [1270, 0, 1, "", "__init__"], [1252, 0, 1, "", "execute"], [1253, 0, 1, "", "execute_global"], [1254, 0, 1, "", "register"], [1255, 0, 1, "", "register_globals"], [1256, 0, 1, "", "register_many"], [1257, 0, 1, "", "tables"], [1258, 0, 1, "", "unregister"]], "polars.Series": [[892, 0, 1, "", "abs"], [893, 0, 1, "", "alias"], [894, 0, 1, "", "all"], [895, 0, 1, "", "any"], [896, 0, 1, "", "append"], [897, 0, 1, "", "arccos"], [898, 0, 1, "", "arccosh"], [899, 0, 1, "", "arcsin"], [900, 0, 1, "", "arcsinh"], [901, 0, 1, "", "arctan"], [902, 0, 1, "", "arctanh"], [903, 0, 1, "", "arg_max"], [904, 0, 1, "", "arg_min"], [905, 0, 1, "", "arg_sort"], [906, 0, 1, "", "arg_true"], [907, 0, 1, "", "arg_unique"], [938, 0, 1, "", "bottom_k"], [939, 0, 1, "", "cast"], [944, 0, 1, "", "cbrt"], [945, 0, 1, "", "ceil"], [946, 0, 1, "", "chunk_lengths"], [947, 0, 1, "", "clear"], [948, 0, 1, "", "clip"], [949, 0, 1, "", "clone"], [950, 0, 1, "", "cos"], [951, 0, 1, "", "cosh"], [952, 0, 1, "", "cot"], [953, 0, 1, "", "cum_count"], [954, 0, 1, "", "cum_max"], [955, 0, 1, "", "cum_min"], [956, 0, 1, "", "cum_prod"], [957, 0, 1, "", "cum_sum"], [958, 0, 1, "", "cumulative_eval"], [959, 0, 1, "", "cut"], [960, 0, 1, "", "describe"], [961, 0, 1, "", "diff"], [962, 0, 1, "", "dot"], [963, 0, 1, "", "drop_nans"], [964, 0, 1, "", "drop_nulls"], [1013, 1, 1, "", "dtype"], [1014, 0, 1, "", "entropy"], [1015, 0, 1, "", "equals"], [1016, 0, 1, "", "estimated_size"], [1017, 0, 1, "", "ewm_mean"], [1018, 0, 1, "", "ewm_mean_by"], [1019, 0, 1, "", "ewm_std"], [1020, 0, 1, "", "ewm_var"], [1021, 0, 1, "", "exp"], [1022, 0, 1, "", "explode"], [1023, 0, 1, "", "extend"], [1024, 0, 1, "", "extend_constant"], [1025, 0, 1, "", "fill_nan"], [1026, 0, 1, "", "fill_null"], [1027, 0, 1, "", "filter"], [1028, 1, 1, "", "flags"], [1029, 0, 1, "", "floor"], [1030, 0, 1, "", "gather"], [1031, 0, 1, "", "gather_every"], [1032, 0, 1, "", "get_chunks"], [1033, 0, 1, "", "has_nulls"], [1034, 0, 1, "", "has_validity"], [1035, 0, 1, "", "hash"], [1036, 0, 1, "", "head"], [1037, 0, 1, "", "hist"], [1038, 0, 1, "", "implode"], [1039, 0, 1, "", "interpolate"], [1040, 0, 1, "", "interpolate_by"], [1041, 0, 1, "", "is_between"], [1042, 0, 1, "", "is_duplicated"], [1043, 0, 1, "", "is_empty"], [1044, 0, 1, "", "is_finite"], [1045, 0, 1, "", "is_first_distinct"], [1046, 0, 1, "", "is_in"], [1047, 0, 1, "", "is_infinite"], [1048, 0, 1, "", "is_last_distinct"], [1049, 0, 1, "", "is_nan"], [1050, 0, 1, "", "is_not_nan"], [1051, 0, 1, "", "is_not_null"], [1052, 0, 1, "", "is_null"], [1053, 0, 1, "", "is_sorted"], [1054, 0, 1, "", "is_unique"], [1055, 0, 1, "", "item"], [1056, 0, 1, "", "kurtosis"], [1057, 0, 1, "", "len"], [1058, 0, 1, "", "limit"], [1099, 0, 1, "", "log"], [1100, 0, 1, "", "log10"], [1101, 0, 1, "", "log1p"], [1102, 0, 1, "", "lower_bound"], [1103, 0, 1, "", "map_elements"], [1104, 0, 1, "", "max"], [1105, 0, 1, "", "mean"], [1106, 0, 1, "", "median"], [1107, 0, 1, "", "min"], [1108, 0, 1, "", "mode"], [1109, 0, 1, "", "n_chunks"], [1110, 0, 1, "", "n_unique"], [1111, 1, 1, "", "name"], [1112, 0, 1, "", "nan_max"], [1113, 0, 1, "", "nan_min"], [1114, 0, 1, "", "new_from_index"], [1115, 0, 1, "", "not_"], [1116, 0, 1, "", "null_count"], [1117, 0, 1, "", "pct_change"], [1118, 0, 1, "", "peak_max"], [1119, 0, 1, "", "peak_min"], [1248, 1, 1, "", "plot"], [1120, 0, 1, "", "product"], [1121, 0, 1, "", "qcut"], [1122, 0, 1, "", "quantile"], [1123, 0, 1, "", "rank"], [1124, 0, 1, "", "rechunk"], [1125, 0, 1, "", "reinterpret"], [1126, 0, 1, "", "rename"], [1127, 0, 1, "", "replace"], [1128, 0, 1, "", "replace_strict"], [1129, 0, 1, "", "reshape"], [1130, 0, 1, "", "reverse"], [1131, 0, 1, "", "rle"], [1132, 0, 1, "", "rle_id"], [1133, 0, 1, "", "rolling_map"], [1134, 0, 1, "", "rolling_max"], [1135, 0, 1, "", "rolling_mean"], [1136, 0, 1, "", "rolling_median"], [1137, 0, 1, "", "rolling_min"], [1138, 0, 1, "", "rolling_quantile"], [1139, 0, 1, "", "rolling_skew"], [1140, 0, 1, "", "rolling_std"], [1141, 0, 1, "", "rolling_sum"], [1142, 0, 1, "", "rolling_var"], [1143, 0, 1, "", "round"], [1144, 0, 1, "", "round_sig_figs"], [1145, 0, 1, "", "sample"], [1146, 0, 1, "", "scatter"], [1147, 0, 1, "", "search_sorted"], [1148, 0, 1, "", "set"], [1149, 0, 1, "", "set_sorted"], [1150, 1, 1, "", "shape"], [1151, 0, 1, "", "shift"], [1152, 0, 1, "", "shrink_dtype"], [1153, 0, 1, "", "shrink_to_fit"], [1154, 0, 1, "", "shuffle"], [1155, 0, 1, "", "sign"], [1156, 0, 1, "", "sin"], [1157, 0, 1, "", "sinh"], [1158, 0, 1, "", "skew"], [1159, 0, 1, "", "slice"], [1160, 0, 1, "", "sort"], [1161, 0, 1, "", "sqrt"], [1162, 0, 1, "", "std"], [1215, 0, 1, "", "sum"], [1216, 0, 1, "", "tail"], [1217, 0, 1, "", "tan"], [1218, 0, 1, "", "tanh"], [1219, 0, 1, "", "to_arrow"], [1220, 0, 1, "", "to_dummies"], [1221, 0, 1, "", "to_frame"], [1222, 0, 1, "", "to_init_repr"], [1223, 0, 1, "", "to_jax"], [1224, 0, 1, "", "to_list"], [1225, 0, 1, "", "to_numpy"], [1226, 0, 1, "", "to_pandas"], [1227, 0, 1, "", "to_physical"], [1228, 0, 1, "", "to_torch"], [1229, 0, 1, "", "top_k"], [1230, 0, 1, "", "unique"], [1231, 0, 1, "", "unique_counts"], [1232, 0, 1, "", "upper_bound"], [1233, 0, 1, "", "value_counts"], [1234, 0, 1, "", "var"], [1235, 0, 1, "", "zip_with"]], "polars.Series.arr": [[908, 0, 1, "", "all"], [909, 0, 1, "", "any"], [910, 0, 1, "", "arg_max"], [911, 0, 1, "", "arg_min"], [912, 0, 1, "", "contains"], [913, 0, 1, "", "count_matches"], [914, 0, 1, "", "explode"], [915, 0, 1, "", "first"], [916, 0, 1, "", "get"], [917, 0, 1, "", "join"], [918, 0, 1, "", "last"], [919, 0, 1, "", "max"], [920, 0, 1, "", "median"], [921, 0, 1, "", "min"], [922, 0, 1, "", "n_unique"], [923, 0, 1, "", "reverse"], [924, 0, 1, "", "shift"], [925, 0, 1, "", "sort"], [926, 0, 1, "", "std"], [927, 0, 1, "", "sum"], [928, 0, 1, "", "to_list"], [929, 0, 1, "", "to_struct"], [930, 0, 1, "", "unique"], [931, 0, 1, "", "var"]], "polars.Series.bin": [[932, 0, 1, "", "contains"], [933, 0, 1, "", "decode"], [934, 0, 1, "", "encode"], [935, 0, 1, "", "ends_with"], [936, 0, 1, "", "size"], [937, 0, 1, "", "starts_with"]], "polars.Series.cat": [[940, 0, 1, "", "get_categories"], [941, 0, 1, "", "is_local"], [942, 0, 1, "", "to_local"], [943, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[965, 0, 1, "", "add_business_days"], [966, 0, 1, "", "base_utc_offset"], [967, 0, 1, "", "cast_time_unit"], [968, 0, 1, "", "century"], [969, 0, 1, "", "combine"], [970, 0, 1, "", "convert_time_zone"], [971, 0, 1, "", "date"], [972, 0, 1, "", "datetime"], [973, 0, 1, "", "day"], [974, 0, 1, "", "dst_offset"], [975, 0, 1, "", "epoch"], [976, 0, 1, "", "hour"], [977, 0, 1, "", "is_leap_year"], [978, 0, 1, "", "iso_year"], [979, 0, 1, "", "max"], [980, 0, 1, "", "mean"], [981, 0, 1, "", "median"], [982, 0, 1, "", "microsecond"], [983, 0, 1, "", "millennium"], [984, 0, 1, "", "millisecond"], [985, 0, 1, "", "min"], [986, 0, 1, "", "minute"], [987, 0, 1, "", "month"], [988, 0, 1, "", "month_end"], [989, 0, 1, "", "month_start"], [990, 0, 1, "", "nanosecond"], [991, 0, 1, "", "offset_by"], [992, 0, 1, "", "ordinal_day"], [993, 0, 1, "", "quarter"], [994, 0, 1, "", "replace_time_zone"], [995, 0, 1, "", "round"], [996, 0, 1, "", "second"], [997, 0, 1, "", "strftime"], [998, 0, 1, "", "time"], [999, 0, 1, "", "timestamp"], [1000, 0, 1, "", "to_string"], [1001, 0, 1, "", "total_days"], [1002, 0, 1, "", "total_hours"], [1003, 0, 1, "", "total_microseconds"], [1004, 0, 1, "", "total_milliseconds"], [1005, 0, 1, "", "total_minutes"], [1006, 0, 1, "", "total_nanoseconds"], [1007, 0, 1, "", "total_seconds"], [1008, 0, 1, "", "truncate"], [1009, 0, 1, "", "week"], [1010, 0, 1, "", "weekday"], [1011, 0, 1, "", "with_time_unit"], [1012, 0, 1, "", "year"]], "polars.Series.list": [[1059, 0, 1, "", "all"], [1060, 0, 1, "", "any"], [1061, 0, 1, "", "arg_max"], [1062, 0, 1, "", "arg_min"], [1063, 0, 1, "", "concat"], [1064, 0, 1, "", "contains"], [1065, 0, 1, "", "count_matches"], [1066, 0, 1, "", "diff"], [1067, 0, 1, "", "drop_nulls"], [1068, 0, 1, "", "eval"], [1069, 0, 1, "", "explode"], [1070, 0, 1, "", "first"], [1071, 0, 1, "", "gather"], [1072, 0, 1, "", "gather_every"], [1073, 0, 1, "", "get"], [1074, 0, 1, "", "head"], [1075, 0, 1, "", "join"], [1076, 0, 1, "", "last"], [1077, 0, 1, "", "len"], [1078, 0, 1, "", "max"], [1079, 0, 1, "", "mean"], [1080, 0, 1, "", "median"], [1081, 0, 1, "", "min"], [1082, 0, 1, "", "n_unique"], [1083, 0, 1, "", "reverse"], [1084, 0, 1, "", "sample"], [1085, 0, 1, "", "set_difference"], [1086, 0, 1, "", "set_intersection"], [1087, 0, 1, "", "set_symmetric_difference"], [1088, 0, 1, "", "set_union"], [1089, 0, 1, "", "shift"], [1090, 0, 1, "", "slice"], [1091, 0, 1, "", "sort"], [1092, 0, 1, "", "std"], [1093, 0, 1, "", "sum"], [1094, 0, 1, "", "tail"], [1095, 0, 1, "", "to_array"], [1096, 0, 1, "", "to_struct"], [1097, 0, 1, "", "unique"], [1098, 0, 1, "", "var"]], "polars.Series.str": [[1163, 0, 1, "", "concat"], [1164, 0, 1, "", "contains"], [1165, 0, 1, "", "contains_any"], [1166, 0, 1, "", "count_matches"], [1167, 0, 1, "", "decode"], [1168, 0, 1, "", "encode"], [1169, 0, 1, "", "ends_with"], [1170, 0, 1, "", "explode"], [1171, 0, 1, "", "extract"], [1172, 0, 1, "", "extract_all"], [1173, 0, 1, "", "extract_groups"], [1174, 0, 1, "", "extract_many"], [1175, 0, 1, "", "find"], [1176, 0, 1, "", "head"], [1177, 0, 1, "", "join"], [1178, 0, 1, "", "json_decode"], [1179, 0, 1, "", "json_path_match"], [1180, 0, 1, "", "len_bytes"], [1181, 0, 1, "", "len_chars"], [1182, 0, 1, "", "pad_end"], [1183, 0, 1, "", "pad_start"], [1184, 0, 1, "", "replace"], [1185, 0, 1, "", "replace_all"], [1186, 0, 1, "", "replace_many"], [1187, 0, 1, "", "reverse"], [1188, 0, 1, "", "slice"], [1189, 0, 1, "", "split"], [1190, 0, 1, "", "split_exact"], [1191, 0, 1, "", "splitn"], [1192, 0, 1, "", "starts_with"], [1193, 0, 1, "", "strip_chars"], [1194, 0, 1, "", "strip_chars_end"], [1195, 0, 1, "", "strip_chars_start"], [1196, 0, 1, "", "strip_prefix"], [1197, 0, 1, "", "strip_suffix"], [1198, 0, 1, "", "strptime"], [1199, 0, 1, "", "tail"], [1200, 0, 1, "", "to_date"], [1201, 0, 1, "", "to_datetime"], [1202, 0, 1, "", "to_decimal"], [1203, 0, 1, "", "to_integer"], [1204, 0, 1, "", "to_lowercase"], [1205, 0, 1, "", "to_time"], [1206, 0, 1, "", "to_titlecase"], [1207, 0, 1, "", "to_uppercase"], [1208, 0, 1, "", "zfill"]], "polars.Series.struct": [[1209, 0, 1, "", "field"], [1210, 3, 1, "", "fields"], [1211, 0, 1, "", "json_encode"], [1212, 0, 1, "", "rename_fields"], [1213, 3, 1, "", "schema"], [1214, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[287, 0, 1, "", "__iter__"], [288, 0, 1, "", "agg"], [289, 0, 1, "", "all"], [290, 0, 1, "", "count"], [291, 0, 1, "", "first"], [292, 0, 1, "", "head"], [293, 0, 1, "", "last"], [294, 0, 1, "", "len"], [295, 0, 1, "", "map_groups"], [296, 0, 1, "", "max"], [297, 0, 1, "", "mean"], [298, 0, 1, "", "median"], [299, 0, 1, "", "min"], [300, 0, 1, "", "n_unique"], [301, 0, 1, "", "quantile"], [302, 0, 1, "", "sum"], [303, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "CategoricalRemappingWarning"], [87, 5, 1, "", "ChronoFormatWarning"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "CustomUFuncWarning"], [91, 5, 1, "", "DataOrientationWarning"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "MapWithoutReturnDtypeWarning"], [95, 5, 1, "", "ModuleUpgradeRequiredError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "OutOfBoundsError"], [99, 5, 1, "", "PanicException"], [100, 5, 1, "", "ParameterCollisionError"], [101, 5, 1, "", "PerformanceWarning"], [102, 5, 1, "", "PolarsError"], [103, 5, 1, "", "PolarsInefficientMapWarning"], [104, 5, 1, "", "PolarsWarning"], [105, 5, 1, "", "RowsError"], [106, 5, 1, "", "SQLInterfaceError"], [107, 5, 1, "", "SQLSyntaxError"], [108, 5, 1, "", "SchemaError"], [109, 5, 1, "", "SchemaFieldNotFoundError"], [110, 5, 1, "", "ShapeError"], [111, 5, 1, "", "StringCacheMismatchError"], [112, 5, 1, "", "StructFieldNotFoundError"], [113, 5, 1, "", "TooManyRowsReturnedError"], [114, 5, 1, "", "UnstableWarning"], [115, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[125, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[861, 0, 1, "", "agg"], [862, 0, 1, "", "all"], [863, 0, 1, "", "count"], [864, 0, 1, "", "first"], [865, 0, 1, "", "head"], [866, 0, 1, "", "last"], [867, 0, 1, "", "len"], [868, 0, 1, "", "map_groups"], [869, 0, 1, "", "max"], [870, 0, 1, "", "mean"], [871, 0, 1, "", "median"], [872, 0, 1, "", "min"], [873, 0, 1, "", "n_unique"], [874, 0, 1, "", "quantile"], [875, 0, 1, "", "sum"], [876, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[877, 0, 1, "", "cancel"], [878, 0, 1, "", "fetch"], [879, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[888, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[890, 4, 1, "", "all"], [890, 4, 1, "", "alpha"], [890, 4, 1, "", "alphanumeric"], [890, 4, 1, "", "binary"], [890, 4, 1, "", "boolean"], [890, 4, 1, "", "by_dtype"], [890, 4, 1, "", "by_index"], [890, 4, 1, "", "by_name"], [890, 4, 1, "", "categorical"], [890, 4, 1, "", "contains"], [890, 4, 1, "", "date"], [890, 4, 1, "", "datetime"], [890, 4, 1, "", "decimal"], [890, 4, 1, "", "digit"], [890, 4, 1, "", "duration"], [890, 4, 1, "", "ends_with"], [890, 4, 1, "", "exclude"], [890, 4, 1, "", "expand_selector"], [890, 4, 1, "", "first"], [890, 4, 1, "", "float"], [890, 4, 1, "", "integer"], [890, 4, 1, "", "is_selector"], [890, 4, 1, "", "last"], [890, 4, 1, "", "matches"], [890, 4, 1, "", "numeric"], [890, 4, 1, "", "signed_integer"], [890, 4, 1, "", "starts_with"], [890, 4, 1, "", "string"], [890, 4, 1, "", "temporal"], [890, 4, 1, "", "time"], [890, 4, 1, "", "unsigned_integer"]], "polars.testing": [[152, 4, 1, "", "assert_frame_equal"], [153, 4, 1, "", "assert_frame_not_equal"], [154, 4, 1, "", "assert_series_equal"], [155, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[156, 2, 1, "", "column"], [157, 4, 1, "", "columns"], [158, 4, 1, "", "create_list_strategy"], [159, 4, 1, "", "dataframes"], [160, 4, 1, "", "dtypes"], [161, 4, 1, "", "lists"], [162, 4, 1, "", "load_profile"], [163, 4, 1, "", "series"], [164, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[156, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 87, 93, 116, 123, 129, 130, 131, 132, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 163, 172, 173, 184, 187, 192, 195, 200, 201, 206, 212, 215, 216, 225, 232, 234, 239, 241, 244, 247, 248, 255, 264, 267, 272, 274, 275, 276, 277, 278, 283, 284, 309, 346, 369, 370, 397, 402, 420, 423, 443, 449, 453, 481, 502, 531, 532, 542, 550, 562, 563, 570, 571, 582, 589, 623, 627, 634, 635, 636, 638, 639, 647, 648, 651, 652, 654, 661, 662, 663, 664, 668, 669, 672, 674, 675, 683, 692, 693, 694, 695, 700, 706, 709, 712, 713, 722, 723, 725, 726, 732, 735, 736, 737, 738, 740, 742, 743, 745, 752, 754, 756, 757, 758, 764, 770, 774, 790, 792, 803, 812, 813, 818, 826, 837, 838, 844, 849, 850, 851, 852, 853, 856, 857, 868, 884, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 973, 974, 975, 977, 979, 980, 981, 983, 984, 985, 988, 989, 992, 995, 996, 997, 1000, 1008, 1010, 1011, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1244, 1248, 1252, 1256, 1259, 1265, 1266], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 117, 126, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 151, 156, 157, 158, 159, 160, 161, 163, 166, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 190, 191, 192, 194, 195, 198, 199, 200, 201, 202, 206, 207, 211, 213, 214, 215, 217, 219, 221, 222, 223, 224, 225, 228, 229, 230, 231, 234, 235, 236, 239, 241, 243, 244, 245, 246, 247, 254, 255, 256, 257, 259, 264, 265, 266, 267, 268, 269, 271, 273, 277, 279, 280, 283, 285, 286, 288, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 309, 313, 317, 319, 320, 322, 326, 327, 328, 329, 330, 331, 334, 335, 336, 339, 340, 342, 345, 355, 358, 360, 366, 370, 372, 373, 375, 376, 377, 384, 385, 386, 390, 391, 392, 398, 399, 403, 406, 408, 409, 413, 419, 421, 426, 427, 429, 430, 434, 437, 438, 439, 440, 441, 442, 444, 446, 447, 448, 449, 452, 453, 455, 457, 458, 460, 462, 464, 467, 468, 471, 474, 476, 477, 478, 479, 481, 483, 488, 489, 492, 495, 498, 499, 500, 506, 507, 519, 523, 525, 526, 527, 528, 530, 531, 533, 534, 535, 538, 542, 547, 548, 549, 551, 553, 562, 563, 564, 565, 566, 568, 569, 571, 574, 575, 577, 578, 579, 580, 584, 585, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 617, 618, 619, 620, 624, 625, 626, 629, 633, 634, 635, 638, 675, 676, 677, 679, 680, 681, 684, 689, 690, 692, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 710, 717, 721, 724, 730, 731, 733, 736, 739, 740, 741, 745, 747, 748, 753, 760, 761, 762, 763, 764, 765, 770, 774, 789, 792, 793, 794, 797, 799, 800, 802, 804, 805, 807, 808, 809, 811, 812, 813, 816, 817, 820, 822, 825, 826, 829, 831, 832, 836, 837, 842, 844, 845, 846, 854, 856, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 884, 890, 897, 898, 899, 900, 901, 902, 903, 905, 907, 910, 916, 926, 929, 931, 936, 939, 942, 944, 945, 947, 950, 951, 952, 958, 959, 960, 962, 963, 964, 965, 972, 976, 980, 981, 982, 984, 986, 990, 996, 1003, 1004, 1006, 1007, 1011, 1014, 1017, 1018, 1019, 1020, 1025, 1029, 1031, 1034, 1035, 1037, 1039, 1040, 1044, 1047, 1049, 1050, 1051, 1052, 1055, 1056, 1061, 1062, 1065, 1068, 1071, 1072, 1073, 1079, 1080, 1092, 1096, 1098, 1099, 1100, 1101, 1102, 1105, 1106, 1112, 1113, 1117, 1121, 1122, 1123, 1127, 1128, 1132, 1133, 1135, 1136, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1147, 1155, 1156, 1157, 1158, 1161, 1162, 1163, 1166, 1170, 1171, 1172, 1175, 1179, 1217, 1218, 1220, 1223, 1225, 1226, 1227, 1228, 1232, 1234, 1244, 1252, 1258, 1260, 1261, 1264, 1265, 1267, 1268, 1270, 1272, 1273], "00": [27, 36, 62, 173, 180, 201, 279, 309, 393, 394, 397, 401, 411, 412, 414, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 593, 595, 597, 599, 601, 604, 606, 608, 661, 664, 668, 717, 718, 719, 720, 760, 761, 762, 774, 792, 800, 813, 818, 884, 890, 966, 967, 970, 971, 972, 974, 975, 976, 981, 982, 986, 988, 989, 990, 991, 994, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1198, 1201, 1205, 1265], "000": [9, 10, 27, 36, 309, 1273], "0000": [271, 309, 1228, 1244, 1273], "000000": [363, 364, 630, 933, 934, 1167], "00000001": [11, 691, 774], "00000010": [691, 774], "00000011": [691, 774], "00000100": [691, 774], "00001000": [691, 774], "00001010": [691, 774], "00001011": [691, 774], "0000e": 11, "0000ff": [363, 364, 630, 933, 934, 1167], "0005": 890, "00050": 890, "001": [49, 671, 720, 1003, 1004, 1006, 1208], "002": [720, 1003, 1004, 1006], "005": [1014, 1244], "00prefix": 890, "00z": [661, 664, 1198, 1201], "01": [28, 47, 61, 62, 159, 173, 180, 199, 201, 216, 241, 279, 309, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 661, 663, 664, 668, 702, 714, 715, 716, 717, 718, 719, 720, 774, 792, 800, 813, 835, 884, 890, 965, 967, 969, 970, 971, 972, 975, 976, 981, 982, 986, 988, 989, 990, 991, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1198, 1200, 1201, 1205, 1265, 1268], "010": [9, 666, 1203], "01000": 28, "01000010": [691, 774], "01000110": [691, 774], "012": [610, 774, 1144, 1244], "0123": [671, 1208], "01234": [610, 774, 1144, 1244], "015625": 1244, "02": [47, 173, 180, 199, 201, 241, 279, 309, 392, 394, 396, 402, 411, 412, 414, 417, 422, 425, 428, 430, 434, 590, 593, 595, 597, 599, 601, 604, 606, 608, 609, 661, 663, 664, 668, 702, 714, 715, 716, 717, 718, 719, 720, 774, 792, 800, 813, 835, 884, 890, 929, 967, 969, 971, 972, 975, 976, 981, 982, 986, 988, 989, 990, 994, 995, 998, 999, 1002, 1005, 1007, 1008, 1096, 1198, 1200, 1201, 1205, 1265, 1266], "03": [47, 123, 129, 173, 201, 216, 241, 279, 309, 394, 396, 397, 402, 411, 412, 414, 417, 418, 420, 422, 423, 424, 425, 428, 430, 431, 434, 440, 453, 590, 593, 595, 597, 599, 601, 604, 606, 608, 663, 668, 714, 715, 716, 717, 718, 719, 720, 774, 792, 813, 835, 884, 890, 967, 969, 970, 975, 976, 981, 982, 988, 989, 990, 994, 995, 997, 999, 1000, 1001, 1002, 1005, 1007, 1200, 1205], "037037": 1244, "04": [149, 173, 180, 201, 279, 309, 396, 397, 411, 412, 417, 418, 420, 423, 424, 425, 428, 430, 434, 593, 595, 597, 599, 601, 604, 606, 608, 661, 702, 714, 717, 718, 720, 774, 792, 800, 813, 884, 890, 970, 982, 986, 988, 989, 990, 994, 997, 1000, 1001, 1002, 1005, 1007, 1011, 1198, 1265], "047198": 1267, "05": [16, 149, 152, 153, 154, 155, 159, 173, 180, 279, 309, 392, 395, 396, 397, 398, 399, 403, 406, 407, 408, 409, 411, 412, 413, 417, 419, 420, 421, 423, 424, 702, 714, 715, 717, 718, 792, 800, 818, 884, 890, 969, 970, 971, 972, 994, 995, 997, 998, 1000, 1001, 1008, 1265, 1266, 1268], "050545": 123, "0522623626787952": [1056, 1244], "0545": [971, 972, 998], "06": [159, 173, 279, 309, 392, 396, 410, 416, 417, 418, 419, 431, 432, 714, 717, 792, 884, 890, 965, 994, 995, 1008], "060": [398, 399, 403, 406, 408, 409, 413, 419, 421], "0601749420166": [187, 309], "06293300616044681": [1014, 1244], "07": [16, 129, 159, 180, 309, 392, 395, 396, 407, 417, 418, 431, 661, 714, 715, 717, 718, 726, 800, 884, 890, 965, 969, 994, 1198, 1265, 1268], "071068": [180, 309, 800, 884], "08": [129, 152, 153, 154, 155, 180, 216, 241, 256, 309, 392, 396, 411, 412, 418, 590, 661, 718, 720, 774, 800, 835, 884, 890, 965, 995, 1008, 1198, 1265, 1266], "085537": [1021, 1244], "09": [47, 129, 180, 241, 309, 392, 396, 411, 412, 590, 665, 714, 715, 717, 762, 774, 800, 835, 884, 890, 965, 1202], "090909": [571, 774], "094395": 1267, "098612": [528, 774, 1099, 1101, 1244, 1264], "0999": [395, 407], "0_": [36, 309], "0m": [401, 974], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 647, 648, 653, 654, 655, 656, 657, 658, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 770, 774, 789, 790, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 890, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 936, 938, 939, 942, 944, 945, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1171, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1184, 1185, 1190, 1191, 1208, 1209, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1244, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273], "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 123, 132, 143, 151, 175, 180, 189, 198, 199, 201, 203, 205, 206, 207, 212, 216, 218, 229, 233, 235, 239, 241, 247, 256, 260, 283, 288, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 320, 324, 332, 333, 334, 336, 374, 380, 383, 388, 392, 393, 395, 396, 398, 399, 401, 403, 406, 407, 408, 409, 411, 412, 413, 417, 418, 419, 421, 431, 434, 440, 461, 462, 463, 467, 473, 485, 493, 499, 501, 507, 517, 519, 521, 525, 527, 541, 543, 553, 568, 571, 574, 584, 585, 590, 621, 666, 675, 678, 691, 702, 703, 710, 715, 717, 718, 721, 724, 726, 728, 734, 735, 759, 762, 774, 795, 796, 800, 813, 814, 816, 821, 830, 831, 835, 837, 847, 848, 856, 861, 864, 866, 869, 870, 871, 872, 873, 874, 875, 884, 890, 948, 961, 965, 966, 968, 969, 974, 983, 994, 1008, 1011, 1014, 1018, 1036, 1046, 1058, 1066, 1074, 1080, 1090, 1092, 1094, 1098, 1100, 1103, 1117, 1128, 1146, 1148, 1203, 1216, 1223, 1225, 1228, 1244, 1252, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1268, 1273], "100": [10, 17, 27, 36, 119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 234, 252, 309, 584, 585, 614, 628, 637, 641, 649, 665, 719, 774, 841, 884, 890, 1100, 1127, 1128, 1134, 1135, 1137, 1151, 1165, 1178, 1186, 1202, 1244, 1262, 1273], "1000": [131, 187, 265, 286, 309, 325, 774, 860, 884, 1003, 1100, 1222, 1244, 1273], "10000": [129, 214, 309], "100000": [10, 27], "1000000": [11, 1006], "1001": [286, 309, 860, 884], "1002": [286, 309, 860, 884], "10047419486152048166": [202, 309], "1005": [325, 774], "100_000": [822, 884], "101": [9, 27, 396, 666, 890, 1203, 1273], "101000": 396, "10101": [27, 1268], "1010101": 9, "101514": [180, 309, 800, 884], "1024": [33, 41, 42, 45, 129, 130, 131, 139, 147, 309, 366, 884, 936], "1040361802642726": [1056, 1244], "107149": 1267, "10734580197236529959": [1035, 1244], "1073741824": [615, 774], "10783150408545073287": [202, 309], "107_930_000": 1252, "10_000": [36, 309], "10i": [201, 309, 813, 884], "10m": [418, 431, 995, 1008], "11": [10, 16, 41, 45, 151, 159, 171, 180, 216, 241, 309, 320, 411, 412, 414, 418, 431, 455, 467, 499, 547, 571, 580, 590, 591, 605, 621, 691, 757, 762, 770, 774, 789, 795, 796, 800, 814, 821, 831, 835, 848, 884, 890, 991, 995, 1008, 1103, 1133, 1244, 1261], "110": [666, 1203], "1101441246220388612": [462, 774], "111": [10, 1262], "11111": 996, "111110": 996, "11111001": [691, 774], "11111010": [691, 774], "11111111": 10, "112": [615, 774, 1273], "11330": 158, "1152921504606846976": [1125, 1244], "116": 158, "11638928888656214026": [462, 774], "118034": [846, 884], "11aa": 1265, "11aabb": 1265, "11h": [393, 966], "12": [26, 36, 47, 123, 129, 151, 159, 180, 201, 212, 216, 241, 256, 279, 309, 320, 382, 393, 395, 396, 400, 407, 410, 411, 412, 414, 415, 416, 418, 431, 432, 433, 440, 467, 499, 531, 571, 579, 590, 605, 615, 629, 665, 711, 714, 717, 718, 719, 735, 760, 761, 762, 774, 800, 813, 814, 818, 821, 835, 842, 848, 884, 890, 966, 968, 969, 980, 981, 983, 987, 995, 1008, 1018, 1103, 1143, 1166, 1202, 1244, 1264, 1265, 1266, 1268, 1270, 1273], "120": [720, 1267], "1200": [610, 774, 1144, 1244], "120134": [665, 1202], "121": 1273, "123": [9, 629, 635, 648, 671, 764, 890, 1166, 1172, 1208, 1221, 1244], "123000": 890, "1232e": [950, 952, 1244], "1234": [27, 610, 774, 1144, 1244], "12345": [726, 945, 1029, 1143, 1244], "1234500": 890, "123456": [9, 890], "1234567": 27, "123456780": 123, "12346": 726, "123465": 890, "123a123": 648, "123abc": [647, 1184, 1185], "125": [1, 36, 51, 309, 318, 575, 753, 774, 845, 884, 1117, 1244], "127": [1232, 1244], "128": [49, 63, 1117, 1244], "129": [615, 774], "12th": [818, 884], "13": [174, 175, 180, 190, 191, 198, 206, 217, 229, 241, 283, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 320, 392, 398, 399, 403, 406, 408, 409, 413, 419, 421, 541, 543, 590, 665, 704, 710, 713, 717, 724, 758, 760, 763, 774, 793, 794, 800, 807, 808, 820, 835, 856, 864, 866, 869, 870, 871, 872, 873, 874, 875, 884, 965, 995, 1008, 1009, 1103, 1202, 1244], "130": 126, "13382926553367784577": [462, 774], "134821952": 1252, "134_821_952": 1252, "135": [699, 1267], "13614470193936745724": [462, 774], "13756996518000038261": [1035, 1244], "13h": [393, 966], "14": [35, 151, 180, 219, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 393, 398, 399, 403, 406, 408, 409, 413, 419, 421, 467, 580, 717, 760, 761, 774, 800, 864, 866, 869, 870, 871, 872, 873, 874, 875, 884, 890, 966, 995], "141592653589793": 10, "141593": [579, 774, 897, 1244, 1264, 1267], "142857": [1117, 1244], "143": [665, 1202, 1273], "1433": [34, 309], "1436e16": 159, "1438741209321515184": [202, 309], "1440": [428, 1005], "1443e235": 1273, "149": 1273, "14d": 890, "15": [10, 36, 151, 180, 201, 206, 219, 241, 309, 384, 388, 412, 418, 431, 440, 574, 590, 605, 711, 717, 760, 761, 774, 800, 813, 835, 884, 890, 958, 961, 995, 1008, 1018, 1244, 1265], "150": [1135, 1244], "1500": [151, 162], "15000": [214, 309], "153061": [481, 774], "15836": 159, "15_000": [214, 309], "16": [1, 36, 49, 68, 78, 151, 165, 180, 201, 241, 283, 309, 380, 383, 467, 551, 575, 590, 666, 675, 710, 720, 721, 724, 774, 800, 813, 835, 842, 856, 884, 890, 995, 1008, 1117, 1156, 1203, 1217, 1244, 1264, 1265, 1270], "165": [995, 1008], "1656e15": [952, 1244], "166667": [1117, 1244], "1666683077": 726, "1666683099": 726, "167": 47, "16996": 1273, "16h": 890, "17": [151, 159, 187, 216, 288, 309, 440, 591, 609, 726, 761, 774, 861, 950, 952, 995, 1018, 1133, 1244, 1273], "17293822569102704640": [1125, 1244], "174": 1273, "175201": [619, 774, 1157, 1244], "1755e": [156, 159], "1764": 51, "17888890": [187, 309], "179": 1273, "17_500": [214, 309], "18": [34, 123, 180, 226, 241, 309, 383, 418, 431, 434, 467, 553, 590, 675, 774, 800, 827, 831, 835, 884, 890, 1011, 1260, 1267, 1270], "180": [386, 579, 774, 1267], "1844": 159, "18446744073709551614": [1125, 1244], "185_000_000": 1252, "186": 1273, "1875": [607, 774, 854, 884], "1897": [395, 407, 968, 983], "18d": 890, "19": [134, 159, 216, 241, 309, 395, 418, 590, 595, 597, 599, 601, 665, 774, 818, 835, 884, 968, 995, 1008, 1202], "1920": 1265, "196": 1266, "1964": [831, 884], "1969": [1265, 1266], "1970": [61, 62, 149, 1252], "1972": 1252, "1976": [405, 435], "1977": [405, 435], "1978": [398, 399, 403, 405, 406, 408, 409, 413, 419, 421, 435, 1266], "1979": [405, 435], "1985": [715, 718], "1990": [129, 1252], "1993": 1252, "1994": 1252, "1995": 129, "1998": [414, 991], "1999": [256, 309, 414, 890, 991, 1268], "199992": [822, 884], "199994": [822, 884], "199996": [822, 884], "199998": [822, 884], "1_000_000": [187, 309, 1016, 1244], "1_234_500": 890, "1d": [201, 216, 241, 279, 309, 394, 414, 418, 425, 428, 431, 434, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 720, 734, 761, 762, 774, 813, 818, 835, 884, 890, 967, 975, 981, 991, 995, 999, 1002, 1005, 1008, 1018, 1244], "1e": [11, 152, 153, 154, 155], "1e6": 11, "1h": [201, 216, 241, 279, 309, 401, 414, 418, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 718, 719, 761, 762, 774, 813, 818, 835, 884, 974, 976, 991, 995, 1008, 1018, 1244], "1i": [201, 241, 279, 309, 440, 590, 774, 813, 835, 884, 1018, 1244], "1m": [201, 216, 241, 279, 309, 414, 418, 430, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 718, 719, 761, 762, 774, 813, 818, 835, 884, 991, 995, 1003, 1004, 1006, 1007, 1008, 1018, 1244], "1mo": [201, 216, 241, 279, 309, 397, 411, 412, 414, 417, 418, 424, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 818, 835, 884, 970, 987, 988, 989, 991, 992, 993, 994, 995, 1001, 1008, 1009, 1018, 1244], "1n": [201, 216, 241, 279, 309, 414, 418, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 718, 719, 761, 762, 774, 813, 818, 835, 884, 991, 995, 1008, 1018, 1244], "1q": [201, 216, 241, 279, 309, 414, 418, 431, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 818, 835, 884, 991, 995, 1008], "1st": [818, 884], "1st_col": 890, "1u": [201, 216, 241, 279, 309, 414, 418, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 718, 719, 761, 762, 774, 813, 818, 835, 884, 991, 995, 1008, 1018, 1244], "1w": [201, 216, 241, 279, 309, 414, 418, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 818, 835, 884, 991, 995, 1008, 1018, 1244], "1w2d": [715, 716], "1y": [201, 216, 241, 279, 309, 414, 418, 431, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 818, 835, 884, 991, 995, 1008], "1y2mo": [414, 991], "1zy3": [629, 1166], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 138, 139, 141, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 322, 324, 325, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 366, 368, 369, 370, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 392, 393, 395, 396, 397, 398, 399, 400, 401, 404, 407, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 620, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 748, 752, 753, 754, 755, 756, 757, 759, 762, 763, 764, 770, 774, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 889, 890, 892, 893, 896, 898, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 936, 938, 942, 944, 945, 946, 947, 949, 950, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 965, 966, 969, 971, 972, 974, 976, 979, 980, 981, 983, 985, 986, 987, 988, 989, 993, 994, 995, 998, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1166, 1171, 1173, 1175, 1176, 1178, 1179, 1181, 1184, 1185, 1190, 1191, 1193, 1194, 1195, 1198, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1209, 1211, 1212, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1244, 1248, 1252, 1253, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273], "20": [34, 35, 36, 129, 134, 151, 156, 157, 158, 159, 163, 166, 171, 180, 189, 205, 206, 226, 233, 235, 239, 256, 266, 267, 271, 285, 290, 309, 332, 333, 334, 388, 395, 398, 399, 403, 406, 407, 408, 409, 413, 418, 419, 421, 431, 434, 455, 462, 467, 531, 538, 547, 574, 593, 595, 597, 599, 601, 604, 606, 608, 633, 675, 690, 717, 726, 734, 753, 761, 774, 789, 800, 805, 827, 830, 845, 859, 863, 884, 890, 961, 968, 972, 983, 995, 1008, 1011, 1021, 1034, 1127, 1170, 1223, 1225, 1228, 1244, 1259, 1260, 1262, 1268], "200": [426, 427, 429, 584, 585, 774, 890, 1127, 1128, 1134, 1135, 1137, 1244, 1262], "2000": [395, 404, 407, 411, 412, 414, 890, 968, 977, 983, 988, 989, 991, 996, 1252, 1265], "200000": [426, 822, 884], "200000000": 429, "2001": [16, 394, 395, 400, 402, 404, 407, 410, 414, 415, 416, 418, 422, 431, 432, 433, 434, 593, 595, 597, 599, 601, 604, 606, 608, 661, 774, 890, 967, 968, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 991, 992, 993, 995, 999, 1008, 1009, 1010, 1011, 1012, 1198], "2002": [129, 404, 414, 977, 991, 1012], "2003": [414, 726, 991], "2004": [414, 991], "2005": [414, 991], "2006": [414, 991], "2008": 1252, "200m": [426, 427, 429], "2010": [256, 309, 890], "2011": [393, 966], "2012": [393, 966, 1268], "2016": [216, 309, 818, 884], "2017": [216, 309, 818, 884], "2018": [216, 309, 417, 818, 884, 994], "2019": [216, 309, 818, 884], "202": 1266, "2020": [133, 144, 173, 180, 199, 216, 241, 309, 312, 392, 397, 401, 417, 420, 423, 424, 425, 426, 427, 428, 429, 430, 440, 590, 661, 663, 664, 702, 774, 792, 800, 835, 884, 890, 965, 970, 974, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1018, 1198, 1200, 1201, 1244, 1266], "2021": [133, 144, 173, 180, 199, 201, 279, 309, 661, 734, 792, 800, 813, 884, 890, 971, 972, 978, 998, 1198, 1265], "2022": [47, 173, 180, 199, 309, 396, 418, 431, 661, 715, 716, 718, 719, 720, 726, 792, 800, 884, 890, 969, 978, 995, 1008, 1198], "2023": [16, 36, 123, 151, 214, 309, 396, 720, 734, 890, 969], "2024": [151, 392, 398, 399, 403, 406, 408, 409, 413, 419, 421, 702, 714, 717, 720, 890, 965, 1265, 1268], "2025": [392, 702, 890, 965], "2026": 1266, "2030": 1265, "2031": 890, "2047317070637311557": [202, 309], "2055938745": 123, "2065": [398, 399, 403, 406, 408, 409, 413, 419, 421], "2068": 159, "207": 1266, "2077": [256, 309, 890, 1265, 1266], "2095": 159, "20_000": [36, 309], "20word": 132, "21": [151, 180, 226, 258, 309, 395, 593, 595, 597, 599, 601, 604, 606, 608, 717, 726, 774, 800, 827, 884, 890, 968, 1260], "213": 1273, "2147483647": 1273, "2147483648": [1102, 1244], "21d": 890, "22": [41, 45, 151, 159, 309, 400, 415, 418, 431, 433, 434, 591, 593, 595, 597, 599, 601, 604, 606, 608, 661, 717, 770, 774, 884, 890, 995, 1008, 1011, 1133, 1198, 1244, 1265, 1266, 1273], "221": 1273, "2246e": [1156, 1217, 1244], "225": [418, 431, 1267], "22_000_000": 1252, "23": [10, 159, 180, 201, 241, 271, 309, 396, 400, 403, 415, 418, 433, 590, 593, 595, 597, 599, 601, 604, 606, 608, 717, 720, 760, 761, 762, 774, 800, 813, 835, 845, 884, 890, 969, 976, 1228, 1244, 1272, 1273], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1252, "2337": [36, 309], "234": 27, "2345": 890, "23456789": 10, "235": 1273, "23h": 890, "24": [49, 151, 201, 216, 219, 241, 256, 279, 309, 382, 384, 400, 414, 415, 418, 425, 431, 433, 551, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 720, 761, 762, 774, 813, 818, 835, 884, 958, 991, 995, 1002, 1008, 1055, 1244, 1265, 1272], "24030": 158, "249": [691, 774], "25": [1, 27, 36, 51, 123, 180, 201, 216, 241, 266, 271, 279, 283, 309, 366, 388, 400, 401, 415, 418, 431, 433, 440, 575, 577, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 684, 717, 718, 719, 720, 726, 736, 761, 762, 774, 800, 813, 818, 824, 835, 854, 856, 884, 890, 936, 960, 961, 974, 995, 1008, 1014, 1018, 1037, 1117, 1121, 1244, 1260, 1264, 1270, 1271], "250": [691, 774, 1135, 1244, 1262, 1273], "2500": [214, 271, 309], "254508": [440, 774, 1018, 1244], "255": 1273, "256": [219, 309, 366, 936, 1117, 1244, 1264], "2560": [366, 936], "259921": [372, 774, 944, 1244, 1264], "25_000_000": 1252, "26": [34, 36, 151, 156, 157, 158, 159, 163, 180, 309, 401, 432, 800, 884, 974], "266667": [180, 309, 800, 884], "27": [1, 51, 266, 302, 309, 383, 410, 416, 432, 675, 774, 875, 890, 1223, 1244, 1272, 1273], "270": 1267, "28": [262, 267, 309, 318, 417, 434, 774, 994, 1011, 1225, 1244, 1265, 1267, 1272, 1273], "283185": [579, 774], "2846": 309, "285714": [468, 774, 1040, 1244], "289962": 1267, "28_341_469": 1252, "29": [16, 151, 393, 411, 966, 988], "29096": 1273, "290994": [846, 884], "292432": [898, 1244], "292893": [440, 774, 1018, 1244], "2_color_scal": [36, 309], "2d": [241, 266, 267, 309, 414, 590, 734, 774, 835, 884, 966, 973], "2h": [593, 595, 597, 599, 601, 604, 606, 608, 774], "2i": [201, 309, 813, 884], "2m": [890, 986], "2x": 158, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 134, 138, 139, 140, 143, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 318, 319, 320, 321, 323, 334, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 532, 549, 550, 551, 552, 553, 554, 556, 558, 560, 561, 564, 567, 568, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 620, 622, 623, 624, 627, 628, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 663, 668, 672, 673, 674, 675, 676, 678, 682, 683, 686, 687, 688, 690, 691, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 774, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 890, 892, 893, 896, 897, 899, 900, 901, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 942, 944, 945, 946, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 973, 975, 976, 977, 979, 980, 981, 983, 985, 986, 987, 992, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1006, 1008, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1165, 1167, 1168, 1169, 1171, 1172, 1173, 1176, 1177, 1178, 1180, 1181, 1184, 1185, 1186, 1187, 1188, 1192, 1199, 1200, 1205, 1209, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1224, 1225, 1226, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1244, 1252, 1253, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1273], "30": [36, 180, 189, 201, 205, 233, 239, 262, 283, 309, 332, 333, 334, 388, 396, 398, 399, 403, 406, 408, 409, 410, 411, 413, 416, 417, 418, 419, 421, 424, 431, 432, 462, 538, 615, 717, 734, 760, 761, 774, 800, 805, 813, 830, 856, 884, 890, 961, 969, 988, 994, 995, 1001, 1008, 1034, 1244, 1259, 1260, 1262, 1264, 1265, 1267, 1268, 1271, 1273], "300": [262, 309, 461, 568, 585, 774, 890, 1128, 1134, 1135, 1137, 1244, 1262], "3000": 890, "3002": [395, 407, 968, 983], "30103": [527, 774, 1264], "3022416320763508302": [1035, 1244], "30_000": [36, 309], "30m": [201, 309, 418, 431, 813, 884, 995, 1008], "31": [51, 180, 256, 309, 395, 396, 400, 407, 411, 414, 424, 633, 661, 714, 717, 726, 734, 753, 800, 884, 890, 966, 968, 969, 973, 983, 988, 1001, 1127, 1170, 1198, 1244, 1266, 1268, 1273], "32": [49, 61, 66, 69, 79, 211, 216, 241, 309, 551, 590, 615, 774, 835, 884, 962, 992, 1117, 1138, 1244, 1260, 1265], "321": [27, 1273], "3212": [665, 1202], "321cba": 1265, "3265500": 890, "32971": [434, 1011], "32974": [434, 1011], "32976": [434, 1011], "32bit": [266, 309], "33": [180, 226, 309, 609, 774, 800, 827, 884, 1138, 1244, 1266], "333": [16, 610, 774, 1144, 1244], "33333": 1268, "333333": [207, 309, 553, 816, 884, 1117, 1142, 1244, 1260], "34": [180, 309, 661, 800, 884, 1198], "3420": [665, 1202], "343622": [620, 774], "345": [643, 644, 1180, 1181], "3456": 890, "34776706224699483": [1158, 1244], "35": [36, 309, 388, 717, 774, 961, 1244], "350": [461, 568, 774, 1135, 1244], "356": [400, 415, 433], "356194": [698, 699, 1267], "357": [400, 415, 433], "358": [400, 415, 433], "359": [400, 415, 433], "36": [180, 309, 800, 884, 1270], "360": [386, 579, 774, 1267], "361": 1273, "363961": [519, 1092], "366": [415, 992], "37": [12, 890], "370h": [440, 774, 1018, 1244], "37338": 1273, "38": [36, 123, 156, 159, 309], "38180177416060584": [602, 774, 1139, 1244], "381802": [602, 774, 1139, 1244], "386294": [528, 774, 1101, 1244, 1264], "389056": [444, 774, 1021, 1244, 1264], "39": [606, 726, 774], "39m": 890, "3_color_scal": [36, 309], "3d12h4m25": [201, 216, 241, 279, 309, 418, 431, 440, 590, 718, 719, 761, 762, 774, 813, 818, 835, 884, 995, 1008, 1018, 1244], "3f": [132, 661, 664, 1198, 1201], "3i": [201, 241, 309, 813, 884], "3rd": [1176, 1199], "3xy": [629, 1166], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 143, 151, 163, 170, 171, 172, 173, 174, 175, 179, 181, 184, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 226, 228, 229, 230, 232, 233, 234, 235, 241, 243, 244, 251, 252, 255, 259, 260, 261, 262, 263, 264, 267, 270, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 322, 324, 336, 343, 344, 345, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 360, 361, 366, 368, 369, 370, 372, 373, 374, 378, 379, 382, 383, 384, 386, 389, 396, 399, 400, 407, 415, 416, 417, 418, 419, 420, 423, 425, 428, 430, 431, 433, 437, 438, 440, 444, 445, 447, 448, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 478, 479, 483, 484, 485, 492, 493, 494, 495, 496, 498, 499, 501, 509, 511, 512, 513, 514, 515, 516, 517, 521, 522, 527, 530, 531, 532, 549, 551, 553, 554, 556, 558, 560, 561, 564, 565, 566, 569, 570, 572, 573, 574, 575, 578, 580, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 614, 617, 621, 622, 623, 624, 627, 629, 635, 638, 639, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 659, 660, 661, 662, 666, 671, 672, 674, 675, 676, 678, 681, 682, 683, 684, 690, 691, 693, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 717, 718, 719, 721, 723, 724, 728, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 770, 774, 789, 790, 792, 793, 794, 795, 796, 799, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 830, 831, 832, 835, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 890, 896, 898, 905, 912, 914, 915, 916, 918, 919, 920, 921, 922, 924, 926, 927, 928, 929, 930, 931, 936, 938, 945, 946, 948, 953, 958, 960, 962, 972, 976, 982, 983, 984, 986, 987, 988, 989, 990, 993, 994, 995, 997, 1000, 1002, 1005, 1007, 1008, 1009, 1010, 1015, 1018, 1022, 1023, 1025, 1026, 1030, 1031, 1032, 1036, 1037, 1039, 1040, 1041, 1042, 1046, 1049, 1050, 1051, 1052, 1054, 1058, 1065, 1066, 1067, 1068, 1069, 1074, 1078, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1094, 1095, 1109, 1112, 1113, 1114, 1117, 1118, 1119, 1123, 1124, 1127, 1128, 1129, 1132, 1136, 1138, 1139, 1140, 1141, 1142, 1145, 1147, 1151, 1152, 1155, 1158, 1159, 1160, 1164, 1166, 1172, 1175, 1176, 1180, 1181, 1182, 1183, 1188, 1190, 1191, 1196, 1197, 1198, 1199, 1203, 1208, 1209, 1212, 1214, 1216, 1222, 1225, 1227, 1229, 1235, 1244, 1248, 1252, 1253, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1270, 1271, 1272, 1273], "40": [36, 180, 189, 216, 233, 309, 418, 431, 462, 525, 665, 675, 774, 800, 830, 884, 890, 978, 1008, 1098, 1202, 1259, 1260, 1262, 1265], "400": [278, 309, 426, 427, 429, 853, 884, 1134, 1135, 1137, 1244, 1262], "4000000": [1016, 1244], "404": [634, 636, 1171, 1173], "4096": 1264, "41": [180, 309, 606, 774, 800, 884, 1260, 1273], "412277": 159, "414214": [624, 774, 1161, 1244, 1264], "4160": 51, "416147": 1267, "4164": [216, 309, 818, 884], "42": [51, 180, 202, 226, 241, 309, 590, 774, 800, 827, 835, 884, 1035, 1244, 1259, 1272], "424778": [579, 774], "428571": [439, 774, 1017, 1244], "429101": 1260, "4294967296": [41, 309], "43": [180, 241, 309, 383, 590, 606, 774, 800, 835, 884], "4321": 890, "433013": [603, 774, 846, 884], "434949": 1267, "44": [10, 226, 309, 389, 774, 827, 884], "4411": [216, 309, 818, 884], "44225": [944, 1244], "444": 10, "44444444444": 10, "45": [36, 180, 241, 309, 396, 418, 431, 590, 606, 629, 635, 673, 699, 717, 734, 760, 761, 774, 800, 835, 884, 890, 969, 995, 1008, 1166, 1172, 1211, 1264, 1265, 1267, 1271, 1273], "450": [1135, 1244], "4500000": 890, "456": [9, 10, 396, 890, 969, 1221, 1244], "456000": [396, 969], "456001\u00b5": 890, "4566": [216, 309, 818, 884], "456789": [890, 996], "456789\u00b5": 890, "456m": 890, "457658": 1267, "459148": [436, 774], "46": 890, "4696": [216, 309, 818, 884], "47": [47, 180, 309, 606, 774, 800, 884, 890], "470": [831, 884], "47033": [602, 774, 1139, 1244], "47033046033698594": [602, 774, 1139, 1244], "475": [831, 884], "48": [12, 159, 241, 309, 590, 675, 774, 835, 884, 890], "4827": [216, 309], "485": 1273, "49": [180, 309, 800, 884, 890], "492474": [440, 774, 1018, 1244], "4_500_000": 890, "4ab4a": 1265, "4d": [440, 774, 1018, 1244], "4f6228": [36, 309], "4f71": [36, 309], "4x": [213, 309], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 91, 116, 119, 120, 121, 122, 123, 125, 130, 151, 152, 154, 157, 159, 163, 173, 174, 175, 180, 181, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 230, 232, 234, 235, 236, 241, 244, 251, 252, 255, 256, 259, 260, 261, 262, 263, 264, 266, 267, 270, 271, 273, 276, 277, 278, 279, 282, 283, 285, 286, 288, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 318, 319, 322, 337, 338, 343, 344, 345, 347, 349, 353, 358, 360, 366, 368, 369, 370, 373, 374, 384, 385, 386, 388, 389, 392, 395, 396, 397, 398, 399, 403, 406, 407, 408, 409, 413, 417, 419, 420, 421, 423, 424, 430, 434, 438, 440, 442, 443, 446, 448, 452, 453, 457, 458, 460, 463, 465, 467, 469, 472, 475, 476, 477, 478, 479, 483, 485, 492, 495, 496, 498, 499, 501, 504, 506, 507, 511, 512, 513, 514, 515, 516, 520, 521, 525, 531, 549, 551, 553, 565, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 603, 605, 606, 607, 608, 609, 612, 617, 623, 629, 638, 639, 642, 643, 644, 662, 666, 676, 678, 682, 683, 684, 696, 698, 699, 701, 702, 703, 704, 706, 708, 710, 711, 712, 713, 714, 715, 717, 720, 721, 722, 723, 724, 728, 730, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 753, 755, 757, 758, 759, 763, 770, 774, 792, 793, 794, 795, 796, 800, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 824, 825, 831, 835, 841, 842, 843, 844, 845, 846, 847, 848, 852, 853, 855, 856, 859, 860, 861, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 884, 890, 896, 898, 902, 905, 908, 909, 912, 914, 915, 916, 918, 920, 924, 929, 930, 931, 936, 938, 946, 948, 954, 958, 959, 960, 961, 962, 965, 968, 969, 970, 971, 972, 973, 983, 994, 996, 997, 998, 1000, 1001, 1007, 1009, 1010, 1011, 1015, 1018, 1020, 1022, 1023, 1024, 1032, 1036, 1037, 1039, 1041, 1045, 1048, 1058, 1065, 1068, 1069, 1074, 1077, 1080, 1084, 1085, 1086, 1087, 1088, 1089, 1093, 1094, 1098, 1102, 1109, 1114, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1128, 1129, 1132, 1133, 1134, 1135, 1137, 1138, 1141, 1145, 1147, 1152, 1155, 1158, 1161, 1166, 1175, 1176, 1179, 1180, 1199, 1203, 1216, 1223, 1225, 1228, 1229, 1232, 1235, 1244, 1253, 1256, 1258, 1260, 1261, 1264, 1265, 1266, 1267, 1270, 1272, 1273], "50": [12, 27, 36, 180, 189, 199, 309, 374, 418, 431, 716, 774, 800, 884, 890, 948, 960, 1008, 1244, 1259], "500": [36, 278, 309, 398, 399, 403, 406, 408, 409, 413, 419, 421, 853, 884, 982, 984, 990, 1134, 1135, 1137, 1244], "5000": [271, 309, 1228, 1244], "50000": 130, "500000": [406, 982], "500000000": [413, 990], "5000555": 890, "500_000": [398, 399, 403, 406, 408, 409, 413, 419, 421], "500m": [982, 984, 990], "51": 890, "512": [41, 131, 213, 309, 366, 575, 774, 936, 1117, 1244], "51966": [666, 1203], "52": [283, 309, 432, 609, 774, 818, 856, 884], "523599": 1267, "527525": [1140, 1244], "53": [432, 1009, 1270], "533316061": 1252, "533_316_061": 1252, "54": [444, 774, 1056, 1244, 1264, 1273], "540": [386, 579, 774], "540302": 1267, "543": 9, "543081": [376, 774, 951, 1244], "5432": 131, "54321": 9, "544": 1273, "544705": 706, "549306": [902, 1244], "55": [36, 49, 309, 1265, 1266], "5555": 890, "55550": 890, "56": [123, 679, 774], "566371": [579, 774], "567": 27, "56789": [945, 1029, 1143, 1244], "57": [606, 774, 1143, 1244, 1267, 1273], "570796": [326, 328, 774, 897, 899, 1244, 1267], "575050513": [156, 159], "58": [234, 309], "581139": [960, 1244], "584963": [526, 774], "587401": [372, 774, 1264], "59": [123, 180, 309, 396, 409, 419, 453, 717, 760, 761, 762, 774, 800, 884, 890, 969, 986, 996], "59815": [444, 774, 1264], "5_000_555": 890, "5th": [36, 309], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 91, 116, 119, 120, 121, 122, 134, 138, 139, 151, 173, 176, 177, 181, 182, 183, 184, 185, 186, 188, 189, 192, 195, 196, 197, 198, 199, 201, 203, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 231, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 252, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 273, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 292, 302, 303, 309, 312, 313, 318, 322, 343, 344, 345, 347, 353, 361, 369, 370, 382, 383, 389, 392, 396, 400, 410, 414, 415, 416, 426, 427, 429, 432, 433, 436, 438, 447, 448, 453, 454, 457, 463, 465, 467, 485, 486, 487, 496, 499, 512, 513, 514, 515, 519, 531, 532, 565, 569, 576, 579, 580, 581, 586, 588, 590, 592, 594, 596, 598, 600, 603, 605, 606, 607, 612, 623, 629, 633, 643, 644, 666, 676, 678, 683, 691, 693, 695, 702, 710, 711, 712, 714, 717, 721, 724, 730, 735, 736, 740, 753, 757, 770, 774, 792, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 809, 810, 811, 813, 814, 816, 817, 819, 821, 822, 829, 831, 833, 835, 836, 837, 839, 841, 842, 843, 844, 845, 848, 851, 852, 855, 856, 859, 860, 865, 875, 876, 884, 890, 912, 914, 915, 916, 918, 924, 946, 950, 952, 956, 957, 962, 965, 991, 1010, 1015, 1022, 1032, 1037, 1059, 1060, 1069, 1072, 1085, 1086, 1087, 1088, 1092, 1109, 1120, 1123, 1124, 1129, 1131, 1136, 1138, 1140, 1142, 1147, 1152, 1166, 1170, 1180, 1203, 1215, 1225, 1244, 1253, 1256, 1258, 1260, 1261, 1264, 1270, 1271, 1273], "60": [36, 126, 189, 234, 309, 403, 408, 409, 419, 430, 453, 606, 661, 774, 992, 996, 1007, 1125, 1198, 1244, 1267], "600": [278, 309, 426, 427, 429, 853, 884, 890], "60000": 406, "600000": 890, "60000000": 413, "60206": [527, 774, 1264], "605551": 755, "605551275463989": 755, "609438": 1264, "60_000": [398, 399, 403, 406, 408, 409, 413, 419, 421], "61": [234, 309], "625": [600, 774], "626172": [631, 1168], "63": [606, 774], "63204": 1273, "6331e16": [1217, 1244, 1267], "636253": 1267, "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 150, 170, 271, 309, 377, 551, 575, 774, 1117, 1244, 1264], "64030": [666, 1203], "642093": 1267, "647961": 159, "64bit": [151, 582, 774, 1125, 1244], "65": [1014, 1244], "650": [461, 568, 774], "65280": [666, 1203], "654": [27, 753, 845, 884], "65432": 1268, "65536": 1264, "66": [216, 278, 309, 606, 691, 774, 818, 853, 884, 1056, 1138, 1244], "663053": 123, "666": 890, "666000": 890, "666667": [180, 207, 280, 297, 309, 439, 739, 774, 800, 816, 854, 870, 884, 1017, 1244], "666f6f": [631, 1168], "678": [629, 635, 1166, 1172], "6789": [28, 890], "67890": 28, "686241": 1260, "69": [606, 774, 1056, 1244], "693147": [528, 774, 1099, 1101, 1244, 1264], "6_000_000": 1252, "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 138, 139, 151, 166, 173, 176, 177, 178, 180, 182, 183, 185, 186, 188, 192, 195, 197, 201, 203, 205, 207, 215, 218, 220, 222, 224, 226, 227, 231, 234, 236, 238, 239, 241, 242, 244, 245, 246, 247, 249, 252, 254, 257, 258, 259, 260, 265, 267, 268, 269, 277, 279, 280, 281, 309, 313, 318, 322, 344, 345, 347, 356, 383, 395, 396, 400, 407, 415, 417, 418, 431, 433, 444, 457, 463, 467, 468, 485, 499, 512, 513, 514, 515, 569, 580, 586, 590, 605, 606, 623, 638, 665, 678, 702, 710, 711, 714, 717, 718, 724, 729, 735, 736, 753, 757, 774, 792, 797, 798, 800, 802, 804, 806, 809, 811, 813, 814, 816, 817, 821, 827, 829, 832, 833, 835, 836, 837, 841, 845, 848, 884, 890, 902, 915, 916, 918, 927, 968, 969, 973, 978, 983, 994, 995, 1008, 1010, 1021, 1040, 1055, 1072, 1085, 1086, 1087, 1088, 1128, 1129, 1141, 1147, 1175, 1202, 1244, 1253, 1258, 1260, 1261, 1264, 1266, 1270, 1273], "70": [180, 309, 691, 774, 800, 884, 1056, 1244], "700": [278, 309, 853, 884], "702963": [36, 309], "707107": [355, 441, 603, 604, 698, 774, 926, 1019, 1244, 1267], "712389": 1267, "714": 1273, "714286": [468, 774, 1040, 1244], "718281828459045": [10, 436, 526, 774, 1014, 1099, 1244], "718282": [444, 774, 1021, 1244, 1264], "720": [386, 579, 774], "7264": 1273, "732051": [1161, 1244], "7415e16": 159, "75": [36, 180, 309, 322, 569, 577, 592, 594, 596, 598, 603, 605, 607, 736, 774, 800, 884, 890, 960, 1037, 1056, 1121, 1244, 1267, 1273], "7500": [214, 309], "7508": 1273, "754": [684, 774], "754888": [436, 774], "761594": [680, 774, 1218, 1244], "7654": 890, "765431": 996, "7654321": 27, "76933c": [36, 309], "78": 9, "780": 9, "784": [216, 309], "785398": [330, 698, 699, 774, 901, 1244, 1267], "789": [10, 890], "79": [1056, 1244], "7d": 890, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 138, 139, 151, 173, 176, 177, 178, 180, 182, 183, 184, 185, 186, 188, 192, 195, 197, 199, 203, 205, 212, 215, 216, 218, 219, 220, 222, 224, 227, 236, 238, 239, 241, 242, 244, 245, 246, 247, 249, 252, 254, 256, 257, 258, 260, 265, 267, 268, 269, 277, 280, 281, 283, 309, 322, 324, 336, 344, 345, 347, 380, 383, 384, 396, 457, 464, 467, 468, 493, 495, 499, 512, 513, 514, 515, 551, 569, 575, 586, 587, 591, 615, 621, 623, 645, 646, 661, 691, 696, 702, 706, 708, 711, 713, 721, 723, 728, 729, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 753, 755, 758, 759, 763, 774, 792, 797, 798, 800, 802, 803, 804, 806, 809, 811, 814, 817, 821, 822, 831, 833, 836, 837, 841, 845, 848, 856, 884, 890, 915, 916, 918, 952, 958, 978, 1037, 1040, 1055, 1066, 1068, 1072, 1085, 1086, 1087, 1088, 1117, 1129, 1132, 1133, 1136, 1138, 1140, 1142, 1182, 1183, 1198, 1244, 1252, 1253, 1258, 1260, 1261, 1264, 1265, 1266, 1270, 1273], "80": [36, 309], "800": [426, 427, 429], "8000": 131, "803065983": 123, "81": 1264, "814697265625": [1016, 1244], "816497": [257, 309], "8192": 129, "82": [216, 309, 818, 884], "8257e14": 1273, "83": [216, 309, 818, 884], "833": [216, 309], "833333": [297, 870], "848062": 1267, "848808": 159, "85": [36, 309, 1056, 1244, 1273], "850": [461, 568, 774], "8568409950394724": [1014, 1244], "8589934592": [615, 774], "86": 1273, "8601": 1265, "87": 1273, "876": 9, "88": [180, 309, 800, 884], "881374": [329, 774, 900, 1244], "888": [753, 845, 884], "8_000_000": 1252, "8a": [933, 934], "8nin": 1273, "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 151, 178, 180, 192, 194, 203, 207, 218, 219, 234, 241, 243, 244, 247, 259, 260, 277, 281, 283, 302, 309, 318, 322, 324, 336, 344, 345, 347, 352, 354, 380, 383, 386, 396, 449, 457, 467, 473, 493, 499, 510, 518, 553, 569, 579, 586, 590, 591, 602, 605, 606, 617, 621, 635, 665, 673, 675, 704, 710, 711, 714, 717, 729, 762, 774, 800, 809, 814, 816, 821, 835, 837, 848, 856, 875, 884, 890, 910, 911, 915, 916, 918, 923, 925, 960, 973, 982, 984, 990, 995, 1008, 1009, 1046, 1055, 1066, 1072, 1083, 1091, 1129, 1133, 1139, 1141, 1143, 1155, 1172, 1202, 1211, 1244, 1252, 1253, 1258, 1261, 1270], "90": [180, 309, 665, 800, 884, 1202, 1267], "901234": [945, 1029, 1143, 1244], "909": [216, 309], "910": [216, 309, 635, 1172], "910t": [629, 635, 1166, 1172], "914": [216, 309], "9223372036854775807": [687, 774], "9223372036854775808": [529, 774], "927295": 1267, "928571": [442, 774, 1020, 1244], "93": [1056, 1244], "94": [319, 774], "9477376373212048": [1056, 1244], "95": [17, 319, 774, 890], "95b3d7": [36, 309], "96": [17, 180, 309, 319, 774, 800, 884, 1056, 1244], "961": 51, "963624": [441, 774, 1019, 1244], "963757": 1267, "964028": [234, 309], "96_067_179": 1252, "97": [17, 206, 309, 319, 774, 1056, 1244], "9774092659964970114": [462, 774], "978307200": [402, 975], "978307200000": 422, "978307200000000": [402, 422, 975, 999], "978307200000000000": 999, "978393600": [402, 975], "978393600000": 422, "978393600000000": [402, 422, 975, 999], "978393600000000000": 999, "978480000": [402, 975], "978480000000": 422, "978480000000000": [402, 422, 975, 999], "978480000000000000": 999, "98": [17, 206, 234, 309, 368, 456, 459, 622, 665, 682, 774, 1202], "987": 27, "987000": 890, "9876": 9, "987654": [27, 890], "987654321": 10, "9876543210": 123, "987m": 890, "988": 10, "99": [17, 36, 190, 191, 206, 209, 234, 278, 309, 319, 368, 446, 448, 456, 459, 622, 682, 764, 774, 807, 808, 853, 884, 1014, 1024, 1244, 1264], "9914e218": 159, "998347": [234, 309], "999": [395, 407, 890, 968, 983, 1262, 1273], "999000": 890, "999954": [234, 309], "999999": [671, 717, 760, 761, 762, 890, 1208], "999999\u00b5": 890, "9bbb59": [36, 309], "A": [13, 33, 36, 41, 42, 53, 54, 59, 65, 123, 129, 130, 131, 132, 143, 145, 150, 165, 177, 185, 194, 201, 215, 216, 221, 223, 228, 234, 259, 262, 277, 278, 279, 283, 284, 309, 317, 390, 391, 396, 420, 423, 437, 438, 446, 458, 460, 471, 474, 476, 477, 483, 523, 530, 531, 542, 555, 564, 565, 587, 592, 594, 596, 598, 600, 603, 605, 607, 627, 628, 629, 634, 635, 636, 637, 638, 639, 642, 644, 647, 648, 649, 651, 662, 671, 704, 720, 721, 725, 774, 798, 804, 813, 817, 818, 833, 853, 856, 857, 884, 890, 963, 964, 969, 997, 1000, 1024, 1134, 1135, 1137, 1140, 1141, 1142, 1164, 1165, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1179, 1181, 1184, 1185, 1186, 1188, 1199, 1208, 1244, 1252, 1253, 1256, 1268, 1270], "AND": [692, 693, 753, 890], "AS": [256, 309, 753, 754, 845, 884, 1252, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270, 1272], "As": [12, 46, 84, 85, 116, 118, 119, 120, 122, 134, 138, 139, 147, 192, 266, 271, 309, 523, 764, 809, 884], "At": [41, 234, 309], "BY": [753, 845, 884, 1252, 1255, 1261, 1269, 1270], "Be": 884, "By": [12, 14, 30, 47, 129, 130, 143, 201, 215, 216, 241, 243, 252, 257, 279, 280, 309, 353, 414, 418, 431, 516, 519, 525, 585, 590, 593, 595, 597, 599, 601, 604, 606, 608, 614, 625, 689, 706, 708, 715, 716, 718, 719, 720, 734, 755, 761, 762, 763, 774, 795, 813, 817, 818, 835, 841, 846, 854, 884, 924, 991, 995, 1008, 1089, 1128, 1151, 1162, 1234, 1244], "For": [14, 35, 36, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 184, 189, 215, 216, 234, 241, 266, 295, 309, 312, 411, 412, 439, 441, 442, 453, 523, 532, 542, 582, 620, 627, 634, 635, 636, 638, 639, 662, 710, 720, 724, 725, 770, 774, 803, 818, 835, 868, 884, 888, 1017, 1019, 1020, 1023, 1103, 1125, 1158, 1164, 1171, 1172, 1173, 1175, 1176, 1199, 1223, 1244, 1248], "IF": 1263, "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 162, 170, 184, 189, 192, 199, 201, 203, 211, 212, 213, 216, 218, 219, 223, 230, 234, 241, 243, 244, 245, 249, 252, 254, 256, 259, 260, 263, 264, 266, 267, 273, 274, 276, 277, 278, 309, 321, 323, 346, 353, 358, 370, 392, 396, 397, 411, 412, 420, 423, 449, 464, 469, 481, 502, 511, 516, 517, 523, 531, 532, 538, 544, 545, 570, 575, 577, 580, 582, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 614, 616, 620, 621, 626, 635, 636, 638, 639, 640, 641, 651, 652, 653, 654, 656, 657, 658, 661, 662, 663, 664, 668, 671, 688, 692, 694, 697, 701, 702, 705, 706, 709, 710, 715, 716, 718, 719, 720, 723, 724, 730, 731, 732, 734, 736, 746, 749, 750, 751, 756, 761, 762, 764, 765, 774, 795, 796, 803, 805, 809, 813, 817, 818, 822, 826, 833, 835, 839, 841, 843, 845, 850, 852, 853, 868, 878, 884, 888, 890, 894, 895, 917, 924, 929, 939, 948, 965, 969, 970, 988, 989, 997, 1000, 1023, 1036, 1037, 1041, 1055, 1056, 1058, 1075, 1084, 1089, 1090, 1096, 1103, 1121, 1123, 1125, 1127, 1128, 1129, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1147, 1149, 1151, 1154, 1158, 1159, 1163, 1172, 1173, 1175, 1176, 1177, 1178, 1188, 1189, 1190, 1191, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1205, 1208, 1216, 1219, 1223, 1225, 1233, 1244, 1252, 1253, 1255, 1262, 1270], "In": [47, 54, 131, 133, 144, 145, 148, 159, 163, 168, 187, 189, 192, 201, 216, 219, 230, 234, 241, 267, 276, 309, 531, 532, 590, 774, 796, 809, 813, 835, 852, 884, 1016, 1023, 1124, 1244], "It": [42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 180, 226, 233, 256, 266, 271, 277, 278, 286, 295, 309, 312, 313, 384, 385, 418, 464, 532, 541, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 750, 751, 770, 774, 791, 795, 796, 800, 805, 822, 827, 845, 853, 860, 868, 884, 943, 958, 959, 995, 1037, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1146, 1148, 1223, 1228, 1244, 1248], "Its": [202, 309, 462, 774, 1035, 1244], "NO": [669, 890, 1206], "NOT": [119, 212, 250, 309, 523, 540, 613, 774, 840, 884, 1270], "No": [20, 669, 1206], "Not": [190, 309, 447, 476, 477, 774, 795, 807, 884, 1025, 1244], "ON": 1270, "OR": [694, 695, 809, 884, 890], "On": [684, 774], "One": [47, 180, 230, 234, 266, 271, 309, 322, 569, 696, 707, 723, 729, 732, 739, 741, 744, 745, 754, 774, 800, 884, 890, 960, 1244], "Or": [200, 201, 216, 241, 255, 279, 288, 309, 440, 570, 590, 623, 715, 716, 718, 719, 761, 762, 764, 770, 774, 812, 813, 818, 835, 844, 861, 884, 1018, 1244], "THERE": [669, 1206], "That": [135, 822, 884], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 87, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 159, 160, 161, 163, 165, 172, 180, 181, 183, 184, 185, 188, 189, 192, 199, 200, 201, 202, 207, 213, 216, 219, 226, 232, 241, 242, 243, 244, 247, 248, 249, 256, 266, 267, 272, 275, 279, 283, 284, 286, 287, 288, 295, 309, 320, 361, 362, 363, 364, 368, 369, 385, 387, 390, 391, 392, 400, 410, 414, 415, 418, 420, 431, 432, 443, 446, 449, 453, 454, 462, 494, 498, 531, 532, 544, 570, 577, 580, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 617, 620, 626, 630, 631, 634, 639, 640, 641, 645, 646, 647, 648, 656, 657, 658, 659, 660, 661, 662, 672, 675, 682, 683, 702, 704, 722, 726, 734, 736, 750, 751, 752, 753, 756, 764, 766, 767, 769, 770, 774, 775, 776, 779, 781, 782, 783, 790, 795, 800, 801, 803, 805, 806, 809, 812, 813, 814, 816, 818, 821, 822, 827, 831, 835, 837, 838, 839, 845, 849, 851, 856, 857, 860, 861, 868, 884, 888, 889, 890, 893, 896, 932, 933, 934, 938, 947, 959, 960, 963, 964, 965, 973, 987, 991, 992, 995, 997, 1008, 1009, 1023, 1024, 1027, 1035, 1067, 1071, 1103, 1121, 1123, 1127, 1128, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1155, 1158, 1163, 1167, 1168, 1176, 1177, 1178, 1182, 1183, 1184, 1185, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1225, 1229, 1236, 1238, 1240, 1244, 1245, 1249, 1250, 1251, 1252, 1257, 1270, 1271, 1273], "There": [669, 1206, 1270], "These": [1, 36, 125, 131, 132, 168, 273, 309, 431, 773, 774, 888, 995, 1008], "To": [35, 54, 190, 309, 374, 390, 391, 447, 448, 627, 633, 634, 635, 638, 647, 648, 657, 658, 659, 660, 669, 774, 807, 884, 948, 963, 964, 1025, 1164, 1170, 1171, 1172, 1175, 1184, 1185, 1206, 1225, 1244, 1270], "Will": [53, 54, 795, 796, 805, 831, 842, 884, 1244], "With": [138, 211, 252, 309, 353, 516, 614, 774, 795, 841, 884, 924, 1055, 1089, 1151, 1244], "_": [1, 47, 51, 234, 264, 268, 309, 346, 502, 628, 635, 637, 643, 644, 649, 652, 653, 842, 884, 942, 1165, 1172, 1180, 1181, 1186, 1190, 1220, 1244], "__call__": 770, "__dataframe__": 117, "__enter__": 1270, "__exit__": 1270, "__getattr__": 770, "__getitem__": 672, "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 156, 1270], "__name__": [214, 309], "_bar_": 725, "_btm_by_a": [369, 774], "_btm_by_b": [369, 774], "_by_ca": [369, 683, 774], "_by_cb": [369, 683, 774], "_df": [1, 48], "_diff": [283, 309, 856, 884], "_eager": [795, 884], "_expr": [1, 49], "_foo": 537, "_geventdataframeresult": [54, 796, 884], "_is_not_nan": [477, 774], "_is_odd": [247, 309, 837, 884], "_isnan": [476, 774], "_isnul": [479, 774], "_kwarg": [795, 884], "_ldf": 1, "_lf": 50, "_lower_boundari": [201, 309, 813, 884], "_max": [570, 774], "_mean_squar": [288, 861], "_min": [570, 774], "_not_nul": [478, 774], "_o": [643, 644, 1180, 1181], "_revers": [554, 558, 587, 774], "_right": [215, 216, 309, 817, 818, 884], "_suffix": 559, "_sum": [288, 861], "_top_by_a": [683, 774], "_top_by_b": [683, 774], "_train": [858, 884], "_upper_boundari": [201, 309, 813, 884], "_world": 725, "a1": [36, 48, 50, 309], "a101": 1273, "a123": [36, 309], "a2": [36, 48, 50, 309], "a_1": [653, 1190, 1220, 1244], "a_2": [1220, 1244], "a_3": [1220, 1244], "a_a": 754, "a_agg_list": [201, 309, 813, 884], "a_b_doubl": 721, "a_btm_by_a": [369, 774], "a_btm_by_b": [369, 774], "a_by_ca": [369, 683, 774], "a_by_cb": [369, 683, 774], "a_div_2": 1264, "a_div_5": 1264, "a_interpol": [468, 774], "a_is_even": [256, 309, 753, 845, 884], "a_isnul": [479, 774], "a_lag_": 704, "a_log2": 1264, "a_mod_2": 1264, "a_not_nul": [478, 774], "a_revers": [554, 558, 587, 774], "a_rol": 704, "a_suffix": 559, "a_times_2": [532, 774], "a_times_b": [531, 774], "a_top_by_a": [683, 774], "a_top_by_b": [683, 774], "a_txt": 754, "aa": [443, 627, 638, 722, 774, 890, 960, 1164, 1175, 1244, 1265], "aaa": [1, 36, 309, 627, 638, 672, 674, 890, 1164, 1175], "aaaa": [933, 934], "aabcdef": 658, "aad": [933, 934], "aag": 26, "aazz": 1265, "ab": [203, 218, 260, 283, 309, 672, 674, 774, 856, 884, 890, 1036, 1058, 1216, 1244, 1263, 1265], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 318, 635, 647, 657, 774, 890, 1172, 1184, 1185], "abc123": 1265, "abc456": [647, 1184, 1185, 1265], "abcabc": 648, "abcd": 1265, "abcdeff": 657, "abf": [133, 144, 145], "abl": [91, 131], "about": [91, 131, 620, 627, 634, 635, 638, 647, 648, 774, 888, 1158, 1164, 1171, 1172, 1175, 1184, 1185, 1244, 1273], "abov": [36, 152, 216, 234, 309, 764], "abs_a": 1264, "absolut": [133, 144, 145, 152, 153, 154, 155, 317, 439, 441, 442, 774, 892, 1017, 1019, 1020, 1244, 1264], "acc": [710, 711, 724, 748], "accent": 890, "accept": [127, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 159, 172, 182, 200, 247, 248, 252, 255, 272, 283, 284, 288, 309, 318, 369, 374, 443, 469, 570, 584, 585, 623, 675, 683, 691, 693, 695, 700, 703, 704, 705, 713, 722, 738, 740, 743, 752, 756, 758, 764, 770, 774, 790, 802, 812, 837, 838, 841, 844, 849, 856, 857, 861, 884, 888, 889, 948, 1041, 1127, 1128, 1151, 1244], "access": [37, 48, 49, 50, 51, 135, 139, 141, 143, 145, 146, 147, 148, 170, 176, 213, 242, 243, 256, 309, 636, 672, 797, 845, 858, 884, 889, 1173, 1273], "accord": [242, 309, 577, 715, 716, 718, 719, 761, 762, 774, 978, 1121, 1244], "accordingli": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142], "account": [36, 123, 132, 145, 309, 414, 439, 441, 442, 774, 991, 1017, 1019, 1020, 1244], "accumul": [710, 711, 724, 748], "acg": 26, "achiev": [219, 234, 295, 309, 532, 644, 774, 1103, 1181, 1244], "aco": 1263, "acosd": 1263, "across": [36, 47, 132, 181, 202, 221, 223, 228, 249, 259, 309, 387, 462, 544, 693, 695, 710, 711, 713, 738, 740, 743, 758, 774, 801, 839, 884, 1035, 1244], "action": [35, 309], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 495, 635, 1068, 1172], "actual": [36, 119, 159, 163, 244, 309, 1153, 1244, 1265, 1272], "ad": [34, 36, 119, 134, 201, 256, 266, 271, 273, 278, 283, 284, 309, 324, 446, 538, 675, 710, 711, 753, 774, 813, 845, 853, 856, 857, 884, 890, 1024, 1223, 1228, 1244], "adbc": [34, 131, 132, 309], "adbc_driver_manag": 151, "adbc_ingest": [34, 309], "add": [35, 36, 130, 189, 201, 219, 283, 284, 285, 286, 309, 385, 556, 557, 558, 559, 577, 675, 720, 724, 764, 774, 813, 817, 856, 857, 858, 859, 860, 884, 1023, 1244], "add_calendar_dai": 720, "add_calendar_month": 720, "add_calendar_year": 720, "add_chart": [36, 309], "add_dai": 720, "add_format": [36, 309], "add_hour": 720, "add_milli": 720, "add_second": 720, "add_seri": [36, 309], "add_week": 720, "add_worksheet": [36, 309], "addit": [29, 32, 34, 35, 36, 119, 128, 133, 134, 144, 145, 157, 159, 161, 163, 184, 188, 200, 217, 232, 247, 248, 255, 268, 275, 283, 284, 288, 309, 318, 401, 443, 446, 570, 623, 627, 634, 635, 638, 647, 648, 672, 675, 700, 703, 704, 705, 722, 752, 753, 756, 770, 774, 806, 812, 837, 838, 844, 851, 856, 857, 861, 884, 890, 966, 974, 1024, 1164, 1171, 1172, 1175, 1184, 1185, 1226, 1244, 1248, 1253, 1270], "addition": [55, 242, 309, 890], "address": 635, "adjac": [36, 309], "adjust": [439, 441, 442, 620, 774, 1017, 1019, 1020, 1158, 1244], "adl": [133, 144, 145], "adlf": 145, "advanc": [36, 234, 309, 358, 523, 553, 556, 558, 560, 561, 929, 1096, 1273], "advantag": [36, 168, 233, 309], "advis": [36, 46, 85, 309], "aedt": 717, "aeiuo": [638, 1175], "af1": 47, "af2": 47, "af3": 47, "affect": [34, 152, 153, 154, 155, 309], "afm": 145, "afoo": [858, 884], "after": [36, 55, 119, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 172, 189, 272, 275, 309, 368, 369, 443, 570, 580, 671, 682, 683, 774, 790, 849, 851, 884, 938, 1023, 1123, 1208, 1229, 1244, 1258], "afterward": [46, 764], "ag": [226, 309, 827, 884, 1271], "again": [532, 774], "against": [34, 93, 129, 131, 192, 256, 309, 495, 638, 753, 809, 845, 884, 1068, 1175, 1252, 1270, 1272, 1273], "agg": [200, 201, 234, 241, 309, 319, 369, 449, 451, 456, 459, 531, 532, 570, 622, 623, 683, 690, 736, 774, 795, 796, 805, 812, 813, 831, 835, 842, 884, 890], "agg_group": [727, 774], "agg_list": [531, 774], "aggreg": [129, 130, 133, 141, 194, 200, 201, 220, 222, 224, 227, 230, 234, 235, 236, 241, 257, 258, 277, 280, 288, 289, 291, 293, 309, 319, 449, 465, 531, 532, 570, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 692, 693, 694, 695, 710, 711, 712, 713, 724, 729, 737, 738, 740, 742, 743, 748, 757, 758, 774, 813, 822, 823, 824, 825, 828, 829, 832, 835, 846, 847, 854, 861, 862, 864, 866, 884, 888, 1038, 1133, 1134, 1135, 1137, 1140, 1141, 1142, 1244, 1259, 1261, 1263, 1269], "aggregate_funct": [234, 309, 890], "aho": [628, 637, 649, 1165, 1174, 1186], "aiosqlit": 131, "alchemy_conn": 131, "algorithm": [171, 309, 325, 628, 637, 649, 696, 774, 789, 884, 1165, 1174, 1186], "alia": [1, 12, 47, 49, 51, 83, 176, 201, 218, 234, 241, 275, 283, 286, 309, 318, 322, 362, 363, 364, 365, 367, 368, 379, 380, 381, 382, 383, 385, 388, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 430, 431, 432, 433, 434, 437, 438, 451, 453, 458, 460, 466, 469, 472, 475, 483, 485, 507, 519, 525, 530, 532, 536, 538, 540, 542, 546, 549, 551, 553, 564, 565, 569, 571, 575, 577, 580, 582, 610, 612, 627, 628, 629, 630, 632, 634, 635, 637, 638, 639, 643, 644, 649, 650, 651, 652, 653, 654, 655, 659, 660, 662, 672, 673, 674, 676, 681, 682, 684, 690, 691, 697, 698, 699, 703, 704, 705, 715, 718, 720, 721, 724, 725, 730, 733, 735, 736, 748, 756, 761, 764, 774, 813, 815, 821, 835, 851, 856, 860, 884, 959, 966, 967, 970, 973, 974, 975, 976, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1058, 1121, 1126, 1171, 1172, 1190, 1191, 1244], "alias": [256, 309, 538, 845, 884], "alic": [129, 1271], "align": [10, 15, 16, 36, 47, 55, 309, 1271], "align_fram": 55, "all": [1, 4, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 102, 104, 116, 121, 126, 129, 130, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 156, 157, 160, 163, 168, 171, 173, 180, 182, 184, 191, 203, 208, 210, 212, 213, 214, 215, 217, 218, 223, 225, 229, 230, 234, 237, 242, 243, 244, 248, 254, 255, 259, 260, 264, 266, 267, 271, 274, 276, 277, 278, 279, 284, 286, 309, 322, 324, 346, 361, 369, 378, 384, 390, 391, 392, 393, 443, 448, 454, 461, 462, 465, 467, 471, 474, 478, 479, 484, 494, 495, 502, 520, 523, 531, 550, 553, 554, 556, 557, 558, 559, 560, 561, 568, 580, 585, 587, 591, 615, 621, 623, 629, 635, 636, 639, 642, 648, 656, 657, 658, 662, 683, 693, 702, 710, 711, 712, 713, 722, 724, 729, 730, 733, 740, 748, 756, 757, 758, 764, 770, 774, 780, 786, 789, 792, 795, 796, 800, 802, 803, 805, 808, 817, 822, 826, 831, 838, 842, 843, 844, 850, 852, 853, 857, 858, 860, 884, 890, 917, 958, 960, 963, 964, 965, 966, 1036, 1042, 1054, 1058, 1067, 1068, 1075, 1093, 1096, 1123, 1128, 1133, 1159, 1166, 1172, 1173, 1176, 1179, 1185, 1193, 1194, 1195, 1199, 1216, 1225, 1244, 1253, 1255, 1260, 1261, 1265, 1269, 1270, 1272, 1273], "all_compat": 1255, "all_data": 1270, "all_horizont": [184, 309, 692, 803, 884], "all_stat": 30, "alloc": [129, 130, 187, 237, 309, 774, 888, 1016, 1244], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 93, 117, 131, 134, 143, 146, 147, 148, 149, 156, 159, 160, 163, 170, 213, 216, 217, 242, 243, 245, 267, 268, 271, 274, 287, 309, 414, 420, 423, 511, 531, 532, 538, 582, 611, 661, 663, 664, 774, 817, 818, 822, 826, 850, 852, 858, 884, 888, 890, 991, 997, 1000, 1084, 1103, 1125, 1145, 1198, 1200, 1201, 1225, 1226, 1244, 1265, 1273], "allow_alias": 538, "allow_chunk": [159, 163], "allow_copi": [117, 170, 267, 309, 1225, 1244], "allow_dupl": [577, 774, 1121, 1244], "allow_infin": [159, 163], "allow_nul": [156, 159, 163, 1273], "allow_object": 734, "allow_parallel": [216, 309, 817, 818, 884], "allow_pyarrow_filt": 149, "allow_time_zon": [159, 160, 163], "allowed_dtyp": [159, 160, 163, 1273], "almost": [54, 219, 295, 309, 661, 663, 664, 796, 884, 1103, 1198, 1200, 1201, 1244], "alpha": [439, 441, 442, 774, 805, 831, 842, 884, 890, 1017, 1019, 1020, 1244], "alpha_i": [440, 774, 1018, 1244], "alphabet": [890, 1273], "alphanumer": 890, "alreadi": [34, 35, 92, 266, 309, 384, 495, 688, 774, 842, 884, 958, 1068, 1233, 1244], "also": [27, 33, 36, 42, 46, 119, 131, 134, 135, 140, 143, 158, 159, 162, 163, 168, 185, 200, 201, 226, 230, 234, 241, 243, 247, 255, 266, 278, 283, 286, 309, 380, 383, 392, 414, 417, 449, 469, 532, 538, 580, 584, 585, 623, 647, 648, 656, 657, 672, 702, 710, 711, 714, 717, 724, 726, 748, 764, 773, 774, 780, 812, 813, 827, 835, 837, 844, 853, 856, 858, 860, 884, 890, 965, 994, 1041, 1123, 1127, 1128, 1166, 1184, 1185, 1193, 1244, 1248, 1253, 1255, 1258, 1265, 1268, 1270, 1271], "altern": [36, 309, 770, 1262], "although": [256, 309, 845, 884], "alwai": [13, 33, 35, 42, 63, 65, 129, 172, 192, 200, 215, 216, 219, 272, 295, 309, 368, 369, 531, 541, 661, 682, 683, 764, 774, 790, 809, 817, 818, 822, 849, 884, 890, 938, 1103, 1198, 1229, 1244, 1252, 1253, 1270, 1273], "am": [650, 1187], "amarillo": 1265, "ambigu": [417, 418, 431, 661, 664, 717, 994, 995, 1008, 1198, 1201], "america": 718, "amount": [46, 64, 85, 139, 143, 146, 147, 532, 720, 774, 1260], "amsterdam": [417, 994], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 89, 93, 96, 99, 106, 108, 116, 118, 119, 122, 129, 130, 131, 132, 133, 134, 136, 139, 140, 141, 143, 145, 146, 147, 148, 157, 159, 163, 173, 174, 175, 176, 182, 187, 190, 194, 196, 201, 212, 213, 214, 216, 219, 230, 234, 239, 241, 242, 246, 256, 261, 267, 271, 273, 277, 278, 283, 286, 295, 309, 320, 342, 345, 357, 363, 380, 381, 382, 383, 384, 385, 392, 396, 397, 414, 417, 420, 434, 440, 448, 449, 455, 456, 459, 492, 495, 498, 500, 522, 523, 531, 532, 542, 544, 553, 554, 575, 576, 577, 585, 586, 590, 591, 592, 594, 596, 598, 600, 603, 605, 607, 626, 627, 630, 635, 638, 641, 661, 663, 664, 666, 668, 684, 692, 697, 701, 715, 716, 718, 719, 721, 723, 726, 730, 731, 732, 733, 734, 746, 748, 749, 752, 756, 761, 762, 764, 765, 770, 774, 792, 793, 794, 796, 800, 802, 805, 809, 813, 818, 822, 831, 835, 836, 842, 845, 853, 856, 858, 860, 868, 884, 888, 889, 890, 913, 916, 928, 933, 947, 949, 954, 955, 956, 957, 958, 965, 969, 997, 1011, 1016, 1018, 1055, 1065, 1068, 1071, 1073, 1095, 1103, 1128, 1129, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1146, 1148, 1163, 1164, 1167, 1172, 1175, 1178, 1198, 1200, 1201, 1203, 1205, 1225, 1244, 1261, 1262, 1265, 1269, 1270, 1272], "ana": [650, 1187], "anan": [650, 1187], "ananab": 1265, "and_": 774, "ang": 1265, "angl": [698, 699], "ani": [4, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 116, 117, 118, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 172, 178, 184, 189, 191, 192, 194, 196, 211, 213, 214, 215, 216, 219, 223, 233, 242, 243, 244, 256, 259, 262, 263, 266, 267, 268, 271, 272, 274, 277, 278, 286, 309, 312, 313, 318, 321, 322, 346, 368, 369, 370, 384, 385, 418, 419, 437, 438, 448, 449, 453, 456, 458, 460, 464, 473, 483, 490, 495, 502, 530, 531, 532, 538, 546, 549, 551, 553, 554, 556, 558, 560, 561, 564, 565, 569, 574, 577, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 626, 628, 640, 657, 658, 659, 660, 661, 663, 664, 666, 668, 676, 682, 683, 684, 691, 692, 693, 695, 705, 706, 707, 734, 736, 750, 751, 764, 774, 790, 795, 796, 803, 805, 808, 809, 817, 818, 830, 845, 849, 850, 853, 860, 884, 888, 890, 894, 917, 938, 943, 958, 959, 995, 996, 1023, 1026, 1030, 1037, 1046, 1055, 1063, 1068, 1075, 1103, 1121, 1127, 1128, 1129, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1146, 1147, 1163, 1165, 1177, 1198, 1200, 1201, 1203, 1205, 1223, 1224, 1225, 1226, 1228, 1229, 1244, 1248, 1270, 1273], "anna": [226, 309, 827, 884], "anoth": [86, 158, 173, 181, 186, 200, 216, 249, 309, 384, 387, 394, 468, 498, 536, 540, 544, 584, 593, 595, 597, 599, 601, 604, 606, 608, 638, 774, 792, 801, 812, 839, 858, 884, 958, 967, 1015, 1023, 1040, 1071, 1127, 1128, 1175, 1244, 1264, 1265], "anti": [215, 309, 817, 868, 884, 1146, 1148, 1244, 1259], "any_horizont": 694, "anyth": [35, 242, 309], "anywher": [365, 367, 661, 663, 664, 1198, 1200, 1201], "ap": 1265, "apach": [31, 37, 38, 41, 127, 131, 132, 135, 137, 145, 309], "apaya": [662, 1199], "api": [0, 117, 139, 141, 143, 146, 147, 148, 149, 170, 219, 295, 309, 532, 736, 774, 868, 1103, 1244, 1269], "apia": [393, 966], "app": [655, 1192], "appear": [36, 59, 119, 154, 155, 309, 686, 774, 890, 1231, 1244, 1271], "append": [34, 35, 159, 189, 215, 216, 309, 581, 764, 774, 817, 818, 884, 1023, 1244], "appl": [177, 205, 215, 238, 239, 262, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 309, 369, 587, 632, 655, 683, 774, 817, 833, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 884, 1169, 1192, 1259, 1265], "appli": [10, 20, 33, 36, 42, 55, 131, 143, 156, 159, 163, 180, 194, 219, 233, 255, 256, 266, 295, 309, 334, 395, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 413, 415, 416, 419, 421, 432, 433, 435, 441, 442, 531, 532, 574, 592, 593, 594, 595, 598, 599, 605, 606, 623, 647, 648, 661, 663, 664, 668, 700, 710, 711, 724, 735, 736, 748, 753, 764, 774, 800, 814, 821, 822, 830, 844, 845, 868, 884, 948, 968, 971, 972, 973, 976, 977, 978, 982, 983, 984, 986, 987, 990, 992, 993, 996, 998, 1009, 1010, 1012, 1019, 1020, 1103, 1134, 1135, 1137, 1141, 1184, 1185, 1198, 1200, 1201, 1205, 1244, 1252], "applic": [267, 309, 532, 774], "appropri": [36, 149, 192, 267, 309, 580, 774, 809, 884, 1123, 1244], "approx": [325, 774], "approx_n_uniqu": [309, 774, 884], "approxim": [41, 171, 309, 325, 440, 696, 774, 789, 884, 1018, 1244, 1264, 1273], "april": [420, 423, 997, 1000, 1265, 1266], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 91, 97, 113, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 159, 160, 161, 163, 168, 170, 172, 178, 180, 184, 187, 190, 192, 193, 194, 199, 200, 201, 213, 215, 216, 217, 219, 225, 226, 232, 234, 241, 242, 243, 244, 247, 248, 250, 252, 255, 262, 266, 267, 268, 271, 272, 276, 278, 279, 283, 284, 287, 288, 309, 321, 323, 337, 353, 358, 368, 369, 374, 380, 382, 383, 392, 418, 431, 436, 438, 439, 440, 441, 442, 447, 449, 469, 471, 473, 474, 476, 477, 478, 479, 481, 486, 516, 523, 531, 565, 570, 577, 580, 583, 584, 585, 586, 590, 593, 595, 597, 599, 601, 602, 604, 606, 608, 614, 617, 620, 622, 623, 636, 639, 641, 642, 645, 646, 647, 648, 651, 662, 664, 666, 671, 675, 677, 682, 683, 692, 693, 695, 700, 703, 704, 705, 706, 709, 713, 715, 716, 718, 719, 738, 740, 743, 752, 756, 758, 761, 762, 764, 766, 767, 769, 773, 774, 775, 776, 779, 780, 781, 782, 783, 786, 790, 795, 796, 800, 803, 807, 809, 812, 813, 814, 817, 818, 821, 822, 826, 827, 831, 833, 835, 837, 838, 840, 841, 844, 849, 852, 853, 856, 857, 858, 861, 884, 888, 890, 894, 895, 908, 924, 929, 938, 941, 948, 956, 957, 965, 995, 1008, 1014, 1016, 1017, 1018, 1019, 1020, 1025, 1027, 1028, 1041, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1056, 1059, 1089, 1096, 1121, 1123, 1127, 1128, 1129, 1139, 1151, 1155, 1158, 1173, 1176, 1178, 1182, 1183, 1184, 1185, 1188, 1199, 1201, 1203, 1208, 1215, 1223, 1225, 1226, 1229, 1236, 1238, 1240, 1244, 1245, 1249, 1250, 1251, 1253, 1255, 1258, 1262, 1270, 1273], "arbitrari": [74, 196, 309, 387, 774, 801, 884, 890], "arbitrarili": [219, 309], "arcco": [774, 1244], "arccosh": [774, 1244], "arcsin": [774, 1244], "arcsinh": [774, 1244], "arctan": [698, 699, 774, 1244], "arctan2": 699, "arctanh": [774, 1244], "aren": [33, 42, 309, 884], "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 192, 233, 309, 334, 574, 700, 725, 774, 809, 830, 884, 888, 1103, 1244, 1256], "arg_max": [774, 1244], "arg_min": [774, 1244], "arg_sort": [774, 1244], "arg_tru": [701, 774, 1244], "arg_uniqu": [774, 1244], "arg_wher": [335, 774], "argmax": [531, 774], "argument": [32, 35, 41, 128, 129, 133, 141, 143, 144, 159, 161, 163, 178, 182, 188, 200, 201, 216, 232, 233, 241, 247, 248, 255, 268, 275, 279, 283, 284, 288, 309, 418, 431, 443, 449, 469, 531, 570, 574, 590, 623, 656, 657, 658, 675, 692, 698, 699, 700, 703, 704, 705, 707, 709, 722, 752, 756, 764, 770, 774, 802, 806, 812, 813, 830, 835, 837, 838, 844, 851, 856, 857, 861, 884, 888, 890, 995, 1008, 1041, 1193, 1194, 1195, 1226, 1244, 1264, 1265], "aris": 131, "arithmet": [194, 309], "arm": 151, "arm64": 151, "around": [33, 42, 309, 884], "arr": [267, 309, 766, 1225, 1236, 1244], "arr_bar": 1261, "arr_foo": 1261, "arrai": [116, 120, 129, 130, 133, 141, 187, 188, 261, 266, 267, 268, 309, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 380, 381, 382, 383, 490, 505, 506, 507, 508, 510, 519, 520, 522, 525, 527, 531, 586, 592, 594, 596, 598, 600, 603, 605, 607, 613, 721, 753, 774, 806, 884, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 954, 955, 956, 957, 962, 1016, 1063, 1078, 1079, 1080, 1081, 1083, 1091, 1092, 1093, 1095, 1098, 1100, 1101, 1129, 1134, 1135, 1137, 1140, 1141, 1142, 1149, 1153, 1219, 1223, 1225, 1226, 1244, 1263, 1269, 1272], "array_agg": 1263, "array_contain": 1263, "array_get": 1263, "array_length": 1263, "array_low": 1263, "array_mean": 1263, "array_revers": 1263, "array_sum": 1263, "array_to_str": 1263, "array_uniqu": 1263, "array_upp": 1263, "arraylik": [962, 1244], "arrow": [37, 38, 43, 116, 131, 132, 135, 137, 146, 213, 243, 244, 261, 263, 267, 309, 884, 1219, 1225, 1244], "arrowinvaliderror": [35, 309], "as_dict": [130, 232, 309], "as_expr": 890, "as_seri": [173, 262, 309, 792, 884, 890], "ascend": [201, 241, 309, 590, 774, 813, 835, 884], "ascii": [7, 20, 628, 637, 639, 643, 644, 649, 651, 662, 671, 890, 1165, 1174, 1176, 1180, 1181, 1186, 1188, 1199, 1208], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [628, 637, 649, 1165, 1174, 1186], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1273, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 890, "ascii_uppercas": [277, 309], "asd": [629, 635, 1166, 1172], "asia": [123, 890, 971, 972, 998], "asin": 1263, "asind": 1263, "asof": [216, 309, 818, 884], "asof_join": [216, 309], "asofjoinstrategi": [216, 309, 818, 884], "assert": [152, 153, 154, 155, 159, 163, 241, 309, 786, 890], "assert_frame_equ": [153, 154, 186, 309, 1273], "assert_frame_not_equ": [152, 155], "assert_series_equ": [152, 155, 1015, 1244, 1273], "assert_series_not_equ": [153, 154], "assert_someth": 157, "assertionerror": [152, 153, 154, 155], "assign": [157, 201, 294, 309, 358, 523, 570, 580, 653, 654, 774, 813, 867, 884, 929, 1096, 1123, 1190, 1191, 1244], "associ": [34, 36, 47, 132, 134, 158, 161, 244, 309, 889, 1254, 1256], "assum": [244, 309, 822, 868, 884, 1265], "assumpt": [531, 774], "async": [131, 796, 884], "async_engin": 131, "asynchron": [54, 131, 796, 884], "asyncio": [54, 131, 796, 884], "asyncresult": [54, 796, 884], "ata": 26, "atan": 1263, "atan2": [698, 699, 1263], "atan2_ab": 1267, "atan2d": [699, 1263], "atan2d_ab": 1267, "atand": 1263, "atg": 26, "atgataaaggag": 26, "atol": [152, 153, 154, 155], "attain": [623, 774], "attempt": [1, 387, 774, 801, 884], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 156, 309, 766, 767, 769, 770, 775, 776, 779, 781, 782, 783, 884, 1236, 1238, 1240, 1244, 1245, 1249, 1250, 1251], "attributeerror": 1, "audi": [262, 309, 587, 774], "australia": 717, "authent": [35, 133, 141, 143, 144, 145, 146, 148, 309], "author": 1, "auto": [55, 116, 118, 119, 120, 122, 138, 139, 141, 147, 148, 273, 309, 884, 1273], "auto_structifi": [247, 283, 309, 837, 856, 884], "autofilt": [36, 309], "autofit": [36, 309], "autogener": [129, 130, 143], "automat": [8, 33, 42, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 141, 143, 146, 147, 159, 163, 165, 247, 256, 283, 309, 531, 585, 656, 657, 658, 753, 774, 837, 845, 856, 884, 888, 1127, 1128, 1193, 1194, 1195, 1228, 1244, 1253, 1255, 1258, 1270], "autumn": [647, 648], "avail": [36, 41, 45, 125, 131, 132, 133, 144, 145, 157, 168, 234, 256, 308, 309, 580, 753, 766, 767, 769, 773, 774, 775, 776, 779, 780, 781, 782, 783, 786, 845, 882, 883, 884, 888, 890, 960, 1123, 1236, 1238, 1240, 1244, 1245, 1249, 1250, 1251], "available_timezon": [62, 890], "averag": [36, 309, 439, 440, 441, 442, 580, 774, 1017, 1018, 1019, 1020, 1123, 1244, 1260], "avg": 1263, "avocado": 1265, "avoid": [133, 159, 163, 192, 243, 309, 320, 774, 809, 884], "avro": [31, 127, 309, 786], "avrocompress": [31, 309], "aw": [133, 139, 141, 143, 144, 146, 147, 148], "awai": 1264, "await": [54, 131, 796, 879, 884], "awar": [10, 131, 213, 243, 244, 263, 309, 440, 628, 637, 649, 664, 774, 884, 1018, 1165, 1174, 1186, 1201, 1244], "aws_access_key_id": [35, 133, 144, 148, 309], "aws_region": [35, 144, 148, 309], "aws_secret_access_kei": [35, 133, 144, 148, 309], "axi": [225, 276, 309, 698, 699, 826, 852, 884], "aya": [651, 1188, 1199], "az": [133, 144, 145], "azur": [35, 133, 139, 141, 143, 144, 145, 146, 147, 148, 309], "azure_storage_account_kei": [133, 144, 145], "azure_storage_account_nam": [133, 144, 145], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 88, 91, 116, 117, 118, 119, 120, 121, 122, 123, 129, 131, 134, 170, 171, 172, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 252, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 309, 318, 320, 321, 323, 324, 334, 336, 341, 346, 361, 362, 363, 364, 365, 366, 367, 369, 370, 378, 385, 389, 420, 423, 443, 445, 447, 448, 449, 451, 454, 461, 462, 465, 467, 468, 469, 471, 474, 476, 477, 478, 479, 484, 490, 495, 502, 512, 513, 514, 515, 531, 532, 537, 544, 550, 553, 554, 555, 556, 557, 558, 559, 567, 568, 570, 574, 577, 580, 584, 585, 587, 589, 615, 621, 623, 630, 633, 638, 641, 647, 648, 672, 673, 683, 686, 690, 692, 693, 694, 695, 696, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 721, 722, 723, 724, 725, 728, 729, 730, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 750, 751, 753, 755, 756, 757, 758, 759, 763, 770, 774, 789, 790, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 884, 890, 893, 896, 917, 932, 933, 934, 935, 936, 937, 941, 942, 943, 959, 962, 997, 1000, 1014, 1015, 1016, 1023, 1026, 1041, 1046, 1063, 1085, 1086, 1087, 1088, 1121, 1126, 1167, 1170, 1175, 1178, 1184, 1185, 1209, 1211, 1212, 1214, 1226, 1231, 1244, 1253, 1255, 1256, 1258, 1259, 1260, 1261, 1265, 1266, 1267, 1270], "b1": [48, 50], "b2": [48, 50], "b345": [36, 309], "b4": [36, 309], "b_b": [256, 309], "b_btm_by_a": [369, 774], "b_btm_by_b": [369, 774], "b_by_ca": [369, 683, 774], "b_by_cb": [369, 683, 774], "b_is_not_nan": [477, 774], "b_isnan": [476, 774], "b_isnul": [479, 774], "b_not_nul": [478, 774], "b_revers": [554, 558, 587, 774], "b_suffix": 559, "b_sum": [288, 861], "b_top_by_a": [683, 774], "b_top_by_b": [683, 774], "ba": [387, 443, 544, 655, 722, 774, 890], "back": [4, 47, 189, 201, 249, 267, 268, 309, 544, 570, 669, 774, 795, 813, 839, 884, 1023, 1206, 1226, 1244], "backend": [35, 131, 132, 133, 144, 145, 309], "background": [309, 313, 795, 883, 884], "backward": [41, 45, 191, 216, 309, 361, 392, 412, 448, 774, 808, 818, 884, 965, 989, 1026, 1244], "backward_fil": [454, 614, 774], "bad": [647, 648, 1184, 1185], "balanc": [162, 164, 1273], "ballon_dor": [634, 636, 1171, 1173], "banana": [177, 262, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 369, 587, 632, 655, 683, 774, 864, 866, 869, 870, 871, 872, 873, 874, 875, 1265], "banded_column": [36, 309], "banded_row": [36, 309], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 173, 176, 177, 178, 182, 183, 184, 185, 186, 189, 192, 194, 196, 197, 198, 203, 205, 206, 207, 209, 215, 218, 219, 220, 221, 222, 223, 224, 227, 228, 231, 234, 236, 238, 239, 242, 245, 246, 247, 249, 254, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 274, 275, 280, 281, 282, 287, 309, 371, 387, 466, 536, 538, 540, 541, 542, 543, 544, 545, 546, 620, 629, 631, 633, 635, 636, 650, 652, 654, 659, 660, 696, 706, 707, 708, 723, 728, 729, 732, 733, 737, 739, 741, 742, 744, 745, 752, 755, 759, 763, 764, 770, 774, 792, 797, 798, 802, 803, 804, 809, 815, 816, 817, 829, 833, 836, 837, 850, 851, 855, 884, 889, 890, 940, 1075, 1158, 1166, 1168, 1170, 1172, 1173, 1187, 1191, 1196, 1197, 1244, 1257, 1259, 1260, 1261, 1262, 1265, 1268], "bar2": 1265, "bar22": [194, 309], "bar_": 652, "bar_3": [264, 309], "bar_4": [264, 309], "bar_a": [234, 309], "bar_at_2": 1261, "bar_avg": 1260, "bar_b": [234, 309], "bar_color": [36, 309], "bar_max": 1260, "bar_median": 1260, "bar_min": 1260, "bar_negative_border_color_sam": [36, 309], "bar_negative_color_sam": [36, 309], "bar_std": 1260, "bar_sum": 1260, "bar_var": 1260, "bare": [538, 890], "base": [36, 60, 102, 104, 161, 184, 192, 201, 241, 309, 393, 401, 436, 439, 440, 441, 442, 449, 464, 468, 526, 527, 531, 532, 575, 577, 585, 590, 593, 595, 597, 599, 601, 604, 606, 608, 666, 774, 803, 809, 813, 835, 884, 890, 966, 974, 1014, 1017, 1018, 1019, 1020, 1037, 1040, 1099, 1100, 1103, 1121, 1127, 1128, 1203, 1235, 1244, 1259, 1264, 1273], "base64": [363, 364, 630, 631, 933, 934, 1167, 1168], "base_nam": [273, 309], "base_utc_offset": [401, 974], "baseexcept": 1270, "basi": [36, 134, 159, 309], "basic": [36, 309, 1273], "basic_chart": [36, 309], "batch": [38, 53, 54, 125, 130, 131, 137, 139, 147, 149, 243, 271, 309, 795, 796, 822, 884], "batch_siz": [33, 42, 129, 130, 131, 139, 147, 149, 271, 309, 884], "batchedcsvread": 130, "baz": [196, 206, 207, 275, 309, 636, 652, 654, 723, 732, 745, 770, 816, 851, 884, 890, 1173, 1191, 1257, 1262, 1265], "bb": [890, 960, 1244, 1265, 1270], "bbb": [1, 36, 309, 672, 674, 890], "bc": [638, 648, 757, 1175], "bcbc45": 1265, "bea": 12, "bear": 890, "beauti": 12, "becaus": [139, 147, 187, 201, 217, 219, 277, 295, 309, 453, 495, 774, 813, 868, 884, 1016, 1068, 1103, 1244], "becom": [161, 308, 882, 883], "bed3": [36, 309], "been": [30, 36, 166, 170, 290, 309, 455, 532, 547, 580, 774, 863, 1123, 1244], "beetl": [262, 309, 587, 774], "befor": [36, 61, 62, 129, 131, 134, 143, 149, 152, 153, 154, 155, 165, 168, 189, 201, 216, 256, 266, 271, 275, 309, 382, 383, 384, 531, 570, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 633, 671, 677, 704, 750, 751, 774, 813, 815, 818, 851, 884, 888, 956, 957, 958, 1023, 1117, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1170, 1208, 1215, 1244, 1259], "beforehand": [661, 663, 664, 1198, 1200, 1201], "begin": [12, 36, 309, 439, 441, 442, 634, 662, 774, 1017, 1019, 1020, 1171, 1199, 1244], "behav": [192, 309, 449, 532, 657, 658, 774, 809, 884], "behavior": [41, 45, 184, 192, 215, 216, 309, 345, 455, 498, 500, 633, 723, 732, 774, 803, 809, 817, 818, 884, 916, 1071, 1073, 1170], "behaviour": [10, 47, 55, 184, 256, 309, 627, 634, 635, 638, 647, 648, 684, 753, 774, 803, 845, 884, 1164, 1171, 1172, 1175, 1184, 1185], "behind": 165, "being": [13, 42, 43, 44, 45, 53, 54, 63, 65, 126, 129, 130, 131, 141, 143, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 173, 188, 256, 264, 266, 271, 277, 278, 309, 312, 313, 384, 385, 418, 464, 532, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 633, 702, 721, 750, 751, 774, 792, 795, 796, 805, 806, 845, 853, 884, 943, 958, 959, 995, 1037, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1170, 1220, 1223, 1228, 1244, 1248, 1273], "belong": [1, 201, 309, 813, 884], "below": [19, 35, 133, 134, 144, 145, 184, 192, 234, 309, 448, 639, 662, 715, 716, 718, 719, 761, 762, 764, 770, 774, 803, 809, 884, 1176, 1199], "benchmark": 129, "best": [219, 295, 309, 532, 774, 1103, 1244], "better": [219, 266, 267, 295, 309, 532, 644, 774, 791, 868, 884, 1146, 1148, 1181, 1244], "between": [24, 55, 87, 156, 157, 159, 163, 178, 236, 243, 301, 309, 346, 370, 388, 389, 469, 493, 502, 512, 513, 514, 515, 571, 577, 578, 600, 601, 626, 640, 698, 699, 702, 706, 708, 747, 750, 751, 774, 832, 874, 884, 917, 939, 942, 961, 962, 1041, 1066, 1075, 1085, 1086, 1087, 1088, 1117, 1121, 1122, 1138, 1163, 1177, 1244, 1267], "between_ab": [469, 774], "bia": [441, 442, 481, 602, 620, 774, 1019, 1020, 1056, 1139, 1158, 1244], "bias": [481, 620, 774, 1056, 1158, 1244], "big": 130, "big_fil": 130, "bigidx": 124, "bigqueri": 132, "bin": [385, 464, 577, 666, 691, 767, 774, 959, 1037, 1121, 1203, 1238, 1244], "bin_count": [464, 774, 1037, 1244], "bin_i": [691, 774], "bin_x": [691, 774], "bin_xor_xi": [691, 774], "binari": [37, 131, 181, 249, 309, 362, 363, 364, 365, 366, 367, 387, 544, 630, 774, 801, 839, 884, 890, 932, 933, 935, 936, 937, 1167], "binary_str": [691, 774], "bind": 134, "birthdai": 129, "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 582, 627, 774, 1125, 1164, 1244, 1265], "bit_length": 1263, "bitmap": [187, 309, 1016, 1244], "bitwis": [322, 569, 691, 692, 693, 694, 695, 774], "bla": [629, 635, 1166, 1172], "black": [219, 309, 362, 363, 364, 365, 367], "blindli": [495, 1068], "block": [20, 54, 200, 274, 309, 764, 796, 812, 833, 850, 859, 860, 868, 884, 1146, 1148, 1244], "blue": [46, 84, 85, 362, 363, 364, 365, 367, 688, 774, 1233, 1244], "bob": [129, 226, 309, 827, 884, 1271], "bodi": [36, 309, 313], "bold": [36, 309], "bom": [33, 42, 309, 884], "bool": [7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 172, 173, 174, 175, 180, 182, 186, 191, 192, 193, 194, 198, 199, 200, 201, 205, 206, 208, 209, 210, 213, 215, 216, 223, 232, 234, 242, 243, 244, 245, 250, 253, 255, 256, 259, 262, 264, 267, 268, 272, 273, 274, 275, 278, 279, 281, 283, 291, 293, 296, 299, 309, 320, 321, 322, 323, 324, 334, 337, 338, 341, 345, 346, 354, 359, 362, 363, 365, 367, 369, 370, 379, 380, 381, 382, 383, 384, 385, 392, 404, 419, 436, 437, 438, 439, 441, 442, 458, 460, 461, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 491, 495, 498, 500, 502, 511, 518, 524, 530, 531, 532, 536, 537, 538, 539, 540, 541, 545, 564, 565, 567, 569, 572, 573, 577, 580, 582, 591, 592, 594, 596, 598, 600, 602, 603, 605, 607, 611, 613, 615, 620, 622, 623, 626, 627, 628, 629, 630, 632, 637, 638, 640, 647, 648, 649, 652, 653, 655, 661, 663, 664, 666, 668, 672, 674, 683, 685, 688, 691, 692, 693, 694, 695, 697, 700, 701, 702, 705, 706, 709, 710, 715, 716, 718, 719, 730, 731, 734, 736, 746, 749, 753, 756, 761, 762, 764, 765, 774, 790, 792, 793, 795, 796, 800, 802, 805, 808, 809, 812, 813, 817, 818, 822, 826, 831, 840, 842, 844, 845, 849, 850, 851, 852, 853, 856, 864, 866, 869, 872, 884, 888, 890, 894, 895, 905, 908, 909, 912, 916, 917, 925, 930, 932, 933, 935, 937, 939, 941, 943, 947, 953, 954, 955, 956, 957, 958, 959, 965, 977, 996, 1014, 1015, 1017, 1019, 1020, 1027, 1028, 1033, 1034, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1059, 1060, 1064, 1068, 1071, 1073, 1075, 1084, 1091, 1097, 1103, 1115, 1118, 1119, 1121, 1123, 1124, 1125, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1148, 1149, 1153, 1158, 1160, 1163, 1164, 1165, 1166, 1167, 1169, 1174, 1175, 1177, 1184, 1185, 1186, 1189, 1190, 1192, 1198, 1200, 1201, 1203, 1205, 1220, 1225, 1226, 1230, 1233, 1244, 1252, 1253, 1255, 1261, 1265, 1270], "boolean": [47, 159, 172, 192, 194, 255, 272, 309, 321, 322, 323, 337, 338, 341, 362, 365, 367, 369, 404, 449, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 486, 487, 491, 567, 569, 572, 573, 623, 641, 683, 690, 691, 700, 701, 756, 764, 774, 790, 809, 844, 849, 884, 890, 894, 895, 906, 908, 909, 912, 932, 977, 1027, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1059, 1060, 1064, 1115, 1118, 1119, 1148, 1164, 1235, 1244, 1262], "border": 20, "both": [10, 25, 33, 42, 46, 84, 85, 131, 176, 201, 215, 216, 226, 241, 242, 268, 278, 309, 324, 374, 385, 443, 469, 577, 590, 593, 595, 597, 599, 601, 604, 606, 608, 651, 715, 716, 718, 719, 761, 762, 770, 774, 785, 813, 817, 818, 827, 835, 853, 884, 890, 948, 1041, 1188, 1226, 1244, 1270, 1271], "bottom": [172, 309, 369, 774, 790, 884], "bottom_k": [272, 309, 369, 682, 683, 774, 849, 884, 1229, 1244], "bottom_k_bi": [368, 682, 683, 774], "bound": [98, 129, 130, 187, 201, 309, 345, 374, 469, 498, 500, 523, 529, 687, 697, 715, 716, 718, 719, 761, 762, 774, 813, 884, 916, 948, 1016, 1041, 1071, 1073, 1102, 1232, 1244, 1261], "boundari": [201, 309, 374, 464, 774, 813, 884, 948, 1037, 1244], "box": [20, 219, 309], "box_draw": 20, "branch": [53, 54, 795, 796, 805, 831, 842, 884], "break": [42, 43, 44, 45, 53, 54, 63, 65, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 256, 266, 271, 277, 278, 309, 312, 313, 384, 385, 418, 464, 532, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 750, 751, 774, 795, 796, 805, 845, 853, 884, 943, 958, 959, 995, 1037, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1223, 1228, 1244, 1248], "breakpoint": [385, 464, 577, 774, 959, 1037, 1121, 1244], "breezah": 143, "breviti": 168, "broadcast": [649, 890, 1186], "broader": 890, "brotli": [41, 45, 309, 884], "brussel": [417, 994], "bst": [397, 401, 417, 970, 974, 994], "bucket": [35, 133, 144, 145, 148, 309, 418, 431, 464, 774, 995, 1008, 1037, 1244], "bud": [647, 648, 1184, 1185], "budget": 1252, "buffer": [129, 130, 131, 187, 213, 309, 1016, 1244], "buffer_s": [213, 309], "bug": [531, 532, 774, 822, 868, 884, 1103, 1244], "build": [52, 117, 890, 1273], "built": 87, "builtin": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 309, 387, 774, 801, 884], "busi": [392, 702, 965], "business_day_count": [392, 965], "by_alternate_row": 1, "by_dtyp": 890, "by_first_letter_of_column_nam": 48, "by_first_letter_of_column_valu": 48, "by_index": 890, "by_left": [216, 309, 818, 884], "by_nam": 890, "by_pred": [242, 309], "by_right": [216, 309, 818, 884], "bye": 1, "byi": 1265, "bys": [201, 309, 813, 884], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 181, 187, 249, 309, 387, 544, 639, 643, 644, 651, 662, 774, 801, 839, 884, 1016, 1176, 1180, 1181, 1188, 1199, 1244, 1265], "bytesio": [36, 37, 38, 41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 249, 309, 387, 544, 774, 801, 839, 884], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 91, 117, 119, 121, 123, 134, 143, 170, 172, 173, 174, 175, 176, 177, 179, 182, 183, 184, 185, 186, 188, 192, 194, 197, 198, 199, 200, 201, 203, 205, 206, 214, 215, 217, 218, 220, 222, 224, 227, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 242, 245, 246, 247, 254, 255, 256, 257, 258, 260, 261, 264, 265, 266, 267, 268, 269, 272, 276, 277, 278, 280, 281, 283, 288, 291, 292, 293, 296, 297, 299, 302, 303, 309, 313, 318, 320, 321, 323, 341, 361, 369, 385, 449, 461, 469, 490, 502, 532, 538, 553, 554, 568, 570, 574, 577, 615, 653, 661, 683, 686, 693, 695, 696, 698, 699, 700, 703, 705, 706, 707, 708, 710, 711, 713, 723, 724, 725, 728, 729, 732, 733, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 753, 755, 757, 758, 759, 763, 770, 774, 790, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 809, 812, 813, 817, 820, 829, 831, 833, 834, 836, 837, 842, 843, 844, 845, 849, 852, 853, 856, 858, 861, 864, 865, 866, 869, 870, 872, 875, 876, 884, 888, 890, 942, 959, 1041, 1063, 1121, 1190, 1198, 1212, 1231, 1244, 1253, 1255, 1256, 1258, 1259, 1260, 1261, 1265, 1270], "c00": 890, "c01": 890, "c02": 890, "c03": 890, "c05": 890, "c1": 358, "c123": 1265, "c2": 358, "c20": 890, "c25": 890, "c3": 358, "c40": 890, "c45": 1265, "c4d79b": [36, 309], "c50": 890, "c567": [36, 309], "c60": 890, "c75": 890, "c80": 890, "c8ae6d2b276": [36, 309], "c93": 890, "c95": 890, "c96": 890, "c97": 890, "c98": 890, "c99": 890, "c_btm_by_a": [369, 774], "c_btm_by_b": [369, 774], "c_by_ca": [369, 683, 774], "c_by_cb": [369, 683, 774], "c_c_c": [753, 845, 884], "c_contigu": [267, 309], "c_max": [570, 774], "c_mean_squar": [288, 861], "c_min": [570, 774], "c_top_by_a": [683, 774], "c_top_by_b": [683, 774], "c_total": 1270, "cach": [46, 53, 54, 84, 85, 111, 135, 143, 146, 148, 152, 153, 154, 155, 167, 584, 585, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 661, 663, 664, 668, 774, 785, 795, 796, 805, 831, 842, 884, 941, 1127, 1128, 1198, 1200, 1201, 1205, 1244], "cadi": [234, 309], "cafe": [666, 1203], "caf\u00e9": [643, 644, 890, 1180, 1181], "calamin": 134, "calcul": [36, 41, 45, 47, 180, 201, 257, 280, 309, 388, 439, 440, 441, 442, 481, 493, 512, 519, 525, 529, 602, 620, 625, 687, 689, 706, 708, 750, 751, 755, 763, 774, 800, 813, 846, 854, 884, 960, 961, 1017, 1018, 1019, 1020, 1056, 1066, 1085, 1139, 1158, 1162, 1234, 1244], "calendar": [61, 62, 201, 216, 241, 279, 309, 395, 405, 407, 414, 418, 431, 435, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 720, 761, 762, 774, 813, 818, 835, 884, 968, 978, 983, 991, 995, 1008, 1012, 1018, 1244], "calendar_year": [405, 435], "call": [36, 46, 53, 54, 121, 130, 131, 134, 152, 153, 154, 155, 159, 163, 168, 172, 200, 201, 217, 219, 241, 256, 267, 272, 308, 309, 368, 369, 380, 383, 392, 531, 532, 553, 554, 556, 558, 560, 561, 584, 585, 616, 682, 683, 702, 707, 770, 774, 790, 795, 796, 805, 812, 813, 831, 835, 842, 845, 849, 882, 883, 884, 888, 890, 938, 965, 1103, 1128, 1154, 1225, 1229, 1244, 1253, 1257, 1270], "callabl": [48, 49, 50, 51, 143, 194, 219, 233, 238, 295, 309, 358, 523, 531, 532, 554, 555, 574, 591, 710, 711, 724, 735, 736, 748, 774, 822, 830, 833, 868, 884, 929, 1096, 1103, 1133, 1244], "caller": [132, 226, 309, 523, 822, 827, 868, 884], "cam": [238, 309, 833, 884], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 119, 129, 130, 131, 134, 135, 140, 141, 143, 146, 148, 149, 157, 158, 159, 163, 165, 168, 172, 174, 184, 185, 194, 196, 200, 201, 208, 210, 212, 219, 230, 234, 241, 243, 244, 247, 249, 250, 255, 266, 267, 271, 272, 273, 277, 283, 286, 295, 309, 312, 321, 358, 369, 380, 383, 384, 387, 392, 411, 412, 414, 417, 420, 423, 431, 440, 446, 449, 469, 495, 523, 531, 532, 538, 541, 544, 550, 553, 554, 556, 558, 560, 561, 570, 575, 577, 582, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 613, 615, 617, 620, 623, 628, 636, 642, 647, 648, 649, 656, 657, 658, 661, 672, 683, 700, 702, 714, 717, 724, 726, 730, 731, 736, 753, 764, 770, 773, 774, 785, 790, 791, 795, 796, 801, 803, 805, 813, 835, 837, 839, 840, 842, 844, 845, 849, 856, 859, 860, 884, 890, 929, 958, 965, 988, 989, 991, 994, 995, 997, 1000, 1008, 1018, 1024, 1041, 1068, 1096, 1103, 1108, 1121, 1125, 1128, 1146, 1148, 1149, 1152, 1155, 1158, 1165, 1166, 1173, 1179, 1184, 1185, 1186, 1193, 1194, 1195, 1198, 1223, 1225, 1244, 1248, 1258, 1270], "cancel": [795, 884], "candid": [634, 636, 1171, 1173], "cannot": [1, 41, 45, 93, 96, 129, 130, 134, 135, 137, 140, 141, 165, 219, 244, 245, 267, 286, 295, 309, 363, 443, 511, 532, 611, 630, 653, 674, 736, 774, 842, 860, 868, 884, 890, 933, 1084, 1103, 1145, 1167, 1190, 1225, 1244], "capabl": [1, 36, 309], "capac": [187, 253, 309, 1016, 1153, 1244], "capit": 1265, "captur": [634, 636, 647, 648, 1171, 1173, 1184, 1185], "car": [238, 262, 309, 587, 774, 833, 884], "cardin": [171, 309, 325, 696, 774, 789, 884], "care": [36, 250, 309, 532, 613, 774, 840, 884, 1149, 1244], "cars_revers": [587, 774], "cartesian": [215, 309, 817, 884], "case": [36, 46, 47, 54, 91, 116, 118, 119, 120, 122, 131, 138, 139, 147, 148, 165, 189, 201, 213, 219, 234, 241, 243, 244, 263, 266, 267, 309, 393, 440, 531, 541, 542, 554, 590, 627, 628, 635, 637, 638, 647, 648, 649, 774, 796, 813, 835, 884, 888, 890, 966, 1018, 1023, 1164, 1165, 1172, 1174, 1175, 1184, 1185, 1186, 1223, 1244], "cast": [1, 35, 49, 50, 116, 118, 119, 122, 152, 153, 154, 155, 194, 201, 233, 241, 266, 267, 271, 283, 309, 324, 382, 383, 394, 420, 423, 434, 569, 574, 575, 582, 584, 590, 641, 642, 671, 677, 681, 704, 705, 754, 774, 813, 830, 835, 856, 884, 888, 890, 943, 956, 957, 967, 997, 1000, 1011, 1125, 1178, 1179, 1208, 1215, 1221, 1225, 1227, 1228, 1244, 1263], "cast_str_to_int": [233, 309, 830, 884], "cast_to_supertyp": [774, 888], "cat": [26, 46, 84, 85, 385, 577, 627, 629, 667, 670, 681, 705, 769, 774, 890, 959, 1037, 1121, 1164, 1166, 1204, 1207, 1240, 1244], "categor": [35, 46, 65, 84, 85, 86, 152, 153, 154, 155, 215, 264, 309, 371, 385, 577, 584, 585, 681, 774, 890, 940, 941, 942, 943, 959, 1121, 1127, 1128, 1227, 1244], "categori": [36, 46, 65, 85, 264, 309, 371, 385, 464, 577, 774, 940, 959, 1037, 1121, 1220, 1244], "categorical_as_str": [152, 153, 154, 155], "categoricalord": 59, "categoricaltyp": [261, 309], "caus": [99, 108, 117, 129, 130, 131, 143, 152, 170, 189, 267, 309, 531, 774, 1023, 1225, 1244], "cba": 658, "cbrt": [774, 1244, 1263], "cbrt_a": 1264, "cc": [443, 722, 774, 890, 960, 1244, 1265], "ccc": [1, 36, 309, 672, 674, 890, 1265], "ccy": 1273, "cd": [672, 674, 890], "cde": [890, 1265], "cdt": [418, 431, 995, 1008], "ceil": [49, 774, 1244, 1263], "ceil_a": 1264, "cell": [15, 16, 36, 234, 309], "cent": 395, "center": [15, 16, 36, 309, 439, 441, 442, 591, 592, 594, 596, 598, 600, 603, 605, 607, 774, 1017, 1019, 1020, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1244], "central": [144, 145, 481, 620, 774, 1056, 1158, 1244], "centuri": 1266, "certain": [42, 43, 44, 45, 54, 133, 144, 206, 279, 309, 657, 658, 770, 795, 796, 831, 884, 1244], "certainli": [661, 663, 664, 1198, 1200, 1201], "cest": [417, 994], "cet": [417, 994], "cfg": [2, 4, 17, 168], "cfoo": [858, 884], "chain": [553, 554, 556, 558, 560, 561, 764], "chanc": [156, 159, 163, 1273], "chang": [30, 41, 42, 43, 44, 45, 47, 53, 54, 63, 65, 126, 129, 130, 131, 134, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 256, 266, 271, 277, 278, 285, 309, 312, 313, 384, 385, 388, 418, 464, 532, 570, 571, 577, 584, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 750, 751, 774, 795, 796, 805, 845, 853, 859, 884, 888, 890, 942, 943, 958, 959, 995, 1037, 1117, 1121, 1127, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1153, 1223, 1228, 1244, 1248], "changes_length": [774, 888], "char": [27, 635, 1172], "char_length": 1265, "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 128, 129, 130, 132, 143, 309, 414, 633, 635, 639, 643, 644, 645, 646, 647, 648, 651, 652, 653, 656, 657, 658, 659, 660, 662, 671, 831, 884, 890, 991, 1170, 1172, 1176, 1180, 1181, 1182, 1183, 1184, 1185, 1188, 1189, 1190, 1193, 1194, 1195, 1199, 1208, 1265], "character_length": 1265, "characterist": [159, 163], "charli": [129, 1271], "chart": [36, 309, 831, 884], "cheap": [174, 175, 248, 284, 309, 793, 794, 838, 857, 884, 947, 949, 1244], "cheaper": [498, 1071], "check": [35, 62, 93, 129, 130, 143, 152, 153, 154, 155, 167, 186, 211, 215, 309, 341, 362, 365, 367, 461, 469, 473, 491, 627, 632, 638, 655, 774, 817, 822, 884, 912, 932, 935, 937, 1015, 1033, 1034, 1043, 1046, 1053, 1055, 1064, 1164, 1169, 1175, 1192, 1244], "check_column_ord": [152, 153], "check_dtyp": [152, 153, 154, 155, 1015, 1244], "check_exact": [152, 153, 154, 155], "check_nam": [154, 155, 1015, 1244], "check_ord": [154, 155], "check_row_ord": [152, 153], "choos": [41, 43, 45, 201, 234, 309, 813, 884], "chrono": [33, 42, 87, 309, 420, 423, 661, 663, 664, 668, 884, 997, 1000, 1198, 1200, 1201, 1205, 1265, 1266], "chunk": [14, 45, 125, 129, 130, 133, 139, 141, 143, 146, 147, 148, 159, 163, 189, 214, 229, 267, 309, 324, 581, 774, 884, 896, 946, 1023, 1032, 1109, 1124, 1219, 1225, 1244], "chunk_length": 1244, "chunkedarrai": [116, 229, 309], "citi": [647, 648], "clang": 151, "clariti": [242, 309], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 102, 104, 156, 157, 244, 309, 761, 770, 774, 780, 786, 798, 804, 836, 855, 884, 889, 1224, 1244, 1255, 1270], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 181, 309, 387, 455, 774, 801, 884, 1253, 1270], "claus": [786, 1261, 1269], "clean": [661, 663, 664, 1198, 1200, 1201], "cleaner": 168, "cleanli": [10, 199, 309, 1270], "clear": [46, 84, 175, 309, 794, 884, 949, 1244], "clearer": 119, "clickhous": 132, "client": 131, "clip": [774, 1244], "clipboard": [32, 128, 309, 786], "clone": [118, 119, 120, 121, 122, 174, 267, 309, 793, 884, 947, 1244], "close": [36, 131, 201, 241, 256, 309, 385, 469, 528, 577, 590, 593, 595, 597, 599, 601, 604, 606, 608, 620, 715, 716, 718, 719, 761, 762, 774, 813, 835, 845, 884, 959, 1041, 1121, 1158, 1244], "closedinterv": [201, 241, 309, 469, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 835, 884, 1041, 1244], "closest": [116, 216, 309, 1264], "closur": [593, 595, 604, 606, 608, 774], "cloud": [35, 131, 133, 139, 141, 143, 144, 145, 146, 147, 148, 149, 309], "cloudi": [647, 648], "cloudpickl": 151, "cluster_with_column": [53, 54, 795, 796, 805, 831, 842, 884], "co": [635, 774, 1172, 1244, 1263], "coalesc": [215, 216, 278, 309, 467, 637, 661, 774, 817, 818, 853, 884, 1198, 1259, 1263], "code": [176, 309, 362, 363, 364, 365, 367, 387, 532, 613, 774, 801, 820, 884, 1149, 1244, 1253], "coeffici": [178, 309, 620, 774, 1158, 1244], "coerc": [55, 583, 774], "coercion": [42, 43, 44, 45, 53, 54, 583, 774, 795, 796, 805, 831, 842, 884], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 120, 122, 143, 157, 159, 192, 200, 201, 209, 211, 215, 216, 219, 230, 233, 234, 241, 242, 247, 255, 266, 271, 275, 277, 283, 288, 309, 313, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 464, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 555, 557, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 700, 701, 703, 704, 705, 707, 709, 712, 714, 717, 720, 724, 725, 726, 727, 728, 729, 737, 739, 741, 742, 744, 747, 748, 753, 755, 757, 759, 760, 763, 764, 774, 809, 812, 813, 815, 817, 818, 830, 835, 837, 844, 845, 851, 856, 858, 861, 884, 890, 991, 994, 1068, 1146, 1148, 1179, 1198, 1244, 1273], "col0": [159, 1273], "col1": [159, 234, 309, 884, 1273], "col2": [159, 234, 309, 884, 1273], "col3": [234, 309, 1273], "col4": 1273, "col_nam": [233, 309, 532, 764, 774, 830, 884], "cole": 126, "coli": [36, 309, 560, 561, 890, 1273], "collect": [50, 53, 54, 143, 144, 145, 149, 159, 160, 163, 184, 217, 234, 256, 261, 274, 275, 309, 443, 473, 532, 704, 722, 726, 753, 756, 774, 789, 790, 792, 793, 796, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 834, 835, 837, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 883, 884, 890, 1046, 1244, 1253, 1254, 1255, 1258, 1259, 1270, 1271, 1273], "collect_al": [50, 54, 795, 796, 884], "collect_all_async": [796, 884], "collect_async": [54, 884], "collect_schema": [50, 217, 309, 798, 804, 830, 836, 855, 884], "collis": 55, "colnam": [36, 143, 309], "color": [46, 84, 85, 295, 362, 363, 364, 365, 367, 630, 688, 774, 868, 932, 933, 934, 935, 937, 1167, 1233, 1244, 1265], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 88, 92, 116, 118, 119, 120, 121, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 172, 173, 176, 178, 179, 182, 183, 184, 185, 188, 192, 193, 196, 197, 199, 200, 201, 205, 206, 211, 212, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 250, 255, 257, 258, 259, 262, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 288, 294, 309, 313, 320, 321, 323, 334, 343, 352, 354, 357, 369, 374, 378, 379, 385, 395, 396, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 413, 415, 416, 419, 420, 421, 423, 432, 433, 435, 443, 445, 449, 451, 464, 468, 469, 484, 490, 496, 498, 518, 522, 523, 532, 538, 539, 541, 543, 553, 556, 558, 560, 561, 570, 577, 581, 583, 584, 585, 586, 588, 589, 590, 593, 595, 597, 599, 601, 604, 606, 608, 615, 622, 623, 626, 633, 638, 639, 640, 653, 654, 661, 662, 663, 664, 665, 666, 668, 673, 675, 683, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 774, 790, 792, 799, 802, 803, 804, 806, 809, 812, 813, 817, 818, 822, 823, 824, 825, 826, 828, 829, 832, 833, 835, 836, 837, 838, 840, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 867, 868, 884, 889, 890, 894, 895, 914, 923, 925, 928, 941, 942, 948, 953, 959, 968, 971, 972, 973, 976, 977, 978, 982, 983, 984, 986, 987, 990, 992, 993, 996, 997, 998, 1000, 1009, 1010, 1012, 1022, 1037, 1040, 1063, 1069, 1071, 1091, 1095, 1121, 1128, 1129, 1132, 1152, 1163, 1170, 1175, 1177, 1190, 1191, 1198, 1200, 1201, 1202, 1203, 1205, 1211, 1214, 1220, 1221, 1233, 1244, 1259, 1261, 1262, 1264, 1265, 1267, 1268, 1271, 1272, 1273], "column_0": [1, 219, 273, 309], "column_1": [219, 273, 309, 1267], "column_2": [273, 309, 1267], "column_abc": 15, "column_format": [36, 309], "column_nam": [238, 273, 309, 833, 884], "column_tot": [36, 309], "column_width": [36, 309], "column_x": [129, 130, 143], "column_xyz": 15, "columnar": [120, 122, 213, 243, 309], "columnformatdict": [36, 309], "columnnameorselector": [173, 182, 184, 225, 232, 234, 244, 264, 274, 275, 276, 277, 309, 792, 802, 803, 826, 850, 851, 852, 884], "columnnotfounderror": [196, 197, 309], "columntotalsdefinit": [36, 309], "columnwidthsdefinit": [36, 309], "colx": [36, 309, 560, 561, 890, 1258, 1273], "colz": [890, 1273], "com": [36, 132, 309, 439, 441, 442, 634, 635, 636, 774, 1017, 1019, 1020, 1171, 1172, 1173, 1244], "combin": [41, 45, 53, 54, 55, 192, 201, 202, 216, 241, 279, 309, 322, 335, 431, 440, 453, 569, 585, 590, 656, 657, 658, 715, 716, 718, 719, 761, 762, 764, 774, 795, 796, 805, 813, 818, 831, 835, 842, 884, 995, 1008, 1018, 1128, 1193, 1194, 1195, 1244, 1259, 1271], "come": [111, 132, 201, 274, 276, 309, 392, 411, 412, 481, 523, 702, 774, 813, 850, 852, 884, 965, 988, 989, 1056, 1244], "comm_subexpr_elim": [53, 54, 795, 796, 805, 831, 842, 884], "comm_subplan_elim": [53, 54, 795, 796, 805, 831, 842, 884], "comma": [32, 33, 129, 130, 143, 309], "comment": [129, 130, 143], "comment_prefix": [129, 130, 143], "common": [47, 53, 54, 55, 91, 129, 130, 143, 278, 309, 554, 780, 795, 796, 805, 831, 842, 853, 884], "compact": 1268, "compani": 132, "compar": [152, 153, 154, 155, 186, 192, 309, 437, 438, 458, 460, 469, 483, 530, 564, 565, 774, 809, 884, 942, 1015, 1244], "comparison": [149, 192, 309, 809, 884], "compat": [20, 36, 37, 38, 41, 45, 86, 261, 309, 627, 629, 634, 635, 636, 638, 647, 648, 884, 890, 1164, 1166, 1171, 1172, 1173, 1175, 1184, 1185, 1219, 1244, 1253, 1265, 1266, 1270], "compat_level": [37, 38, 261, 309, 1219, 1244], "compatibleframetyp": [1254, 1256, 1270], "compatlevel": [37, 38, 261, 309, 1219, 1244], "competit": [580, 774, 1123, 1244], "compil": [52, 339, 340, 488, 489, 910, 911, 1061, 1062], "complement": 890, "complet": [129, 131, 143, 1271], "complex": [160, 368, 369, 384, 682, 683, 774, 938, 958, 1229, 1244], "compliant": [36, 309], "compon": [396, 419, 661, 664, 720, 969, 996, 1198, 1201], "compos": 1271, "composit": [76, 1273], "compound": [123, 244, 309, 890], "comprehens": 157, "compress": [31, 37, 38, 41, 43, 45, 309, 588, 774, 884, 1131, 1244], "compression_level": [41, 45, 309, 884], "comput": [53, 55, 89, 187, 200, 216, 268, 274, 288, 301, 309, 317, 326, 327, 328, 329, 330, 331, 348, 349, 350, 355, 356, 360, 372, 375, 376, 377, 380, 381, 382, 383, 389, 436, 444, 481, 505, 506, 507, 508, 512, 513, 514, 515, 519, 525, 526, 527, 528, 550, 570, 571, 576, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 617, 618, 619, 620, 624, 679, 680, 688, 693, 695, 698, 699, 700, 706, 708, 721, 740, 750, 751, 764, 774, 795, 812, 815, 817, 818, 850, 858, 861, 874, 884, 892, 897, 898, 899, 900, 901, 902, 919, 920, 921, 926, 927, 931, 944, 950, 951, 952, 954, 955, 956, 957, 962, 1014, 1016, 1021, 1056, 1078, 1079, 1080, 1081, 1085, 1086, 1087, 1088, 1092, 1098, 1099, 1100, 1101, 1108, 1117, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1155, 1156, 1157, 1158, 1161, 1217, 1218, 1226, 1233, 1244, 1264, 1267], "computeerror": [541, 666, 1203], "concat": [46, 84, 85, 92, 130, 216, 309, 858, 884, 946, 1032, 1109, 1124, 1244, 1263], "concat_list": [495, 721], "concat_w": [256, 309, 753, 845, 884, 1263, 1270], "concaten": [46, 55, 84, 85, 194, 233, 309, 574, 626, 640, 704, 705, 774, 830, 884, 946, 1109, 1163, 1177, 1244, 1265], "concatmethod": 55, "conclus": [120, 122, 309, 884], "concret": [159, 163], "condit": [36, 184, 192, 242, 309, 449, 469, 632, 655, 701, 724, 764, 774, 803, 809, 884, 1041, 1244, 1259, 1263, 1269], "conditional_format": [36, 309], "conditionalformatdict": [36, 309], "config": [0, 47, 180, 247, 266, 283, 309, 628, 637, 649, 716, 719, 720, 786, 795, 800, 837, 856, 884, 1165, 1186], "configur": [35, 133, 144, 145, 168, 309, 795, 884], "conflat": [469, 774], "conform": 1273, "confus": [91, 321, 476, 477, 649, 774], "conjunct": [36, 84, 131, 134, 140, 157, 309, 730, 733, 884], "conn": 131, "connect": [34, 129, 131, 132, 135, 137, 139, 141, 143, 146, 147, 148, 149, 309, 787], "connectionorcursor": [34, 131, 309], "connector": 132, "connectorx": [131, 132, 151], "consecut": [191, 309, 361, 448, 454, 626, 640, 774, 808, 884, 1026, 1163, 1177, 1244], "consid": [41, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 126, 129, 130, 131, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 172, 184, 186, 212, 219, 225, 243, 256, 266, 271, 272, 274, 276, 277, 278, 309, 312, 313, 369, 374, 384, 385, 418, 453, 464, 531, 532, 538, 552, 553, 556, 558, 560, 561, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 683, 710, 724, 750, 751, 770, 774, 790, 795, 796, 803, 805, 814, 821, 826, 845, 849, 850, 852, 853, 868, 884, 890, 941, 943, 948, 958, 959, 995, 1015, 1037, 1103, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1146, 1148, 1223, 1228, 1244, 1248, 1253], "consider": 126, "consist": [200, 232, 267, 309, 661, 715, 716, 812, 884, 890, 896, 1023, 1198, 1225, 1244], "consola": [36, 309], "const": 10, "constant": [187, 241, 309, 393, 440, 446, 774, 835, 884, 966, 1016, 1018, 1024, 1244], "constrain": [47, 143, 184, 309, 803, 884, 890], "constraint": [192, 309, 449, 553, 554, 556, 558, 560, 561, 764, 774, 809, 884, 890], "construct": [46, 84, 85, 91, 116, 118, 119, 120, 121, 122, 123, 126, 131, 309, 455, 746, 749, 765, 770, 774, 801, 884, 941, 1244, 1258], "construct_categor": 46, "constructor": [126, 134, 163], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 87, 118, 121, 123, 131, 132, 133, 144, 145, 158, 159, 161, 163, 172, 177, 184, 185, 201, 209, 214, 230, 266, 267, 271, 272, 278, 290, 309, 321, 323, 346, 365, 367, 387, 461, 473, 502, 532, 626, 632, 634, 636, 638, 640, 642, 654, 655, 671, 692, 693, 694, 695, 705, 709, 736, 774, 790, 798, 801, 803, 804, 813, 831, 849, 853, 863, 884, 888, 890, 894, 895, 917, 1033, 1034, 1075, 1109, 1163, 1169, 1171, 1173, 1175, 1177, 1179, 1191, 1192, 1208, 1219, 1225, 1244, 1261], "contains_with_expr": 362, "contains_with_lit": 362, "content": [13, 616, 774, 1154, 1244], "context": [46, 84, 85, 165, 230, 256, 309, 319, 449, 495, 531, 532, 541, 622, 623, 688, 707, 709, 723, 726, 732, 733, 736, 745, 749, 752, 773, 774, 785, 786, 845, 858, 884, 1068, 1233, 1244, 1258, 1270, 1272], "contigu": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 237, 267, 309], "continu": [129, 385, 577, 620, 774, 959, 1121, 1158, 1244], "contrast": 720, "control": [10, 11, 36, 54, 55, 134, 157, 159, 255, 256, 266, 309, 585, 623, 753, 774, 795, 796, 805, 844, 845, 884, 1128, 1223, 1244, 1255, 1258, 1270], "conveni": [189, 271, 309, 877, 896, 1023, 1244, 1253], "convers": [117, 134, 170, 213, 214, 243, 244, 263, 267, 268, 309, 397, 661, 663, 664, 668, 786, 970, 1198, 1200, 1201, 1205, 1225, 1226, 1244, 1268, 1270], "convert": [35, 87, 117, 121, 133, 134, 140, 144, 170, 262, 263, 264, 265, 266, 267, 268, 270, 271, 309, 357, 358, 386, 397, 420, 423, 522, 523, 531, 554, 579, 636, 661, 663, 664, 665, 666, 668, 673, 774, 884, 888, 928, 929, 942, 970, 997, 1000, 1095, 1096, 1173, 1198, 1200, 1201, 1202, 1203, 1205, 1211, 1214, 1222, 1223, 1224, 1225, 1226, 1228, 1244, 1265, 1267, 1268, 1270], "convert_time_zon": [417, 994], "coo": [238, 309, 833, 884], "coord": 675, "coordin": [36, 309], "copi": [32, 116, 117, 128, 170, 174, 175, 214, 261, 267, 268, 283, 309, 446, 774, 793, 794, 856, 884, 947, 949, 1024, 1219, 1224, 1225, 1226, 1244, 1270], "corasick": [628, 637, 649, 1165, 1174, 1186], "core": [1, 309, 1270, 1273], "corner": [20, 36, 123, 309], "corr": 309, "corrcoef": [178, 309], "correct": [134, 140, 441, 442, 481, 602, 620, 774, 822, 884, 888, 1019, 1020, 1056, 1139, 1158, 1244], "correctli": [36, 309, 531, 774], "correl": [178, 309, 706, 750], "correlationmethod": 706, "correspond": [201, 216, 241, 267, 279, 309, 369, 405, 414, 418, 431, 532, 580, 590, 593, 595, 597, 599, 601, 604, 606, 608, 683, 715, 716, 718, 719, 761, 762, 774, 795, 813, 818, 835, 884, 978, 991, 995, 1008, 1123, 1244], "cosd": 1263, "cosh": [774, 1244], "cosin": [326, 327, 375, 376, 531, 774, 897, 898, 950, 951, 1244, 1267], "cost": [244, 309], "cot": [774, 1244, 1263], "cotang": [377, 774, 952, 1244, 1267], "cotd": 1263, "could": [35, 82, 89, 173, 309, 710, 720, 724, 792, 800, 803, 884], "count": [36, 149, 171, 180, 201, 230, 231, 241, 273, 279, 285, 300, 309, 325, 342, 351, 379, 392, 440, 464, 484, 492, 504, 509, 532, 552, 568, 590, 629, 686, 688, 696, 702, 709, 733, 744, 774, 789, 800, 813, 829, 835, 859, 873, 884, 890, 913, 922, 953, 960, 965, 1018, 1037, 1057, 1065, 1077, 1082, 1110, 1116, 1166, 1231, 1233, 1244, 1252, 1263], "count_digit": 629, "count_num": [36, 309], "counterpart": 126, "countri": [216, 309, 393, 966], "country_holidai": [392, 702, 965], "covari": [708, 751, 774, 888], "cover": 10, "cow": [645, 646, 1182, 1183], "cpu": [129, 130, 266, 309, 795, 884, 1223, 1244], "crab": [627, 638, 1164, 1175], "crate": [33, 42, 87, 309, 627, 629, 634, 635, 636, 638, 647, 648, 661, 663, 664, 668, 884, 890, 1164, 1166, 1171, 1172, 1173, 1175, 1184, 1185, 1198, 1200, 1201, 1205], "creat": [34, 36, 46, 85, 116, 120, 122, 129, 130, 131, 132, 135, 137, 141, 144, 145, 157, 158, 159, 160, 161, 162, 163, 164, 174, 175, 201, 231, 234, 241, 266, 267, 279, 283, 286, 309, 312, 313, 396, 418, 431, 440, 523, 531, 581, 590, 593, 595, 597, 599, 601, 604, 606, 608, 704, 714, 715, 716, 717, 718, 719, 720, 760, 761, 762, 770, 774, 793, 794, 800, 805, 813, 835, 856, 860, 884, 947, 949, 959, 969, 995, 1008, 1018, 1114, 1121, 1124, 1223, 1225, 1244, 1248, 1269, 1270, 1273], "create_async_engin": 131, "create_engin": [34, 309], "creation": 130, "cross": [215, 309, 817, 884, 1259], "crustaceon": [638, 1175], "cst": [418, 431, 995, 1008], "csv": [32, 33, 42, 43, 44, 45, 128, 129, 130, 134, 143, 309, 786, 884], "csvencod": [129, 130, 143], "csvquotestyl": [33, 42, 309, 884], "ctx": [1252, 1254, 1255, 1256, 1257, 1258, 1270], "cube": [1, 51, 372, 575, 774, 944, 1244, 1264], "cum_count": [774, 1244], "cum_count_revers": [379, 774], "cum_max": [774, 1244], "cum_max_all_fil": [380, 774], "cum_max_revers": [380, 774], "cum_min": [774, 1244], "cum_min_revers": [381, 774], "cum_prod": [318, 774, 1244], "cum_prod_revers": [382, 774], "cum_reduc": 710, "cum_sum": [466, 676, 713, 774, 815, 884, 1055, 1244], "cum_sum_revers": [383, 774], "cumsum_horizont": 712, "cumul": [379, 380, 381, 382, 383, 709, 710, 711, 712, 713, 774, 953, 954, 955, 956, 957, 1244], "cumulative_ev": [774, 1244], "current": [2, 3, 5, 6, 30, 34, 123, 131, 132, 139, 141, 143, 146, 147, 148, 156, 157, 159, 160, 161, 162, 163, 164, 174, 175, 215, 216, 256, 266, 271, 309, 312, 313, 401, 523, 571, 774, 793, 794, 817, 818, 845, 884, 890, 947, 949, 966, 974, 1117, 1223, 1228, 1244, 1248, 1255, 1270], "cursor": [34, 131, 309], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 90, 162, 164, 180, 219, 234, 295, 309, 358, 392, 420, 423, 523, 531, 532, 591, 688, 702, 735, 736, 774, 800, 822, 868, 884, 929, 965, 997, 1000, 1096, 1103, 1133, 1233, 1244, 1273], "customis": [36, 309], "cut": [577, 774, 1121, 1244], "cxx": 1265, "cypher": 131, "d": [28, 31, 33, 35, 36, 37, 38, 41, 119, 149, 192, 199, 201, 202, 203, 206, 215, 218, 260, 261, 271, 277, 281, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 318, 320, 379, 402, 420, 423, 469, 574, 615, 629, 635, 647, 648, 653, 661, 663, 664, 703, 720, 726, 753, 774, 809, 813, 817, 845, 864, 866, 869, 870, 871, 872, 873, 874, 875, 884, 890, 942, 953, 975, 997, 1000, 1041, 1063, 1166, 1172, 1184, 1185, 1190, 1198, 1200, 1201, 1212, 1244, 1259, 1261, 1262, 1265, 1266], "d1": [36, 309, 396], "d2": 396, "d3": 396, "d789": [36, 309], "d_4": [653, 1190], "dai": [61, 62, 77, 201, 214, 216, 241, 279, 309, 392, 411, 412, 414, 415, 418, 420, 423, 424, 431, 433, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 702, 714, 715, 716, 717, 718, 719, 720, 761, 762, 774, 813, 818, 835, 884, 890, 965, 988, 989, 991, 992, 995, 997, 1000, 1001, 1008, 1010, 1018, 1244, 1266], "dark": 1252, "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 87, 91, 93, 96, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 170, 175, 176, 185, 188, 189, 199, 200, 201, 213, 214, 215, 217, 219, 232, 233, 237, 242, 243, 244, 246, 250, 253, 261, 266, 267, 268, 271, 273, 283, 287, 307, 309, 313, 321, 322, 323, 326, 327, 328, 329, 330, 331, 334, 337, 338, 339, 340, 341, 343, 346, 348, 349, 350, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 367, 370, 371, 374, 375, 376, 377, 378, 385, 386, 387, 392, 393, 394, 395, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 445, 456, 458, 459, 460, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 483, 484, 488, 489, 491, 496, 502, 504, 511, 522, 524, 530, 532, 564, 565, 569, 570, 577, 579, 580, 583, 584, 585, 586, 588, 589, 609, 611, 613, 618, 619, 620, 626, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 651, 652, 653, 654, 661, 662, 663, 664, 666, 668, 671, 679, 680, 681, 684, 685, 688, 691, 697, 704, 707, 714, 715, 716, 717, 718, 719, 720, 730, 731, 733, 734, 735, 736, 746, 749, 760, 761, 762, 765, 770, 774, 786, 793, 794, 795, 796, 801, 804, 806, 812, 813, 836, 840, 856, 884, 889, 894, 895, 906, 908, 909, 910, 911, 912, 914, 916, 917, 928, 930, 932, 933, 934, 936, 939, 940, 947, 948, 949, 959, 960, 965, 966, 967, 968, 971, 972, 973, 974, 976, 977, 978, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1022, 1023, 1037, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1059, 1060, 1061, 1062, 1064, 1069, 1075, 1077, 1084, 1095, 1097, 1103, 1115, 1121, 1123, 1127, 1128, 1129, 1131, 1132, 1143, 1145, 1153, 1158, 1163, 1164, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1176, 1177, 1178, 1179, 1180, 1181, 1188, 1189, 1190, 1191, 1198, 1199, 1200, 1201, 1203, 1205, 1208, 1219, 1224, 1225, 1226, 1227, 1230, 1243, 1244, 1252, 1259, 1265, 1270, 1272], "data_bar": [36, 309], "data_bar_2010": [36, 309], "data_label": [36, 309], "data_page_s": [41, 45, 309, 884], "databas": [34, 115, 131, 132, 309, 786], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 88, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 153, 156, 157, 168, 307, 308, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 770, 774, 786, 795, 796, 798, 800, 802, 804, 806, 810, 813, 817, 818, 819, 820, 822, 826, 827, 831, 834, 836, 843, 845, 850, 851, 852, 853, 855, 858, 861, 862, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 884, 890, 959, 960, 994, 1018, 1037, 1103, 1121, 1179, 1190, 1191, 1214, 1220, 1221, 1233, 1244, 1252, 1253, 1254, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270, 1273], "dataload": [271, 309], "datapoint": [201, 309, 813, 884], "dataset": [14, 41, 65, 129, 130, 134, 140, 143, 149, 215, 271, 309, 481, 774, 786, 817, 822, 884, 1056, 1244, 1271], "datat": [36, 309], "datatyp": [33, 42, 116, 118, 119, 120, 122, 124, 136, 138, 139, 142, 147, 160, 161, 163, 185, 194, 309, 370, 443, 615, 681, 722, 734, 770, 774, 786, 804, 884, 889, 890, 939, 960, 1013, 1103, 1152, 1227, 1244, 1268], "date": [16, 36, 47, 62, 129, 130, 132, 134, 140, 141, 143, 146, 148, 149, 173, 180, 199, 201, 214, 216, 241, 256, 309, 312, 341, 392, 394, 395, 396, 397, 400, 402, 404, 405, 407, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 491, 590, 593, 595, 597, 599, 601, 604, 606, 608, 661, 663, 681, 702, 715, 716, 718, 719, 726, 734, 760, 774, 792, 800, 813, 818, 835, 884, 890, 912, 965, 967, 968, 969, 970, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1018, 1064, 1112, 1113, 1198, 1200, 1227, 1244, 1263, 1266, 1268], "date32": [214, 309], "date_format": [33, 42, 309, 884], "date_min": 414, "date_minus_1y_2mon": 991, "date_part": 1263, "date_plus_1i": [414, 991], "date_rang": [216, 279, 309, 400, 402, 415, 422, 433, 718, 719, 973, 987, 992, 993, 1009, 1010], "datetim": [16, 33, 36, 42, 47, 87, 123, 133, 141, 144, 146, 148, 159, 160, 161, 163, 173, 180, 199, 201, 214, 216, 241, 256, 279, 309, 312, 341, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 491, 590, 593, 595, 597, 599, 601, 604, 606, 608, 661, 664, 681, 702, 714, 715, 716, 718, 719, 720, 726, 734, 761, 762, 774, 792, 800, 813, 818, 835, 884, 890, 912, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1018, 1064, 1112, 1113, 1198, 1201, 1225, 1227, 1244, 1265, 1266], "datetime_format": [33, 42, 309, 884], "datetime_rang": [201, 309, 394, 397, 411, 412, 414, 417, 418, 424, 425, 426, 427, 428, 429, 430, 431, 434, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 774, 813, 884, 966, 967, 970, 974, 975, 976, 981, 982, 984, 986, 988, 989, 990, 991, 994, 995, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "datetime_str": [420, 423], "datetimeindex": 121, "david": 1271, "day_nam": [420, 423], "day_of_month": [400, 415, 433], "day_of_year": [400, 415, 433], "daylight": [201, 216, 241, 279, 309, 393, 401, 414, 418, 431, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 720, 761, 762, 774, 813, 818, 835, 884, 974, 991, 995, 1008], "dayofweek": 1266, "dayofyear": 1266, "days_diff": 424, "db": [34, 131, 132, 309], "dbapi2": 131, "dbc": [629, 1166], "dbreadengin": 132, "dbwriteengin": [34, 309], "dbwritemod": [34, 309], "dd": [36, 309, 1265], "ddd": [1, 36, 309, 672, 674], "dddd": 1265, "ddof": [257, 280, 309, 355, 360, 519, 525, 603, 604, 607, 608, 625, 689, 706, 708, 750, 751, 755, 763, 774, 846, 854, 884, 926, 931, 1092, 1098, 1140, 1142, 1162, 1234, 1244], "ddww": 1265, "de": 1265, "deal": [41, 45, 213, 309, 321, 323, 417, 580, 661, 664, 692, 693, 694, 695, 717, 774, 884, 894, 895, 994, 1123, 1198, 1201, 1244], "debug": [29, 795, 822, 884, 1273], "decad": [1252, 1266], "decai": [439, 440, 441, 442, 774, 1017, 1018, 1019, 1020, 1244], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 129, 130, 143, 309, 313, 609, 665, 774, 884, 890, 1143, 1202, 1244, 1264], "decimal_comma": [129, 130, 143], "decimal_separ": [9, 27], "declar": [116, 118, 119, 120, 122, 131, 138, 139, 147, 266, 271, 309, 884, 890, 1252], "decod": [129, 130, 641], "decompos": [275, 309, 851, 884], "decompress": [41, 43, 45, 309, 884], "decor": [46, 48, 49, 50, 51, 159, 163, 219, 309, 532, 774, 785, 786, 1103, 1244], "dedic": [1, 117, 213, 243, 309, 890, 1270], "deem": [180, 309, 800, 884], "deepcopi": [174, 309, 793, 884, 947, 1244], "def": [1, 46, 48, 49, 50, 51, 131, 157, 159, 163, 168, 233, 273, 309, 318, 574, 635, 658, 691, 735, 774, 796, 830, 884, 890, 1172, 1273], "default": [4, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 116, 118, 119, 120, 121, 122, 123, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 168, 180, 181, 184, 187, 196, 200, 201, 202, 213, 215, 216, 223, 225, 232, 234, 241, 242, 243, 244, 245, 249, 252, 256, 257, 259, 264, 266, 267, 271, 274, 276, 277, 278, 280, 285, 294, 309, 320, 321, 323, 346, 353, 358, 385, 387, 392, 417, 436, 438, 439, 441, 442, 462, 498, 502, 511, 516, 517, 519, 523, 525, 526, 531, 538, 541, 544, 562, 563, 565, 571, 577, 580, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 611, 614, 616, 625, 626, 634, 640, 651, 656, 657, 658, 661, 663, 664, 666, 668, 688, 689, 692, 694, 697, 701, 702, 705, 706, 708, 715, 716, 717, 718, 719, 720, 723, 726, 730, 731, 732, 734, 746, 749, 755, 756, 761, 762, 763, 765, 774, 795, 796, 800, 801, 803, 805, 812, 813, 817, 818, 826, 835, 839, 841, 845, 846, 850, 852, 853, 854, 859, 867, 884, 890, 894, 895, 917, 924, 929, 948, 959, 960, 965, 994, 1014, 1016, 1017, 1019, 1020, 1035, 1071, 1075, 1084, 1089, 1090, 1096, 1112, 1113, 1117, 1121, 1123, 1127, 1128, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1145, 1151, 1154, 1162, 1163, 1164, 1171, 1175, 1177, 1188, 1193, 1194, 1195, 1198, 1200, 1201, 1203, 1205, 1223, 1225, 1233, 1234, 1244, 1264, 1273], "default_match": [627, 638], "defaultdict": [244, 309], "defer": [309, 312, 313, 1244, 1248], "defin": [33, 36, 42, 62, 131, 138, 156, 157, 159, 173, 184, 188, 201, 219, 230, 233, 241, 278, 295, 309, 469, 498, 532, 574, 577, 589, 590, 593, 595, 597, 599, 601, 604, 606, 608, 639, 644, 651, 662, 715, 716, 718, 719, 736, 756, 761, 762, 774, 792, 803, 806, 813, 830, 835, 853, 868, 884, 889, 890, 1041, 1071, 1103, 1121, 1132, 1176, 1181, 1188, 1199, 1244], "definit": [36, 309, 481, 774, 889, 890, 1056, 1244], "deflat": [31, 309], "deg": 1267, "degre": [257, 280, 309, 519, 525, 579, 603, 604, 607, 608, 625, 689, 699, 706, 708, 750, 751, 755, 763, 774, 846, 854, 884, 1140, 1142, 1162, 1234, 1244, 1263], "delet": [1259, 1272], "delimit": [40, 42, 139, 147, 234, 264, 309, 626, 640, 884, 1163, 1177, 1220, 1244], "delta": [35, 133, 144, 257, 280, 309, 519, 525, 603, 604, 607, 608, 625, 689, 706, 708, 750, 751, 755, 763, 774, 786, 846, 854, 884, 1140, 1142, 1162, 1234, 1244], "delta_merge_opt": [35, 309], "delta_table_opt": [133, 144], "delta_write_opt": [35, 309], "deltalak": [35, 133, 144, 151, 309], "deltat": [35, 309], "demo": [36, 309], "demonstr": [129, 453, 774, 890], "dens": [20, 199, 309, 580, 774, 1123, 1244], "depend": [41, 46, 52, 85, 131, 151, 309, 339, 340, 488, 489, 532, 541, 577, 580, 720, 723, 726, 732, 774, 910, 911, 1061, 1062, 1121, 1123, 1244, 1273], "deploi": [159, 163], "deprec": [35, 156, 157, 158, 159, 163, 166, 171, 225, 267, 285, 290, 309, 399, 434, 455, 547, 584, 626, 633, 690, 699, 707, 774, 789, 805, 826, 858, 859, 863, 884, 972, 980, 981, 1011, 1034, 1127, 1163, 1170, 1225, 1244], "depth": 126, "desc": [890, 1252, 1255, 1259, 1261], "descend": [47, 250, 255, 309, 334, 354, 518, 580, 613, 622, 623, 688, 700, 774, 840, 844, 884, 905, 925, 1053, 1091, 1123, 1149, 1160, 1233, 1244], "describ": [159, 199, 309, 884, 1244], "describe_optimized_plan": [217, 309], "describe_plan": [217, 309], "descript": [201, 309, 813, 884, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1268, 1271, 1272], "deseri": [126, 249, 309, 455, 544, 774, 839, 884], "deserializ": [181, 249, 309, 387, 544, 774, 801, 839, 884], "design": [266, 271, 309], "desir": [159, 358, 434, 523, 929, 1011, 1096], "destin": 132, "detail": [52, 117, 131, 132, 152, 154, 170, 201, 309, 813, 884, 1273], "determin": [14, 33, 36, 42, 47, 55, 82, 126, 129, 130, 131, 134, 140, 141, 143, 148, 150, 172, 176, 194, 201, 213, 214, 219, 241, 272, 273, 279, 309, 369, 404, 417, 464, 523, 541, 577, 583, 585, 620, 628, 639, 661, 662, 664, 665, 683, 717, 746, 749, 765, 774, 790, 797, 798, 804, 813, 835, 849, 855, 884, 977, 994, 1037, 1096, 1121, 1127, 1128, 1158, 1165, 1198, 1201, 1202, 1244], "dev": [1140, 1244], "develop": [132, 159, 163], "deviat": [257, 309, 441, 603, 604, 625, 755, 774, 846, 884, 1019, 1162, 1244, 1260], "devic": [266, 309, 795, 884, 1223, 1244], "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 88, 92, 117, 118, 119, 120, 121, 122, 123, 130, 131, 132, 143, 156, 157, 159, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 596, 598, 600, 602, 603, 605, 607, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 752, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 770, 774, 813, 835, 851, 853, 865, 868, 876, 884, 890, 994, 1018, 1179, 1190, 1191, 1221, 1244, 1252, 1253, 1254, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270, 1273], "df0": [226, 309, 827, 884, 1258], "df1": [47, 55, 152, 153, 186, 189, 226, 256, 281, 309, 827, 884, 1255, 1257, 1258, 1259, 1270], "df2": [47, 55, 152, 153, 186, 189, 281, 309, 1255, 1257, 1258, 1259, 1270], "df3": [47, 309], "df4": 309, "df5": 309, "df6": 309, "df_a": 1270, "df_a1": 55, "df_a2": 55, "df_a3": 55, "df_agg_nuniqu": [230, 309], "df_b": 1270, "df_current_batch": 130, "df_d1": 55, "df_d2": 55, "df_from_str_repr": [265, 309], "df_h1": 55, "df_h2": 55, "df_new_grid": [467, 774], "df_nuniqu": [230, 309], "df_original_grid": [467, 774], "df_panda": 1253, "df_pd": 117, "df_tempor": [593, 595, 597, 599, 601, 604, 606, 608, 774], "dfi": [117, 170], "diagon": [55, 273, 309], "diagonal_relax": 55, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 116, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 159, 193, 213, 232, 238, 242, 243, 244, 262, 263, 266, 271, 273, 309, 774, 833, 884, 888, 890, 1028, 1244, 1256], "dictat": [414, 774, 888, 991], "dictionari": [30, 36, 52, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 136, 138, 139, 142, 143, 147, 213, 232, 242, 243, 244, 262, 263, 266, 271, 309, 884], "did": [393, 966], "diff": [283, 309, 424, 425, 426, 427, 428, 429, 430, 512, 774, 856, 884, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1085, 1244], "differ": [36, 41, 87, 90, 111, 129, 134, 149, 152, 154, 189, 201, 202, 213, 234, 241, 243, 244, 263, 266, 267, 273, 309, 388, 400, 414, 415, 417, 432, 438, 453, 462, 493, 512, 514, 523, 532, 562, 563, 565, 584, 585, 661, 686, 723, 726, 732, 774, 805, 813, 835, 884, 890, 942, 961, 973, 991, 992, 994, 1009, 1023, 1035, 1066, 1085, 1087, 1103, 1112, 1113, 1127, 1128, 1198, 1244, 1266, 1268, 1270], "digit": [63, 574, 609, 610, 635, 774, 890, 1143, 1144, 1166, 1172, 1244, 1273], "dimens": [116, 118, 120, 122, 138, 139, 147, 309, 586, 774, 884, 1129, 1225, 1244], "dimension": [118, 120, 122, 267, 309, 884, 1244], "direct": [36, 132, 141, 145, 148, 152, 252, 266, 277, 309, 353, 516, 614, 774, 841, 884, 924, 1089, 1151, 1244], "directli": [6, 30, 36, 54, 131, 159, 163, 168, 244, 266, 309, 439, 441, 442, 585, 749, 774, 796, 884, 1017, 1019, 1020, 1128, 1223, 1244, 1255, 1270, 1273], "directori": [36, 41, 141, 143, 146, 148, 309, 888], "dirpath": [31, 33, 37, 38, 41, 143, 309], "disabl": [41, 45, 46, 84, 85, 141, 146, 160, 213, 309, 795, 884], "disable_string_cach": 85, "disallow": 159, "discard": [192, 309, 449, 774, 809, 884, 1027, 1244], "disco": [637, 1174], "discont": [637, 1174], "discourag": [532, 774], "discoveri": [234, 309], "discret": [385, 388, 436, 464, 493, 512, 577, 774, 959, 961, 1014, 1037, 1066, 1085, 1121, 1244], "disk": [41, 42, 43, 44, 45, 135, 309, 842, 884], "dispatch": 890, "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 180, 199, 309, 800, 805, 884], "distanc": [216, 309, 464, 774, 818, 884, 1037, 1244], "distinct": [36, 163, 232, 234, 287, 309, 359, 472, 475, 524, 580, 589, 720, 774, 930, 1045, 1048, 1097, 1123, 1132, 1244, 1260, 1269, 1271, 1273], "distinct_count": [41, 45, 309, 884], "distribut": [481, 620, 774, 1056, 1158, 1244], "div": 1263, "divid": [20, 385, 418, 431, 439, 441, 442, 453, 481, 577, 774, 959, 995, 1008, 1017, 1019, 1020, 1056, 1121, 1244, 1264], "divis": [453, 684, 774, 1264], "divisor": [257, 280, 309, 519, 525, 603, 604, 607, 608, 625, 689, 706, 708, 750, 751, 755, 763, 774, 846, 854, 884, 1140, 1142, 1162, 1234, 1244], "dl": [271, 309], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 118, 119, 122, 129, 143, 152, 153, 154, 155, 180, 189, 212, 216, 234, 261, 273, 277, 309, 384, 392, 495, 531, 656, 657, 658, 746, 749, 765, 774, 791, 795, 796, 800, 805, 818, 822, 831, 842, 884, 890, 958, 965, 1023, 1068, 1193, 1194, 1195, 1228, 1244], "do_polars_oper": 29, "do_someth": 131, "do_various_th": 168, "doc": [35, 37, 38, 132, 135, 137, 152, 154, 178, 309], "document": [87, 132, 309, 312, 313, 420, 423, 642, 661, 663, 664, 668, 770, 942, 997, 1000, 1179, 1198, 1200, 1201, 1205, 1244, 1248], "doe": [10, 33, 35, 42, 47, 55, 105, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 147, 149, 175, 182, 189, 192, 196, 201, 202, 214, 215, 242, 243, 244, 274, 283, 286, 309, 312, 313, 434, 449, 453, 462, 523, 532, 657, 658, 686, 770, 774, 794, 795, 800, 802, 809, 813, 817, 822, 850, 856, 860, 884, 949, 1011, 1023, 1027, 1035, 1153, 1244, 1248, 1265], "doesn": [35, 129, 143, 201, 216, 309, 436, 774, 813, 884, 1014, 1244], "dog": [627, 667, 670, 705, 1164, 1204, 1207], "doi": 1266, "dollar": [647, 648, 1184, 1185], "domain": [1, 635, 1172], "don": [55, 201, 216, 219, 274, 277, 309, 384, 495, 532, 774, 813, 850, 884, 890, 958, 1068, 1103, 1244], "done": [130, 149, 168, 171, 173, 216, 309, 324, 325, 570, 774, 789, 792, 818, 884], "dot": [47, 770, 774, 842, 884, 1244], "doubl": [268, 309], "dow": 1266, "down": [143, 146, 147, 148, 149, 452, 774, 1029, 1244], "download": [139, 143, 146, 147, 842, 884], "downstream": [267, 309, 613, 774, 1149, 1244], "dr": 145, "drago": [639, 1176], "dragon": 639, "dragonfr": 1176, "dragonfruit": [639, 651, 662, 1176, 1188, 1199], "dramat": 134, "draw": [20, 25, 159, 163, 1273], "drawback": 770, "drawfn": 1273, "drawing_charact": 20, "dremio": 131, "driver": [34, 131, 132, 309], "drop": [1, 119, 183, 184, 219, 274, 283, 309, 388, 390, 391, 493, 494, 577, 774, 803, 850, 856, 884, 961, 963, 964, 1066, 1067, 1121, 1244, 1269], "drop_dupl": [274, 309, 850, 884], "drop_first": [264, 309, 1220, 1244], "drop_in_plac": 309, "drop_nan": [391, 774, 964, 1244], "drop_nul": [309, 390, 774, 884, 963, 1244], "dset": 149, "dst": [418, 431, 995, 1008], "dst_offset": [393, 966], "dt": [1, 36, 47, 134, 140, 241, 309, 590, 720, 774, 783, 835, 884, 890, 1251, 1265, 1266], "dt1": 1265, "dt2": 1265, "dtm": [36, 309, 396, 890, 969, 1265], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 94, 116, 118, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 156, 157, 158, 159, 163, 170, 173, 176, 201, 216, 241, 265, 266, 267, 268, 271, 277, 286, 309, 370, 371, 382, 383, 434, 443, 456, 490, 498, 529, 531, 532, 538, 575, 582, 583, 590, 593, 595, 597, 599, 601, 604, 606, 608, 615, 641, 661, 677, 681, 687, 697, 722, 726, 730, 731, 733, 734, 735, 736, 746, 749, 756, 765, 774, 792, 797, 813, 818, 835, 860, 884, 889, 890, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 939, 940, 941, 942, 947, 956, 957, 960, 961, 1011, 1016, 1043, 1059, 1060, 1063, 1071, 1095, 1102, 1103, 1130, 1152, 1178, 1198, 1215, 1222, 1223, 1225, 1226, 1227, 1228, 1232, 1244, 1270, 1273], "dtype_format": [36, 309], "dtypekind": 170, "dtypeoper": [1, 50], "dubiou": 87, "due": [173, 201, 216, 241, 244, 279, 309, 320, 401, 414, 418, 431, 553, 554, 556, 558, 560, 561, 590, 593, 595, 597, 599, 601, 604, 606, 608, 702, 715, 716, 718, 719, 761, 762, 774, 792, 813, 818, 835, 884, 974, 991, 995, 1008], "dummi": [264, 309, 1220, 1244], "duplic": [47, 92, 208, 215, 216, 274, 278, 309, 320, 470, 553, 577, 774, 817, 818, 850, 853, 884, 1042, 1121, 1244, 1271], "duplicateerror": [577, 774, 1121, 1244], "durat": [168, 216, 279, 309, 393, 401, 424, 425, 426, 427, 428, 429, 430, 434, 440, 681, 715, 716, 718, 719, 761, 762, 774, 818, 884, 890, 966, 974, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1018, 1225, 1227, 1244], "dure": [46, 91, 129, 130, 143, 168, 189, 309, 1023, 1244], "dutch": [392, 702, 965], "dynam": [201, 309, 358, 523, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 774, 813, 884, 888, 929, 1096], "dynamicgroupbi": [201, 309], "e": [10, 31, 33, 35, 37, 38, 41, 42, 117, 126, 129, 135, 137, 141, 146, 149, 161, 181, 192, 199, 203, 212, 218, 260, 261, 267, 277, 309, 318, 387, 436, 440, 443, 469, 526, 532, 537, 538, 539, 541, 542, 543, 545, 546, 615, 620, 638, 657, 658, 722, 736, 753, 764, 774, 801, 809, 820, 833, 884, 890, 1014, 1018, 1041, 1158, 1175, 1244, 1261, 1265, 1273], "e101": [36, 309], "e_filt": [541, 543], "e_sum_ov": [541, 543], "e_sum_slic": [541, 543], "each": [33, 36, 42, 47, 56, 63, 72, 130, 131, 134, 139, 147, 152, 153, 154, 155, 157, 177, 179, 185, 192, 199, 200, 201, 214, 216, 219, 232, 234, 241, 243, 245, 266, 271, 275, 278, 279, 287, 288, 290, 292, 294, 295, 303, 309, 334, 369, 385, 418, 431, 449, 472, 475, 501, 504, 511, 521, 528, 532, 570, 577, 580, 588, 589, 596, 600, 611, 616, 623, 635, 639, 643, 644, 651, 653, 654, 662, 683, 697, 700, 705, 730, 731, 756, 764, 774, 795, 798, 799, 804, 809, 813, 818, 831, 835, 851, 853, 861, 863, 865, 867, 868, 876, 884, 905, 946, 959, 995, 1008, 1045, 1048, 1074, 1077, 1084, 1094, 1121, 1123, 1131, 1132, 1145, 1154, 1172, 1176, 1180, 1181, 1188, 1190, 1191, 1199, 1214, 1244, 1270, 1271, 1273], "eager": [201, 216, 234, 277, 309, 394, 397, 400, 402, 411, 412, 414, 415, 417, 418, 422, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 593, 595, 597, 599, 601, 604, 606, 608, 697, 701, 715, 716, 718, 719, 726, 730, 731, 746, 749, 753, 756, 761, 762, 765, 773, 774, 813, 822, 884, 966, 967, 970, 973, 974, 975, 976, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1270], "eagerli": [523, 1252], "ear": [651, 662, 1188], "earlier": [216, 309], "earliest": [201, 309, 417, 661, 664, 717, 813, 877, 884, 994, 1198, 1201], "easi": 168, "easili": [47, 247, 271, 283, 288, 309, 756, 770, 837, 856, 861, 884], "east": 148, "ebf1d": [36, 309], "eee": [1, 36, 309, 890], "effect": [36, 194, 201, 309, 401, 453, 532, 555, 557, 559, 774, 813, 859, 860, 884, 966, 974], "effici": [117, 131, 212, 214, 309, 531, 774], "efgh": 1265, "eg": [17, 25, 36, 55, 132, 168, 266, 309, 418, 661, 664, 684, 774, 890, 1198, 1201], "egnaro": 1265, "either": [76, 159, 211, 215, 216, 217, 232, 241, 242, 266, 267, 309, 440, 531, 575, 577, 590, 661, 692, 700, 756, 774, 795, 817, 818, 820, 835, 884, 888, 890, 1018, 1121, 1198, 1244, 1256, 1273], "element": [13, 14, 25, 154, 155, 158, 161, 172, 179, 211, 234, 242, 255, 257, 272, 280, 309, 326, 327, 328, 329, 330, 331, 342, 343, 368, 369, 372, 375, 376, 377, 378, 380, 381, 382, 383, 384, 390, 391, 444, 445, 449, 462, 473, 484, 492, 494, 495, 496, 499, 504, 512, 513, 514, 515, 519, 525, 527, 528, 531, 532, 570, 571, 580, 583, 591, 592, 594, 596, 598, 600, 602, 603, 605, 607, 612, 617, 618, 619, 623, 624, 625, 653, 654, 665, 679, 680, 682, 683, 689, 700, 706, 708, 750, 751, 755, 763, 774, 790, 799, 844, 846, 849, 854, 884, 897, 898, 899, 900, 901, 902, 913, 914, 938, 944, 947, 950, 951, 952, 954, 955, 956, 957, 958, 963, 964, 1021, 1022, 1027, 1036, 1046, 1055, 1057, 1058, 1065, 1067, 1068, 1069, 1072, 1077, 1085, 1086, 1087, 1088, 1100, 1101, 1103, 1117, 1123, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1147, 1155, 1156, 1157, 1161, 1162, 1190, 1191, 1202, 1216, 1217, 1218, 1222, 1229, 1230, 1234, 1244, 1260, 1261], "elementwis": [531, 591, 592, 594, 596, 598, 600, 603, 605, 607, 774, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1244], "elif": 764, "elig": [822, 884], "elimin": [481, 774, 1056, 1244], "elis": [226, 309, 827, 884], "ellipsi": [199, 309], "elppa": 1265, "els": [130, 764], "email": [635, 1172], "email_part": [635, 1172], "emphas": [309, 313], "emploi": 890, "empti": [13, 31, 33, 42, 96, 119, 129, 130, 134, 140, 143, 174, 175, 201, 225, 276, 309, 626, 633, 734, 752, 793, 794, 813, 826, 852, 884, 890, 947, 949, 1043, 1163, 1170, 1244], "en": [20, 36, 309], "enabl": [28, 29, 41, 45, 46, 84, 85, 141, 146, 152, 153, 154, 155, 167, 247, 268, 283, 309, 321, 323, 584, 585, 613, 628, 637, 649, 688, 770, 774, 795, 837, 856, 884, 894, 895, 1127, 1128, 1149, 1165, 1174, 1186, 1226, 1233, 1244], "enable_string_cach": 84, "enclos": [455, 774], "encod": [59, 65, 75, 126, 129, 130, 143, 264, 309, 363, 455, 588, 630, 673, 774, 933, 1131, 1167, 1220, 1244], "encount": [107, 129, 130, 143, 201, 309, 562, 563, 641, 642, 706, 710, 724, 774, 813, 884, 1112, 1113, 1178, 1179, 1244], "end": [33, 36, 42, 129, 130, 143, 201, 234, 309, 362, 365, 367, 393, 418, 443, 517, 627, 632, 635, 639, 645, 651, 655, 656, 657, 660, 697, 702, 714, 715, 716, 717, 718, 719, 722, 730, 731, 761, 762, 764, 770, 774, 813, 814, 821, 831, 884, 890, 935, 966, 995, 1053, 1090, 1169, 1172, 1176, 1182, 1188, 1192, 1193, 1194, 1199, 1244, 1265], "endpoint": [385, 577, 774, 959, 1121, 1244], "ends_a": 1265, "ends_in_digit": 1265, "ends_with": [362, 367, 627, 655, 890, 1192, 1263], "ends_with_expr": 365, "ends_with_lit": 365, "engin": [14, 34, 131, 132, 134, 165, 200, 215, 219, 267, 274, 295, 309, 531, 753, 774, 795, 812, 817, 822, 826, 850, 852, 868, 884, 1103, 1225, 1244, 1255, 1270], "engine_opt": [34, 134, 309], "enginetyp": [795, 884], "enough": [495, 620, 774, 1068, 1158, 1244], "ensur": [10, 36, 132, 158, 161, 192, 200, 232, 242, 267, 309, 469, 531, 774, 809, 812, 822, 884, 888, 890, 1225, 1244], "enter": 168, "entir": [36, 53, 54, 134, 140, 309, 795, 796, 884], "entri": [309, 884, 1270], "entropi": [774, 1244], "enumer": [121, 129, 130, 143, 214, 309], "env": [4, 164], "env_onli": 30, "environ": [4, 30, 139, 141, 143, 146, 147, 148, 162, 165, 266, 309], "eol_char": [129, 130, 143], "eparg": 1265, "epoch": [61, 62, 726, 1266], "epoch_": [402, 975], "epoch_n": [402, 975], "epochtimeunit": [402, 726, 975], "eq": [192, 309, 438, 449, 774, 809, 884, 1244], "eq_miss": [774, 1244], "equal": [46, 85, 129, 130, 143, 152, 153, 154, 155, 201, 216, 226, 255, 309, 385, 431, 437, 438, 440, 458, 483, 523, 565, 577, 583, 591, 592, 594, 596, 598, 600, 603, 605, 607, 623, 645, 646, 671, 700, 750, 751, 764, 770, 774, 813, 818, 827, 844, 884, 959, 995, 1018, 1096, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1182, 1183, 1208, 1244, 1262, 1273], "equival": [36, 116, 118, 119, 120, 122, 133, 138, 139, 147, 201, 211, 230, 309, 318, 322, 437, 438, 440, 453, 458, 460, 483, 530, 549, 551, 564, 565, 566, 569, 575, 644, 676, 684, 691, 774, 813, 884, 1018, 1055, 1181, 1204, 1206, 1207, 1244, 1253, 1261], "err": 636, "error": [14, 35, 54, 102, 106, 108, 118, 119, 122, 129, 130, 143, 173, 234, 242, 267, 309, 320, 345, 346, 363, 392, 498, 500, 502, 553, 585, 627, 630, 634, 636, 638, 641, 642, 661, 663, 664, 668, 774, 792, 796, 868, 884, 916, 917, 933, 965, 1071, 1073, 1075, 1128, 1164, 1167, 1171, 1173, 1175, 1178, 1179, 1198, 1200, 1201, 1205, 1225, 1244, 1268], "escap": [129, 130, 132, 143], "esp": 14, "especi": [157, 589, 774, 884, 1132, 1244], "espresso": 890, "est": 718, "establish": 131, "estim": [129, 130, 171, 187, 309, 325, 441, 442, 481, 696, 774, 789, 884, 1016, 1019, 1020, 1056, 1244], "estimated_s": [309, 1244], "etc": [21, 35, 36, 129, 133, 134, 135, 137, 144, 145, 309, 532, 774, 888, 890, 1146, 1148, 1244, 1266], "eu": [144, 145], "eur": [199, 309, 1273], "europ": [397, 401, 417, 970, 974, 994], "eval": [265, 309, 531, 532, 721, 774, 1103, 1222, 1244], "evalu": [42, 43, 44, 45, 190, 192, 216, 309, 322, 335, 337, 338, 384, 449, 466, 486, 487, 523, 569, 692, 694, 697, 701, 715, 716, 718, 719, 721, 730, 731, 746, 749, 756, 761, 762, 764, 765, 774, 795, 809, 815, 817, 818, 884, 906, 908, 909, 958, 1027, 1059, 1060, 1235, 1244, 1262], "even": [33, 42, 129, 309, 440, 574, 577, 774, 884, 890, 1018, 1121, 1244], "evenli": [201, 309, 813, 884], "event": [54, 796, 884], "eventu": [34, 309], "everi": [14, 33, 42, 129, 130, 143, 195, 201, 263, 279, 309, 337, 338, 339, 340, 343, 345, 351, 380, 381, 382, 383, 384, 418, 431, 445, 457, 488, 489, 493, 496, 499, 500, 501, 509, 512, 517, 521, 589, 633, 710, 711, 774, 811, 813, 884, 908, 909, 910, 911, 914, 916, 922, 954, 955, 956, 957, 958, 995, 1008, 1022, 1031, 1061, 1062, 1066, 1069, 1072, 1073, 1074, 1082, 1085, 1090, 1094, 1132, 1170, 1244], "everybodi": [628, 649, 1165, 1186], "everyth": 890, "ew": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "ewm_mean": [774, 1244], "ewm_mean_bi": [774, 1244], "ewm_std": [774, 1244], "ewm_var": [774, 1244], "ewma": [440, 774, 1018, 1244], "exact": [157, 159, 163, 216, 253, 309, 325, 453, 633, 659, 660, 661, 663, 664, 684, 774, 1170, 1198, 1200, 1201], "exactli": [118, 119, 122, 152, 153, 154, 155, 158, 159, 163, 309, 653, 654, 659, 660, 720, 884, 1153, 1190, 1191, 1196, 1197, 1244], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 774, 786, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1244, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272], "exc_tb": 1270, "exc_typ": 1270, "exc_val": 1270, "exce": [199, 309], "excel": [32, 36, 128, 134, 309, 786], "excelread": 134, "excelspreadsheetengin": 134, "except": [0, 152, 182, 196, 203, 216, 218, 260, 309, 370, 585, 639, 662, 722, 774, 786, 802, 818, 884, 890, 939, 1036, 1058, 1128, 1176, 1199, 1216, 1225, 1244, 1269], "exclud": [159, 163, 201, 309, 369, 380, 383, 392, 469, 538, 683, 702, 770, 774, 813, 884, 890, 965, 1041, 1244], "excluded_dtyp": [159, 160, 163], "exclus": [242, 309, 691, 697, 730, 731, 774], "execut": [35, 46, 55, 131, 132, 217, 256, 309, 387, 495, 688, 753, 774, 791, 795, 801, 822, 831, 845, 884, 888, 1068, 1233, 1244, 1253, 1254, 1255, 1257, 1270, 1272], "execute_glob": 1270, "execute_opt": [131, 132], "exist": [1, 34, 35, 36, 47, 92, 133, 144, 159, 182, 196, 273, 278, 283, 284, 309, 320, 362, 365, 367, 396, 417, 704, 774, 798, 802, 804, 833, 836, 853, 855, 856, 857, 884, 890, 969, 994, 1272], "existing_t": 1272, "existing_table_path": [35, 309], "exit": [46, 84, 168, 1258, 1270], "exp": [439, 440, 441, 442, 774, 1017, 1018, 1019, 1020, 1244, 1263], "exp_a": 1264, "expand": [129, 141, 143, 148, 445, 537, 539, 583, 774, 888, 890, 1022, 1244], "expand_selector": 890, "expans": 672, "expect": [63, 65, 97, 105, 113, 129, 131, 143, 523, 532, 734, 774, 820, 822, 884], "expens": [129, 130, 139, 141, 143, 147, 148, 162, 164, 213, 219, 242, 243, 244, 273, 274, 309, 532, 774, 798, 800, 804, 836, 850, 855, 884, 1023, 1103, 1244, 1273], "experiment": [271, 309, 856, 884], "explain": [53, 54, 795, 796, 884, 1269], "explainformat": [805, 884], "explicit": [36, 91, 131, 143, 157, 256, 278, 309, 748, 845, 853, 884], "explicitli": [91, 132, 157, 159, 168, 196, 309, 584, 756, 774, 785, 1270], "explod": [309, 369, 451, 570, 586, 683, 774, 884, 888, 1129, 1244, 1261], "explor": [180, 309, 800, 884], "expon": [575, 774, 1244, 1264], "exponenti": [439, 440, 441, 442, 444, 575, 774, 1017, 1018, 1019, 1020, 1021, 1244, 1264], "export": [36, 37, 38, 213, 214, 243, 244, 261, 263, 266, 309, 770, 890, 1219, 1244], "expos": 786, "expr": [1, 47, 48, 49, 50, 51, 188, 190, 191, 215, 216, 230, 234, 242, 247, 248, 266, 271, 283, 284, 309, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 770, 774, 775, 776, 779, 780, 781, 782, 783, 806, 807, 808, 817, 818, 832, 837, 838, 856, 857, 884, 888, 890, 958, 965, 968, 969, 983, 991, 1018, 1025, 1026, 1030, 1068, 1074, 1090, 1094, 1164, 1169, 1175, 1192, 1244, 1268], "expr1": [1262, 1270], "expr2": [1262, 1270], "expr_unique_subset": [230, 309], "express": [0, 8, 42, 43, 44, 45, 53, 54, 156, 159, 163, 172, 188, 190, 192, 200, 215, 216, 219, 230, 234, 242, 247, 248, 252, 255, 266, 271, 272, 283, 284, 286, 288, 295, 309, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 334, 335, 339, 340, 341, 342, 343, 346, 357, 362, 363, 364, 365, 366, 367, 369, 374, 375, 376, 377, 378, 384, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 443, 445, 446, 448, 449, 453, 455, 456, 458, 459, 460, 461, 466, 469, 470, 471, 472, 473, 474, 475, 483, 484, 488, 489, 491, 492, 495, 496, 502, 504, 522, 523, 529, 530, 531, 532, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 549, 551, 553, 554, 556, 558, 560, 561, 564, 565, 567, 569, 570, 574, 575, 576, 577, 579, 583, 584, 585, 586, 588, 589, 611, 612, 613, 616, 618, 619, 621, 623, 626, 627, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 647, 648, 651, 652, 653, 654, 662, 666, 675, 676, 679, 680, 683, 684, 685, 687, 688, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 730, 731, 732, 733, 734, 735, 736, 738, 740, 743, 746, 748, 749, 750, 751, 752, 754, 756, 758, 760, 761, 762, 764, 765, 770, 773, 786, 790, 795, 796, 805, 806, 809, 812, 817, 818, 831, 837, 838, 841, 842, 844, 849, 856, 857, 858, 860, 861, 868, 884, 888, 890, 913, 948, 958, 965, 968, 969, 983, 1018, 1024, 1041, 1065, 1068, 1103, 1127, 1128, 1147, 1151, 1164, 1166, 1171, 1172, 1173, 1175, 1176, 1178, 1179, 1184, 1185, 1199, 1203, 1244, 1261, 1262, 1264, 1265, 1269], "expressioin": [446, 774, 1024, 1244], "exprlistnamespac": [451, 774], "exprmetanamespac": [536, 540], "exprnamespac": 496, "ext": 131, "extend": [0, 119, 281, 309, 446, 774, 786, 888, 896, 1024, 1244], "extend_const": [774, 1244], "extens": [268, 309, 1226, 1244], "extern": [858, 884], "extra": [35, 129, 130, 133, 135, 137, 143, 144, 145, 189, 201, 309, 774, 813, 884, 888, 1023, 1244], "extract": [123, 256, 309, 395, 398, 400, 403, 405, 406, 407, 408, 409, 410, 413, 415, 416, 419, 421, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 574, 635, 636, 637, 641, 642, 651, 653, 774, 968, 971, 972, 973, 976, 978, 982, 983, 984, 986, 987, 990, 992, 993, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1172, 1173, 1174, 1178, 1179, 1188, 1263], "extract_numb": [574, 774], "extracted_nr": 635, "extrem": [446, 591, 774, 1024, 1133, 1244], "extrema": [615, 774, 1152, 1244], "f": [48, 130, 131, 192, 199, 214, 261, 267, 273, 277, 309, 318, 358, 366, 523, 615, 633, 661, 664, 704, 774, 809, 884, 890, 929, 1096, 1170, 1198, 1201, 1261], "f32": [1, 50, 173, 256, 265, 271, 309, 615, 753, 774, 792, 845, 884, 890, 1102, 1244, 1268], "f4": [267, 309], "f5ed2452": [36, 309], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 117, 119, 138, 149, 156, 159, 173, 174, 175, 178, 180, 181, 182, 185, 190, 191, 194, 198, 199, 200, 201, 206, 207, 215, 216, 221, 222, 223, 224, 228, 234, 235, 236, 254, 255, 257, 259, 271, 280, 283, 288, 291, 293, 296, 297, 298, 299, 301, 302, 309, 317, 320, 326, 327, 328, 329, 330, 331, 349, 355, 360, 366, 370, 372, 373, 375, 376, 377, 385, 386, 390, 391, 419, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 452, 453, 458, 460, 467, 468, 476, 477, 478, 479, 481, 483, 495, 506, 507, 519, 525, 526, 527, 528, 530, 533, 534, 535, 548, 551, 553, 562, 563, 564, 565, 571, 575, 577, 578, 579, 580, 584, 585, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 618, 619, 620, 624, 625, 675, 679, 680, 684, 689, 698, 699, 703, 704, 706, 708, 721, 722, 736, 739, 740, 741, 753, 755, 763, 770, 774, 792, 793, 800, 802, 807, 808, 812, 813, 816, 817, 818, 824, 825, 832, 844, 846, 854, 856, 858, 861, 864, 866, 869, 870, 871, 872, 874, 875, 884, 890, 897, 898, 899, 900, 901, 902, 920, 926, 931, 936, 944, 945, 950, 951, 952, 959, 960, 963, 964, 996, 1017, 1018, 1019, 1020, 1021, 1025, 1029, 1037, 1039, 1040, 1068, 1079, 1080, 1092, 1098, 1099, 1100, 1101, 1117, 1121, 1123, 1128, 1133, 1135, 1136, 1138, 1139, 1140, 1142, 1143, 1144, 1156, 1157, 1161, 1217, 1218, 1232, 1244, 1252, 1260, 1261, 1264, 1267, 1270, 1273], "f_string": 725, "fa1e": [666, 1203], "face": [139, 141, 143, 146, 147, 148], "facil": 131, "facilit": [176, 309], "factor": [439, 441, 442, 681, 774, 1017, 1019, 1020, 1227, 1244], "fail": [34, 35, 117, 133, 135, 139, 141, 143, 144, 146, 147, 148, 170, 267, 274, 309, 335, 421, 523, 661, 663, 664, 668, 774, 850, 884, 1103, 1198, 1200, 1201, 1205, 1225, 1244, 1268], "fall": [385, 577, 774, 795, 884, 959, 1121, 1244], "fals": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 117, 118, 119, 121, 122, 123, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 170, 172, 173, 174, 175, 180, 186, 194, 198, 199, 200, 201, 205, 206, 208, 209, 210, 213, 215, 216, 217, 222, 223, 229, 230, 232, 234, 235, 242, 243, 244, 245, 247, 250, 253, 255, 256, 259, 262, 264, 267, 268, 272, 273, 274, 278, 279, 281, 283, 291, 293, 296, 297, 299, 302, 309, 321, 322, 323, 334, 337, 338, 341, 345, 346, 354, 359, 362, 365, 367, 369, 370, 379, 380, 381, 382, 383, 384, 385, 392, 404, 419, 436, 437, 438, 439, 441, 442, 460, 461, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 491, 495, 498, 500, 502, 511, 518, 524, 530, 531, 532, 536, 538, 540, 542, 545, 564, 565, 567, 569, 572, 573, 577, 580, 591, 592, 594, 596, 598, 600, 602, 603, 605, 607, 611, 613, 615, 620, 622, 623, 626, 627, 628, 629, 632, 637, 638, 640, 641, 647, 648, 649, 652, 653, 655, 661, 663, 664, 666, 683, 685, 688, 691, 692, 693, 694, 695, 697, 700, 701, 702, 705, 706, 709, 710, 715, 716, 718, 719, 730, 731, 734, 746, 749, 753, 756, 761, 762, 764, 765, 774, 790, 792, 793, 794, 795, 796, 800, 805, 812, 813, 817, 818, 820, 822, 831, 837, 840, 842, 844, 845, 849, 850, 853, 856, 864, 866, 869, 870, 872, 875, 884, 888, 890, 894, 895, 905, 908, 909, 912, 916, 917, 925, 930, 932, 933, 935, 937, 939, 941, 943, 946, 947, 953, 954, 955, 956, 957, 958, 959, 965, 977, 996, 1014, 1015, 1017, 1019, 1020, 1027, 1028, 1032, 1033, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1059, 1060, 1064, 1068, 1071, 1073, 1075, 1084, 1091, 1097, 1109, 1115, 1118, 1119, 1121, 1123, 1124, 1125, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1149, 1153, 1158, 1160, 1163, 1164, 1165, 1166, 1169, 1174, 1175, 1177, 1178, 1184, 1185, 1186, 1189, 1190, 1192, 1198, 1200, 1201, 1203, 1220, 1225, 1226, 1230, 1233, 1235, 1244, 1253, 1255, 1261, 1265, 1270], "far": [36, 309], "fashion": [215, 309, 805, 831, 842, 884], "fast": [41, 43, 45, 162, 164, 309, 446, 613, 774, 884, 888, 1024, 1149, 1244, 1273], "fast_executemani": [34, 309], "faster": [42, 43, 44, 45, 131, 134, 189, 267, 277, 309, 532, 686, 774, 884, 1023, 1103, 1244], "fastexcel": [134, 151], "favor": [34, 309], "fay": 126, "feat1": [266, 271, 309], "feat2": [266, 271, 309], "feather": [37, 135, 146, 309, 786], "featur": [1, 41, 52, 63, 65, 266, 271, 309], "feature_0": [858, 884], "feature_0_train": [858, 884], "feature_1": [858, 884], "feature_nam": [271, 309], "feb": [151, 1265], "februari": 1265, "fed": 657, "feel": [628, 649, 1165, 1186], "fetch": [125, 795, 814, 821, 884], "fetch_california_h": [271, 309], "few": [199, 309], "fewer": [639, 662, 884, 1176, 1199], "ff": 1260, "ff00": [666, 1203], "fff": 1, "ffff00": [363, 364, 630, 933, 934, 1167], "ffffff": [36, 309], "ffi": [187, 309, 1016, 1244], "fgg": 890, "fghi": 1265, "fh": 130, "fiction": 1252, "field": [32, 33, 35, 42, 76, 109, 112, 119, 275, 309, 358, 523, 531, 532, 555, 557, 559, 588, 635, 636, 641, 653, 654, 674, 675, 688, 710, 711, 735, 756, 774, 851, 884, 929, 1096, 1103, 1131, 1173, 1190, 1191, 1212, 1214, 1244, 1266], "field_0": [358, 523, 929, 1096], "field_1": [358, 523, 929, 1096], "field_2": [929, 1096], "field_n": [358, 523, 929, 1096], "field_nam": [532, 774, 1103, 1244], "figsiz": [831, 842, 884], "figur": [610, 774, 842, 884, 1144, 1244], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 189, 249, 309, 387, 455, 544, 547, 557, 559, 774, 801, 839, 884, 888, 1023, 1244], "file_cache_ttl": [139, 143, 146, 147], "filenam": 135, "filesystem": [35, 133, 144, 145, 309], "fill": [47, 55, 174, 190, 191, 252, 277, 309, 313, 361, 380, 383, 447, 448, 454, 467, 468, 592, 594, 596, 598, 600, 603, 605, 607, 614, 725, 746, 749, 765, 774, 807, 808, 841, 858, 884, 1025, 1026, 1039, 1040, 1114, 1134, 1135, 1137, 1140, 1141, 1142, 1151, 1244], "fill_char": [645, 646, 1182, 1183], "fill_nan": [191, 309, 448, 774, 808, 884, 1026, 1244], "fill_nul": [47, 190, 309, 447, 774, 807, 858, 884, 1025, 1244], "fill_valu": [252, 277, 309, 614, 774, 841, 884, 1151, 1244], "fillnullstrategi": [191, 309, 448, 774, 808, 884, 1026, 1244], "film": 1252, "filter": [1, 48, 133, 143, 144, 149, 184, 208, 209, 210, 234, 295, 309, 541, 543, 632, 655, 690, 714, 717, 724, 753, 764, 774, 803, 815, 845, 868, 884, 890, 1148, 1244, 1259], "final": [13, 36, 47, 148, 216, 217, 309, 439, 441, 442, 774, 800, 884, 888, 1017, 1019, 1020, 1244, 1271], "find": [55, 197, 309, 612, 627, 628, 774, 1147, 1165, 1244], "find_pat": 638, "fine": [795, 884], "finish": [189, 309, 1023, 1244], "finit": [471, 684, 706, 774, 1044, 1244], "first": [41, 47, 129, 130, 134, 135, 137, 141, 143, 152, 153, 154, 155, 199, 201, 203, 216, 218, 219, 229, 233, 234, 241, 260, 264, 265, 273, 274, 279, 286, 292, 309, 334, 336, 345, 384, 388, 412, 414, 418, 434, 453, 463, 472, 485, 493, 495, 500, 501, 523, 531, 532, 542, 574, 575, 590, 612, 623, 627, 633, 634, 638, 639, 641, 642, 647, 648, 662, 703, 710, 724, 728, 764, 770, 774, 795, 813, 814, 818, 821, 830, 835, 850, 858, 860, 865, 884, 890, 905, 916, 958, 960, 961, 989, 991, 995, 1011, 1036, 1045, 1058, 1066, 1068, 1073, 1074, 1096, 1103, 1147, 1160, 1170, 1171, 1173, 1175, 1176, 1178, 1179, 1184, 1185, 1199, 1216, 1220, 1222, 1225, 1244, 1262, 1263, 1265, 1271, 1273], "first_column": [36, 309], "first_non_nul": [523, 1096], "first_part": [653, 654, 1190, 1191], "fisher": [481, 620, 774, 1056, 1158, 1244], "fit": [126, 213, 253, 277, 309, 615, 749, 774, 1152, 1153, 1244], "five": [270, 309, 1273], "fix": [10, 56, 65, 157, 434, 720, 1011], "flag": [52, 156, 267, 309, 613, 627, 634, 635, 638, 647, 648, 774, 805, 822, 884, 890, 1149, 1164, 1171, 1172, 1175, 1184, 1185, 1225, 1244, 1265], "flat": [126, 244, 309, 496, 586, 774, 1069, 1129, 1244], "flatten": 774, "flavour": [36, 131, 309], "flight": 131, "flight_sql": 131, "flightsql": 131, "float": [10, 11, 33, 36, 42, 66, 67, 129, 130, 143, 149, 152, 153, 154, 155, 156, 159, 163, 170, 180, 187, 190, 216, 236, 245, 266, 267, 301, 309, 341, 373, 385, 390, 391, 419, 436, 437, 438, 439, 441, 442, 447, 452, 453, 458, 460, 467, 471, 474, 476, 477, 478, 479, 483, 491, 511, 526, 530, 533, 548, 562, 563, 564, 565, 575, 577, 578, 591, 592, 594, 596, 598, 600, 601, 603, 605, 607, 609, 611, 684, 747, 749, 774, 800, 807, 818, 832, 842, 874, 884, 890, 912, 939, 945, 959, 960, 962, 963, 964, 996, 1014, 1016, 1017, 1019, 1020, 1025, 1029, 1037, 1056, 1064, 1084, 1099, 1112, 1113, 1120, 1121, 1122, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1145, 1148, 1158, 1162, 1215, 1225, 1234, 1244, 1270, 1273], "float16": [271, 309], "float32": [1, 10, 33, 42, 50, 173, 194, 265, 266, 267, 271, 309, 440, 734, 774, 792, 884, 890, 1018, 1043, 1102, 1223, 1225, 1228, 1244], "float4": [256, 309, 753, 845, 884, 1268], "float64": [10, 33, 36, 42, 119, 129, 138, 156, 159, 176, 185, 187, 194, 246, 271, 283, 309, 326, 327, 328, 329, 330, 331, 370, 375, 376, 377, 386, 419, 440, 443, 476, 477, 579, 618, 619, 679, 680, 722, 746, 749, 765, 770, 774, 797, 804, 836, 856, 884, 890, 996, 1018, 1226, 1232, 1244], "float_list": 72, "float_precis": [9, 10, 27, 33, 36, 42, 309, 884], "float_scientif": [33, 42, 309, 884], "floatfmt": 11, "floor": [49, 453, 774, 1244, 1263], "floor_a": 1264, "floordiv": [684, 774], "fmt": [11, 216, 309, 466, 725, 774, 815, 884], "fmt_number": [309, 313], "fmt_str_length": [12, 716, 719], "fmt_table_cell_list_len": 13, "fmt_titl": [36, 309], "fn": [710, 711, 724, 748], "foggi": [647, 648, 1184, 1185], "fold": [309, 542, 703, 710, 711, 748], "folder": 149, "follow": [36, 41, 52, 129, 130, 131, 133, 143, 144, 145, 152, 201, 216, 219, 233, 241, 267, 279, 309, 414, 418, 431, 440, 531, 574, 575, 580, 590, 593, 595, 597, 599, 601, 602, 604, 606, 608, 674, 684, 699, 715, 716, 718, 719, 736, 761, 762, 764, 766, 767, 769, 774, 775, 776, 779, 781, 782, 783, 813, 818, 830, 835, 884, 890, 991, 995, 1008, 1018, 1123, 1146, 1148, 1225, 1236, 1238, 1240, 1244, 1245, 1249, 1250, 1251, 1268, 1273], "font": [36, 309], "font_color": [36, 309], "font_siz": [36, 309], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 173, 176, 177, 178, 182, 183, 184, 185, 186, 189, 192, 194, 196, 197, 198, 202, 203, 204, 205, 206, 207, 209, 215, 218, 219, 220, 221, 222, 223, 224, 227, 228, 231, 234, 236, 238, 239, 242, 245, 246, 247, 249, 251, 254, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 273, 274, 275, 280, 281, 282, 287, 309, 371, 385, 387, 414, 457, 463, 466, 485, 536, 538, 540, 541, 542, 543, 544, 545, 546, 577, 586, 626, 629, 631, 633, 635, 636, 640, 650, 652, 654, 656, 657, 658, 659, 660, 667, 670, 678, 696, 706, 707, 708, 723, 727, 728, 729, 732, 733, 737, 739, 741, 742, 744, 745, 747, 752, 755, 759, 763, 764, 770, 774, 792, 797, 798, 802, 803, 804, 809, 815, 816, 817, 829, 833, 836, 837, 850, 851, 855, 858, 884, 889, 890, 940, 959, 991, 1075, 1121, 1129, 1166, 1168, 1170, 1172, 1173, 1187, 1191, 1196, 1197, 1204, 1207, 1244, 1257, 1259, 1260, 1261, 1262, 1265, 1268], "foo1": 1265, "foo11": [194, 309], "foo_": [539, 652, 725], "foo_1": [264, 309], "foo_2": [264, 309], "foo_3_4": 1265, "foo_a": [234, 309], "foo_a_bar_1": 725, "foo_at_1": 1261, "foo_b": [234, 309], "foo_b_bar_2": 725, "foo_bar": [536, 540, 652, 734, 1257], "foo_bar2": [536, 540], "foo_bar_baz": 652, "foo_c_bar_3": 725, "foo_low": [667, 1265], "foo_mean": 1261, "foo_std": 1260, "foo_strip": 656, "foo_strip_end": 657, "foo_strip_start": 658, "foo_sum": [1260, 1261], "foo_titl": 669, "foo_uniqu": 1261, "foo_upp": [670, 1265], "foo_var": 1260, "foobar": [659, 660, 1196, 1197, 1265], "foobarbar": [660, 1197], "foofoobar": [659, 1196], "foral": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "forc": [216, 219, 267, 295, 309, 523, 817, 818, 868, 884, 1103, 1225, 1244], "force_parallel": [216, 309, 817, 818, 884], "form": [33, 42, 116, 118, 119, 120, 122, 138, 139, 147, 213, 243, 277, 309, 571, 774, 884, 1117, 1244, 1265], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 41, 42, 87, 127, 129, 130, 131, 135, 137, 143, 149, 181, 188, 199, 213, 225, 234, 243, 244, 249, 263, 276, 307, 309, 313, 387, 418, 420, 423, 544, 545, 661, 663, 664, 668, 720, 774, 801, 805, 806, 826, 839, 852, 884, 997, 1000, 1198, 1200, 1201, 1205, 1243, 1265, 1266], "formula": [36, 309, 436, 774, 1014, 1244], "fortran": [266, 267, 309], "forward": [191, 216, 252, 309, 353, 392, 411, 448, 454, 516, 614, 774, 808, 818, 841, 884, 924, 965, 988, 1026, 1089, 1151, 1244], "forward_fil": [279, 309, 361, 380, 383, 614, 774], "found": [20, 33, 36, 42, 88, 109, 112, 119, 123, 185, 256, 309, 612, 638, 642, 659, 660, 661, 664, 774, 845, 884, 1147, 1175, 1179, 1196, 1197, 1198, 1201, 1244, 1255, 1270], "four": [270, 309, 1270], "fourth": [481, 774, 1056, 1244], "frac": [439, 441, 442, 620, 774, 1017, 1019, 1020, 1158, 1244], "fraction": [33, 42, 152, 153, 154, 155, 245, 309, 419, 511, 571, 611, 661, 664, 774, 884, 996, 1084, 1117, 1145, 1198, 1201, 1244], "fragment": 1270, "frame": [33, 34, 36, 42, 47, 54, 55, 119, 130, 134, 140, 152, 153, 173, 174, 180, 213, 214, 217, 219, 226, 230, 233, 242, 243, 244, 256, 271, 277, 278, 309, 753, 792, 793, 800, 827, 830, 845, 853, 884, 890, 947, 1244, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1269, 1273], "frame_data": [1254, 1257], "frameinittyp": [309, 884], "frametyp": [47, 1270], "framework": [234, 276, 309, 852, 884], "freedom": [257, 280, 309, 519, 525, 603, 604, 607, 608, 625, 689, 706, 708, 750, 751, 755, 763, 774, 846, 854, 884, 1140, 1142, 1162, 1234, 1244], "freeli": [753, 845, 884, 890], "freez": [36, 309], "freeze_pan": [36, 309], "frequenc": [279, 309, 688, 774, 1233, 1244], "frequent": [1146, 1148, 1244], "fridai": [201, 309, 392, 420, 423, 702, 813, 884, 965, 997, 1000], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 87, 91, 107, 111, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 173, 180, 181, 182, 187, 189, 192, 193, 199, 201, 213, 214, 215, 216, 217, 225, 234, 238, 241, 242, 244, 245, 247, 248, 256, 264, 271, 273, 274, 276, 277, 278, 279, 285, 309, 312, 313, 358, 366, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 443, 453, 455, 467, 481, 499, 511, 523, 532, 562, 563, 565, 570, 571, 574, 577, 579, 590, 591, 593, 595, 597, 599, 601, 604, 606, 608, 611, 623, 634, 635, 639, 641, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 686, 698, 699, 702, 703, 714, 715, 716, 717, 718, 719, 720, 734, 749, 753, 760, 761, 762, 770, 773, 774, 792, 800, 801, 802, 809, 813, 817, 818, 826, 833, 835, 837, 838, 845, 850, 852, 853, 858, 859, 884, 890, 929, 936, 959, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1023, 1056, 1072, 1084, 1096, 1112, 1113, 1114, 1117, 1121, 1133, 1145, 1171, 1172, 1176, 1178, 1188, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1205, 1220, 1235, 1244, 1252, 1253, 1254, 1255, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273], "from_arrai": 753, "from_arrow": 117, "from_json": 774, "from_panda": 117, "from_repr": [265, 309, 1222, 1244], "fromkei": [48, 50], "front": [201, 309, 813, 884], "fruit": [262, 309, 587, 632, 655, 662, 774, 1169, 1192, 1199], "fruits_revers": [587, 774], "fsspec": [129, 130, 135, 137, 144, 145, 151], "fsspecfileio": 145, "full": [11, 41, 45, 47, 55, 62, 87, 119, 122, 129, 130, 131, 133, 138, 139, 143, 144, 145, 147, 149, 215, 278, 309, 639, 641, 661, 662, 663, 664, 668, 715, 716, 817, 822, 853, 884, 890, 1176, 1178, 1198, 1199, 1200, 1201, 1205, 1244, 1259, 1273], "full_sent": 705, "fulli": [161, 233, 245, 267, 309], "funcnam": [36, 309], "function": [0, 36, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 114, 117, 121, 123, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 168, 170, 172, 178, 181, 187, 194, 219, 225, 233, 234, 238, 256, 266, 267, 268, 271, 272, 273, 276, 277, 278, 295, 309, 312, 313, 321, 358, 368, 369, 384, 385, 387, 418, 439, 441, 442, 464, 523, 531, 532, 554, 555, 570, 574, 577, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 620, 681, 682, 683, 692, 696, 707, 709, 710, 711, 723, 724, 726, 728, 729, 732, 735, 736, 739, 741, 744, 746, 748, 750, 751, 755, 759, 763, 765, 770, 774, 786, 790, 796, 801, 822, 826, 830, 833, 845, 849, 852, 853, 860, 868, 884, 888, 929, 938, 943, 958, 959, 995, 1016, 1017, 1019, 1020, 1037, 1096, 1103, 1121, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1146, 1148, 1153, 1158, 1223, 1226, 1228, 1229, 1244, 1248, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1273], "function_nam": 888, "further": 770, "futur": [54, 170, 180, 250, 309, 796, 800, 840, 884], "g": [33, 42, 126, 129, 133, 135, 137, 144, 149, 161, 170, 181, 212, 267, 277, 309, 318, 387, 440, 443, 532, 615, 722, 774, 801, 833, 884, 1018, 1244, 1273], "g1": [449, 690, 774], "g2": [449, 690, 774], "g_1": [620, 774, 1158, 1244], "gag": 26, "galleri": [309, 312, 1244, 1248], "gamma": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "gantt": [831, 884], "gather": [130, 195, 309, 334, 457, 499, 700, 774, 811, 884, 905, 1031, 1072, 1244], "gather_everi": [309, 774, 884, 1244], "gb": [187, 309, 1016, 1244], "gbp": 1273, "gc": [35, 133, 144, 145, 309], "gca": 26, "gcaacgcatata": 26, "gcp": [139, 141, 143, 145, 146, 147, 148], "gdp": [216, 309, 818, 884], "gdp2": [216, 309], "gdp_date": [216, 309], "ge": [774, 1244], "gener": [1, 126, 131, 132, 150, 156, 157, 158, 159, 160, 161, 163, 170, 176, 178, 234, 245, 264, 267, 273, 309, 370, 511, 611, 616, 697, 715, 718, 730, 731, 733, 749, 761, 762, 774, 884, 939, 1084, 1145, 1154, 1220, 1244, 1273], "geq": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "germani": [216, 309], "get": [47, 54, 136, 142, 149, 172, 176, 177, 185, 193, 196, 198, 201, 203, 204, 208, 210, 211, 218, 221, 228, 229, 234, 241, 242, 246, 251, 254, 260, 268, 272, 282, 292, 303, 309, 319, 332, 333, 334, 336, 344, 347, 359, 366, 369, 371, 380, 381, 382, 383, 392, 402, 450, 456, 463, 480, 482, 485, 497, 503, 524, 533, 534, 535, 541, 543, 548, 562, 563, 572, 573, 578, 589, 590, 621, 625, 633, 677, 678, 682, 683, 685, 689, 700, 702, 723, 728, 732, 736, 737, 738, 739, 741, 742, 743, 745, 755, 759, 763, 774, 790, 795, 796, 798, 804, 810, 813, 814, 819, 821, 835, 836, 843, 848, 849, 855, 865, 876, 884, 888, 889, 903, 904, 905, 906, 907, 915, 918, 930, 936, 940, 946, 954, 955, 956, 957, 965, 975, 1013, 1028, 1032, 1036, 1041, 1042, 1054, 1058, 1070, 1076, 1097, 1104, 1106, 1107, 1109, 1111, 1112, 1113, 1118, 1119, 1122, 1132, 1159, 1162, 1170, 1216, 1220, 1226, 1230, 1234, 1244], "get_chunk": 1244, "get_column": [170, 269, 309], "get_column_index": 309, "get_worksheet_by_nam": [36, 309], "gevent": [54, 151, 796, 884], "ghi": [318, 635, 774, 890, 1172], "gil": [532, 774], "git": 52, "github": [132, 309], "give": [139, 146, 147, 216, 225, 274, 276, 309, 402, 453, 481, 583, 684, 688, 774, 786, 826, 850, 852, 884, 975, 1056, 1233, 1244, 1269], "given": [36, 47, 93, 98, 115, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 154, 155, 156, 157, 159, 161, 162, 163, 164, 187, 188, 190, 201, 211, 219, 232, 233, 242, 243, 244, 252, 255, 271, 278, 309, 341, 353, 358, 366, 369, 374, 393, 397, 420, 422, 423, 436, 440, 464, 469, 491, 516, 523, 526, 532, 570, 574, 580, 583, 584, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 614, 635, 636, 645, 646, 661, 664, 671, 674, 683, 722, 723, 732, 735, 736, 749, 750, 751, 774, 806, 813, 822, 830, 841, 844, 853, 868, 884, 889, 890, 912, 924, 929, 936, 948, 966, 970, 997, 999, 1000, 1014, 1016, 1018, 1037, 1041, 1055, 1064, 1089, 1096, 1099, 1102, 1103, 1114, 1123, 1129, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1147, 1151, 1172, 1173, 1182, 1183, 1198, 1201, 1208, 1232, 1235, 1244, 1252, 1254, 1259, 1261, 1264, 1265, 1270, 1272, 1273], "glimps": [180, 203, 309], "glob": [129, 130, 141, 143, 146, 147, 148], "global": [46, 84, 85, 134, 150, 159, 167, 256, 309, 584, 585, 753, 774, 845, 884, 941, 942, 1127, 1128, 1244, 1253, 1255, 1269], "gmt": [397, 401, 417, 970, 974, 994], "go": [12, 129, 130, 143, 632, 1169], "godfath": 1252, "goe": 12, "gonfruit": 1199, "good": [41, 43, 45, 213, 309, 884, 1264], "goodby": 1, "googl": [133, 144, 145], "gpu": [266, 309, 795, 884, 1223, 1244], "gpu_devic": [266, 309], "gpudevic": [266, 309], "gpuengin": [795, 884], "grade": [1056, 1244], "grain": [795, 884], "granular": 1270, "grape": 1265, "graph": [53, 131, 217, 309, 795, 815, 858, 884], "graphviz": [217, 309, 842, 884], "great": [309, 313], "great_tabl": [309, 313], "greater": [174, 216, 309, 458, 460, 469, 620, 645, 646, 654, 671, 774, 818, 884, 1041, 1158, 1182, 1183, 1191, 1208, 1244], "greatest": [1260, 1263], "greatli": [135, 146], "green": [46, 84, 85, 295, 688, 774, 868, 1233, 1244], "greenlet": [54, 796, 884], "greet": 1, "grid": [467, 774], "grid_point": [467, 774], "gridlin": [36, 309], "gross": 1252, "group": [9, 27, 41, 45, 130, 173, 200, 201, 214, 230, 232, 234, 241, 244, 277, 279, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 319, 369, 384, 445, 451, 456, 459, 495, 531, 532, 541, 543, 570, 580, 589, 590, 622, 623, 627, 634, 635, 636, 638, 647, 648, 683, 688, 736, 774, 792, 812, 813, 835, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 888, 890, 958, 1068, 1132, 1164, 1171, 1172, 1173, 1175, 1184, 1185, 1233, 1244, 1252, 1260, 1269, 1270], "group_bi": [201, 230, 234, 241, 279, 308, 309, 319, 369, 449, 451, 456, 459, 531, 532, 570, 622, 623, 683, 690, 736, 774, 795, 796, 805, 813, 831, 835, 842, 882, 884, 890], "group_by_dynam": [241, 309, 835, 884], "group_by_partit": [831, 884], "group_col": [449, 690, 774], "group_df": [295, 868], "group_dtyp": [570, 774], "group_index": [634, 1171], "group_to_row": [570, 774], "groupbi": [200, 309, 532, 736, 774], "grow": [281, 309], "grown": [205, 309], "gt": [309, 313, 774, 1244], "gte": [449, 690, 774], "guarante": [41, 45, 129, 130, 172, 180, 202, 272, 274, 309, 368, 369, 462, 682, 683, 774, 790, 800, 849, 850, 884, 938, 1035, 1229, 1244], "guid": [774, 888, 1273], "gzip": [41, 45, 309, 884], "h": [277, 309, 318, 420, 423, 615, 647, 648, 661, 664, 668, 774, 1184, 1185, 1198, 1201, 1205, 1265, 1266], "ha": [35, 36, 47, 54, 121, 131, 143, 166, 170, 279, 285, 290, 309, 368, 369, 384, 455, 531, 542, 547, 639, 662, 672, 682, 683, 723, 732, 770, 774, 796, 859, 863, 868, 884, 938, 947, 958, 960, 1176, 1199, 1229, 1244], "half": [271, 309, 418, 439, 440, 441, 442, 774, 995, 1017, 1018, 1019, 1020, 1244], "half_lif": [439, 440, 441, 442, 774, 1017, 1018, 1019, 1020, 1244], "ham": [31, 33, 35, 37, 38, 41, 173, 176, 177, 178, 182, 183, 184, 185, 186, 192, 197, 202, 203, 205, 215, 218, 220, 222, 224, 227, 231, 236, 238, 239, 242, 245, 246, 247, 254, 257, 258, 260, 264, 265, 267, 268, 269, 274, 280, 281, 309, 371, 545, 770, 792, 797, 798, 802, 803, 804, 809, 817, 829, 833, 836, 837, 850, 858, 884, 940, 1259, 1260], "ham_a": [264, 309], "ham_b": [264, 309], "ham_right": [215, 309, 817, 884], "hamburg": 770, "hand": [36, 129, 130, 143, 309, 512, 513, 514, 515, 1085, 1086, 1087, 1088], "handi": [392, 702, 965], "handl": [35, 53, 54, 55, 90, 123, 129, 130, 143, 149, 192, 196, 309, 388, 493, 633, 671, 774, 795, 796, 809, 884, 888, 961, 1066, 1170, 1208, 1244], "handler": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 309, 387, 774, 801, 884], "happen": [131, 397, 577, 774, 970, 1121, 1244], "hard": [143, 822, 884], "harder": [201, 309, 813, 884], "hardwar": 1273, "has_head": [129, 130, 134, 143], "has_nul": [774, 1034, 1244], "has_prefix": 655, "has_suffix": 632, "has_two": 1261, "has_valid": 1244, "hash": [202, 309, 774, 1244], "hash_row": 309, "hat": [647, 648, 1184, 1185], "have": [14, 30, 36, 46, 47, 62, 85, 117, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 181, 189, 213, 215, 216, 234, 237, 241, 243, 244, 263, 271, 286, 309, 384, 387, 439, 441, 442, 532, 542, 580, 584, 585, 590, 636, 774, 801, 817, 826, 835, 852, 859, 860, 884, 888, 890, 958, 960, 1017, 1019, 1020, 1023, 1123, 1127, 1128, 1244, 1269, 1271, 1273], "haystack": [635, 1172], "he": 657, "head": [143, 199, 218, 260, 309, 324, 485, 570, 774, 821, 884, 1058, 1216, 1244], "header": [33, 36, 41, 42, 45, 123, 129, 130, 134, 143, 185, 234, 273, 309, 884], "header_format": [36, 309], "header_nam": [273, 309], "headerless": 143, "heap": [187, 309, 774, 888, 1016, 1244], "heatmap": [36, 309], "height": [36, 126, 159, 184, 309], "hell": [656, 1193], "hello": [1, 20, 656, 657, 658, 890, 1075, 1193, 1194, 1195, 1254, 1257], "hello_": 725, "hello_data": 1257, "hello_world": 1257, "help": [36, 152, 153, 154, 155, 309, 312, 884, 1244, 1248], "helper": [309, 313, 770], "here": [35, 36, 41, 116, 118, 119, 120, 122, 131, 132, 133, 138, 139, 141, 143, 144, 145, 146, 147, 148, 157, 159, 163, 234, 309, 392, 531, 532, 636, 642, 702, 774, 842, 884, 890, 965, 1179], "hex": [363, 364, 630, 631, 666, 933, 934, 1167, 1168, 1203], "hexadecim": [933, 934], "hf": [139, 141, 143, 146, 147, 148], "hf_token": [139, 141, 143, 146, 147, 148], "hi": [1, 1265], "hidden": [36, 309], "hidden_column": [36, 309], "hide": [21, 22, 23, 24, 36, 309], "hide_gridlin": [36, 309], "hide_password": 131, "high": [244, 309, 313, 577, 774, 786, 1121, 1244], "higher": [41, 45, 180, 236, 301, 309, 578, 600, 601, 747, 774, 800, 832, 874, 884, 960, 1122, 1138, 1244], "highest": [309, 313, 580, 687, 706, 774, 884, 1123, 1244], "highli": [774, 888], "hippopotamu": [645, 646, 1182, 1183], "hist": [774, 1244, 1248], "histogram": [1244, 1248], "hit": [791, 884], "hive": [141, 146, 148], "hive_partit": [141, 146, 148], "hive_schema": [141, 146, 148], "hmm": 890, "hold": [253, 267, 309, 1225, 1244], "holidai": [392, 702, 965], "horizont": [20, 55, 92, 194, 205, 221, 223, 228, 259, 277, 309, 693, 695, 704, 705, 710, 711, 713, 721, 724, 738, 740, 743, 748, 758, 858, 884], "host": [52, 129, 135, 137, 148], "hour": [139, 143, 146, 147, 201, 216, 241, 279, 309, 406, 408, 409, 413, 414, 418, 419, 425, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 717, 718, 719, 720, 760, 761, 762, 774, 813, 818, 835, 884, 890, 991, 995, 1002, 1008, 1018, 1244, 1266], "hours_diff": 425, "hous": [271, 309], "how": [11, 35, 36, 47, 55, 92, 132, 139, 141, 143, 146, 147, 148, 184, 192, 215, 216, 234, 277, 278, 309, 342, 388, 417, 467, 492, 493, 570, 583, 602, 661, 664, 702, 717, 764, 774, 803, 809, 817, 853, 858, 884, 888, 913, 961, 994, 1065, 1066, 1139, 1198, 1201, 1244], "howev": [1, 119, 131, 187, 219, 267, 309, 795, 884, 1016, 1244], "hstack": [92, 309], "html": [36, 37, 38, 117, 131, 135, 137, 170, 178, 309], "http": [20, 36, 37, 38, 117, 131, 132, 135, 137, 170, 178, 309, 634, 636, 842, 884, 1171, 1173], "hug": [139, 141, 143, 146, 147, 148], "hut": [647, 648, 1184, 1185], "hvplot": [151, 309, 312, 1244, 1248], "hvplottabularpolar": [309, 312, 1244, 1248], "hyperbol": [327, 329, 331, 376, 619, 680, 774, 898, 900, 902, 951, 1157, 1218, 1244], "hyperloglog": [171, 309, 325, 696, 774, 789, 884], "hyphen": [626, 1163], "hypothesi": [157, 159, 162, 163, 1273], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 103, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 171, 172, 175, 176, 180, 181, 184, 186, 187, 189, 192, 196, 200, 201, 202, 203, 206, 207, 211, 213, 214, 215, 216, 217, 218, 219, 225, 226, 230, 232, 233, 234, 239, 241, 242, 243, 244, 245, 248, 249, 250, 252, 254, 255, 256, 257, 260, 261, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 280, 284, 286, 287, 295, 309, 312, 313, 318, 321, 323, 324, 325, 335, 338, 345, 346, 353, 358, 368, 369, 384, 385, 387, 390, 391, 392, 393, 396, 404, 411, 412, 414, 418, 420, 431, 439, 440, 441, 442, 445, 449, 453, 462, 464, 466, 469, 481, 487, 494, 495, 498, 500, 502, 511, 516, 517, 519, 523, 525, 528, 531, 532, 536, 538, 540, 541, 542, 544, 552, 570, 575, 577, 580, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 616, 617, 620, 621, 622, 623, 625, 626, 627, 628, 629, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 654, 656, 657, 658, 661, 662, 663, 664, 666, 668, 671, 675, 682, 683, 688, 689, 692, 693, 694, 695, 696, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 718, 719, 724, 728, 729, 730, 731, 733, 734, 736, 739, 741, 744, 746, 749, 750, 751, 752, 753, 755, 759, 761, 762, 763, 764, 765, 770, 774, 789, 790, 791, 794, 795, 796, 798, 800, 801, 803, 804, 805, 809, 812, 813, 816, 817, 818, 820, 822, 826, 827, 831, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 855, 857, 860, 868, 878, 884, 888, 890, 894, 895, 896, 909, 916, 917, 924, 929, 938, 941, 943, 948, 949, 958, 959, 960, 963, 964, 965, 966, 969, 977, 991, 995, 997, 1008, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1027, 1035, 1036, 1037, 1041, 1043, 1053, 1055, 1056, 1058, 1060, 1067, 1068, 1071, 1073, 1075, 1084, 1089, 1090, 1096, 1103, 1121, 1123, 1125, 1127, 1128, 1129, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1149, 1151, 1154, 1155, 1158, 1159, 1162, 1163, 1164, 1165, 1166, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1191, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1203, 1205, 1208, 1216, 1219, 1223, 1225, 1226, 1228, 1229, 1233, 1234, 1244, 1248, 1252, 1253, 1258, 1262, 1265, 1268, 1270, 1271, 1273], "i0e0": 1273, "i16": [1, 50, 400, 415, 433, 615, 774, 890, 992, 1222, 1244, 1273], "i32": [1, 50, 116, 119, 123, 156, 158, 159, 247, 256, 309, 344, 345, 347, 370, 395, 403, 405, 406, 407, 408, 409, 413, 435, 615, 702, 764, 774, 837, 884, 915, 916, 918, 968, 978, 982, 983, 984, 990, 1012, 1102, 1244, 1262, 1266, 1273], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 131, 138, 139, 143, 172, 173, 174, 175, 177, 181, 182, 184, 185, 188, 189, 191, 192, 195, 196, 198, 199, 200, 201, 203, 205, 206, 208, 210, 212, 215, 216, 218, 219, 220, 226, 227, 232, 233, 234, 235, 238, 239, 240, 241, 245, 247, 249, 252, 254, 255, 256, 258, 260, 262, 269, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 299, 302, 303, 309, 318, 320, 324, 334, 339, 340, 342, 343, 348, 350, 351, 352, 353, 354, 356, 359, 361, 368, 369, 374, 380, 381, 382, 383, 384, 385, 388, 389, 402, 422, 424, 425, 426, 427, 428, 429, 430, 440, 443, 445, 446, 448, 449, 450, 451, 453, 454, 456, 457, 459, 463, 465, 466, 467, 468, 469, 472, 473, 475, 476, 477, 478, 479, 482, 485, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 529, 531, 532, 549, 550, 551, 553, 554, 556, 558, 560, 561, 566, 570, 571, 574, 575, 576, 577, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 611, 613, 614, 615, 616, 617, 621, 622, 623, 639, 647, 648, 662, 666, 671, 672, 674, 675, 676, 677, 678, 682, 683, 684, 685, 687, 690, 697, 700, 703, 704, 705, 710, 711, 712, 713, 714, 717, 720, 721, 722, 723, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 745, 748, 752, 753, 754, 757, 758, 759, 760, 764, 770, 774, 790, 792, 793, 795, 796, 801, 802, 803, 806, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 821, 822, 823, 827, 828, 830, 831, 833, 834, 835, 837, 839, 841, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 856, 859, 860, 861, 862, 864, 865, 866, 868, 869, 872, 875, 876, 884, 890, 892, 893, 896, 914, 919, 921, 923, 924, 925, 927, 930, 938, 948, 949, 954, 955, 956, 957, 958, 959, 975, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1036, 1038, 1046, 1058, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1096, 1097, 1103, 1108, 1114, 1121, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1134, 1137, 1141, 1145, 1146, 1148, 1151, 1152, 1154, 1155, 1159, 1160, 1203, 1209, 1214, 1216, 1221, 1229, 1230, 1235, 1244, 1252, 1253, 1255, 1259, 1260, 1261, 1262, 1264, 1267, 1268, 1270, 1271, 1273], "i8": [357, 358, 400, 403, 406, 408, 409, 410, 413, 415, 416, 419, 432, 433, 522, 615, 746, 749, 765, 774, 928, 929, 961, 973, 976, 986, 987, 993, 996, 1009, 1010, 1095, 1130, 1152, 1232, 1244, 1266], "iceberg": [145, 786], "icon": [36, 309], "id": [26, 36, 55, 126, 129, 145, 266, 273, 286, 295, 309, 589, 647, 648, 686, 774, 860, 868, 884, 890, 1132, 1231, 1244, 1270, 1271, 1273], "id_char": 1273, "id_var": [225, 276, 309, 826, 852, 884], "ideal": 125, "ident": [123, 174, 175, 309, 420, 588, 589, 774, 793, 794, 884, 947, 949, 997, 1131, 1132, 1244], "identifi": [123, 131, 225, 232, 274, 276, 287, 309, 826, 850, 852, 884], "idiograph": 890, "idiomat": [770, 798, 804, 836, 855, 868, 884], "idx": [143, 201, 214, 286, 309, 345, 358, 523, 813, 860, 884, 929, 1096, 1175], "idx_lit": 1175, "idx_rx": 1175, "ieee": [684, 774], "if_set": 30, "if_table_exist": [34, 309], "ifnul": 1263, "ignor": [35, 131, 158, 159, 163, 223, 259, 278, 309, 321, 323, 346, 388, 417, 439, 441, 442, 493, 502, 562, 563, 626, 640, 692, 694, 705, 774, 853, 884, 890, 894, 895, 917, 961, 994, 1017, 1019, 1020, 1066, 1075, 1112, 1113, 1163, 1177, 1244], "ignore_error": [129, 130, 139, 143, 147], "ignore_nul": [223, 259, 309, 321, 323, 346, 439, 441, 442, 502, 626, 640, 692, 694, 705, 774, 894, 895, 917, 1017, 1019, 1020, 1075, 1163, 1177, 1244], "ignore_spac": 890, "ijkl": 1265, "ilmsuxu": [627, 634, 635, 638, 647, 648, 1164, 1171, 1172, 1175, 1184, 1185], "imbal": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "imdb_scor": 1252, "immedi": [580, 697, 701, 715, 716, 718, 719, 730, 731, 746, 749, 756, 761, 762, 765, 774, 1123, 1244, 1253], "immut": [267, 309, 1225, 1244], "impact": [201, 309, 813, 884, 1252, 1270], "impl": 145, "implement": [41, 117, 131, 170, 202, 219, 295, 309, 312, 313, 462, 532, 553, 554, 556, 558, 560, 561, 672, 736, 774, 868, 1035, 1103, 1146, 1148, 1244, 1248], "implic": [387, 774, 801, 884], "implicit": [278, 309, 853, 884], "implicitli": [192, 309, 449, 764, 774, 809, 884, 1270], "implod": [774, 1244, 1261], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 116, 117, 120, 121, 129, 131, 132, 138, 139, 143, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 173, 180, 181, 182, 184, 199, 201, 214, 216, 232, 234, 249, 256, 264, 266, 271, 276, 277, 279, 309, 312, 313, 366, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 449, 538, 544, 591, 593, 595, 597, 599, 601, 604, 606, 608, 702, 714, 715, 716, 717, 718, 719, 720, 753, 761, 762, 770, 774, 786, 792, 796, 800, 801, 802, 803, 813, 818, 822, 839, 852, 884, 936, 950, 952, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1018, 1044, 1047, 1049, 1050, 1133, 1156, 1217, 1244, 1248, 1253, 1267, 1270, 1273], "improv": [34, 45, 135, 146, 309, 531, 774, 884], "in_plac": [205, 253, 281, 309, 1124, 1153, 1160, 1244], "includ": [20, 30, 33, 35, 36, 42, 52, 121, 131, 133, 139, 143, 144, 145, 146, 147, 148, 159, 160, 176, 180, 187, 192, 232, 234, 244, 255, 271, 273, 277, 278, 309, 385, 419, 449, 453, 464, 469, 538, 577, 592, 594, 596, 598, 600, 602, 603, 605, 607, 652, 653, 656, 657, 702, 710, 750, 751, 774, 800, 809, 844, 853, 884, 890, 959, 960, 996, 1016, 1027, 1037, 1041, 1121, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1189, 1190, 1193, 1244, 1270], "include_bom": [33, 42, 309, 884], "include_boundari": [201, 309, 813, 884], "include_break": [385, 577, 774, 959, 1121, 1244], "include_breakpoint": [464, 774, 1037, 1244], "include_categor": 890, "include_categori": [464, 774, 1037, 1244], "include_col": 159, "include_file_path": [139, 143, 146, 147, 148], "include_head": [33, 36, 42, 130, 273, 309, 884], "include_index": 121, "include_init": 710, "include_kei": [232, 244, 309], "include_nul": [278, 309, 853, 884], "inclus": [201, 241, 309, 469, 590, 593, 595, 597, 599, 601, 604, 606, 608, 652, 653, 697, 715, 716, 718, 719, 730, 731, 761, 762, 774, 813, 835, 884, 1041, 1189, 1190, 1244], "incom": 131, "incompat": 110, "incomplet": [585, 774, 1128, 1244], "incorpor": 1270, "incorrect": [250, 309, 434, 531, 532, 613, 774, 840, 868, 884, 1011, 1149, 1244], "incorrectli": [129, 523], "increas": [36, 47, 129, 134, 140, 141, 148, 309, 384, 589, 774, 958, 1132, 1244], "independ": [53, 54, 156, 159, 163, 271, 309, 795, 796, 805, 831, 842, 884], "index": [36, 98, 117, 121, 124, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 151, 170, 195, 197, 201, 206, 211, 213, 234, 239, 241, 242, 243, 252, 254, 266, 267, 269, 276, 278, 279, 285, 286, 309, 319, 332, 333, 334, 336, 339, 340, 345, 353, 358, 440, 456, 457, 459, 488, 489, 498, 499, 500, 516, 517, 523, 590, 593, 595, 597, 599, 601, 604, 606, 608, 612, 614, 621, 627, 634, 638, 639, 651, 662, 672, 700, 730, 733, 774, 811, 813, 835, 841, 843, 852, 853, 859, 860, 884, 890, 903, 904, 905, 906, 907, 910, 911, 916, 924, 929, 1018, 1030, 1031, 1055, 1061, 1062, 1071, 1072, 1073, 1089, 1090, 1096, 1114, 1146, 1147, 1151, 1159, 1171, 1175, 1176, 1188, 1199, 1244, 1261, 1265], "index_column": [201, 241, 309, 590, 774, 813, 835, 884], "indexord": [266, 267, 309], "indic": [36, 61, 62, 64, 77, 91, 101, 127, 129, 130, 131, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 156, 157, 163, 201, 241, 244, 250, 252, 264, 309, 335, 353, 456, 464, 470, 471, 472, 474, 475, 476, 477, 478, 479, 498, 516, 536, 537, 538, 539, 540, 590, 593, 595, 597, 599, 601, 604, 606, 608, 612, 614, 617, 700, 701, 745, 774, 813, 835, 840, 841, 884, 888, 890, 924, 1030, 1037, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1071, 1089, 1146, 1147, 1151, 1155, 1220, 1244, 1273], "indistinguish": [33, 42, 309, 884], "individu": [36, 45, 168, 241, 266, 267, 271, 309, 532, 635, 774, 795, 835, 884, 890, 946, 1172, 1244], "inequ": [564, 774], "inexact": [152, 153, 154, 155], "inf": [156, 159, 163, 331, 385, 464, 471, 474, 577, 684, 774, 902, 952, 959, 1037, 1044, 1047, 1102, 1117, 1121, 1232, 1244, 1267], "infer": [33, 42, 63, 76, 91, 116, 118, 119, 120, 121, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 146, 147, 148, 219, 309, 531, 532, 586, 641, 661, 663, 664, 665, 668, 720, 734, 749, 774, 884, 1103, 1129, 1178, 1198, 1200, 1201, 1202, 1205, 1244], "infer_schema": [129, 143], "infer_schema_length": [119, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 309, 641, 884, 1178], "inference_length": [665, 1202], "inference_s": [219, 309], "infin": [684, 774], "infinit": [474, 684, 774, 1047, 1244], "influenc": [134, 822, 884], "influxdb": 131, "info": [133, 144, 145, 151, 309, 312, 1244, 1248], "inform": [19, 23, 34, 52, 133, 139, 141, 143, 144, 145, 146, 147, 148, 152, 154, 178, 180, 309, 312, 313, 481, 532, 620, 627, 634, 635, 638, 647, 648, 774, 795, 800, 831, 884, 888, 942, 1056, 1158, 1164, 1171, 1172, 1175, 1184, 1185, 1244, 1248], "inherit": [242, 309, 387, 774, 801, 884], "init": [168, 1252], "initcap": 1263, "initi": [36, 76, 168, 309, 710, 724, 764, 1270], "initialis": [131, 168, 884], "inject": [36, 47, 309], "inlin": [18, 244, 309, 627, 634, 635, 638, 647, 648, 1164, 1171, 1172, 1175, 1184, 1185, 1261], "inner": [56, 72, 158, 215, 278, 309, 346, 357, 389, 502, 522, 532, 583, 681, 753, 774, 817, 853, 884, 917, 928, 962, 1075, 1095, 1103, 1227, 1244, 1259, 1270], "inner_dtyp": [158, 161], "innermost": [158, 161], "innter": 916, "inprocessqueri": [795, 884], "input": [0, 47, 53, 91, 119, 121, 129, 130, 172, 182, 200, 219, 223, 232, 238, 247, 248, 252, 255, 259, 272, 283, 284, 288, 309, 318, 369, 374, 440, 443, 455, 469, 527, 531, 532, 542, 570, 584, 585, 623, 639, 651, 657, 658, 659, 660, 662, 664, 675, 683, 691, 693, 695, 697, 700, 703, 704, 705, 713, 720, 722, 730, 731, 734, 735, 736, 738, 740, 743, 752, 756, 758, 764, 770, 774, 786, 790, 802, 812, 833, 837, 838, 841, 844, 849, 856, 857, 861, 884, 888, 948, 1018, 1041, 1100, 1101, 1103, 1127, 1128, 1151, 1176, 1188, 1199, 1201, 1244, 1264, 1265, 1267], "input_wildcard_expans": [774, 888], "insensit": [628, 635, 637, 647, 648, 649, 890, 1164, 1165, 1172, 1174, 1175, 1184, 1185, 1186], "insensitive_match": [627, 638], "insert": [34, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 206, 273, 275, 309, 612, 626, 640, 671, 774, 851, 884, 1147, 1163, 1177, 1208, 1244], "insert_aft": [36, 309], "insert_befor": [36, 309], "insert_chart": [36, 309], "insert_column": 309, "insid": [54, 531, 774, 796, 884], "inspect": [774, 884], "instal": [95, 121, 129, 130, 132, 135, 137, 178, 268, 309, 392, 702, 842, 884, 965, 1226, 1244], "instanc": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 159, 163, 168, 173, 189, 194, 309, 542, 710, 724, 770, 792, 822, 859, 860, 884, 1023, 1244], "instanti": [34, 36, 131, 161, 247, 266, 283, 309, 837, 856, 884, 889, 1223, 1244], "instantiat": [265, 309, 1222, 1244], "instantli": [54, 796, 884], "instead": [33, 35, 39, 40, 47, 54, 55, 118, 119, 122, 129, 130, 131, 134, 140, 141, 143, 149, 156, 157, 158, 159, 163, 171, 172, 199, 212, 213, 216, 219, 225, 230, 232, 242, 243, 244, 247, 248, 249, 252, 266, 267, 268, 272, 284, 285, 309, 312, 313, 334, 353, 369, 370, 385, 399, 440, 443, 453, 516, 544, 577, 584, 614, 626, 633, 643, 644, 647, 648, 656, 657, 658, 659, 660, 671, 683, 690, 697, 699, 701, 707, 715, 716, 718, 719, 720, 730, 731, 746, 749, 753, 756, 761, 762, 765, 774, 789, 790, 796, 805, 826, 837, 838, 839, 841, 849, 857, 858, 859, 884, 890, 905, 924, 933, 939, 959, 972, 980, 981, 1018, 1034, 1089, 1121, 1127, 1146, 1148, 1151, 1160, 1163, 1170, 1180, 1181, 1184, 1185, 1193, 1194, 1195, 1208, 1225, 1226, 1244, 1248, 1252, 1253, 1257, 1270, 1271], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 172, 174, 180, 187, 190, 191, 195, 197, 199, 202, 203, 204, 206, 211, 213, 214, 216, 218, 219, 229, 230, 239, 241, 242, 245, 251, 252, 254, 257, 260, 265, 269, 272, 277, 280, 282, 285, 286, 292, 303, 309, 318, 341, 345, 353, 355, 358, 360, 361, 368, 369, 384, 388, 392, 439, 441, 442, 446, 447, 448, 454, 456, 457, 459, 462, 463, 464, 485, 491, 493, 498, 499, 500, 501, 511, 516, 517, 519, 521, 522, 523, 525, 569, 571, 574, 575, 577, 580, 583, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 616, 621, 625, 634, 639, 641, 645, 646, 647, 651, 653, 654, 662, 665, 666, 671, 678, 682, 683, 689, 691, 697, 706, 708, 714, 717, 720, 726, 728, 730, 731, 745, 746, 749, 750, 751, 755, 756, 759, 760, 763, 765, 774, 790, 793, 800, 807, 808, 811, 814, 818, 821, 831, 841, 843, 846, 848, 849, 854, 855, 859, 860, 865, 876, 884, 889, 890, 903, 904, 912, 916, 924, 926, 929, 931, 938, 939, 946, 947, 958, 961, 962, 965, 1016, 1017, 1019, 1020, 1024, 1025, 1026, 1030, 1031, 1035, 1036, 1037, 1055, 1057, 1058, 1064, 1066, 1071, 1072, 1073, 1074, 1084, 1089, 1090, 1092, 1094, 1095, 1096, 1098, 1109, 1110, 1112, 1113, 1114, 1116, 1117, 1120, 1121, 1123, 1129, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1154, 1159, 1162, 1171, 1176, 1178, 1182, 1183, 1184, 1188, 1190, 1191, 1199, 1202, 1203, 1208, 1215, 1216, 1222, 1229, 1234, 1244, 1255, 1258, 1270, 1273], "int16": [1, 50, 271, 309, 382, 383, 415, 677, 774, 890, 956, 957, 992, 1215, 1222, 1244], "int32": [1, 36, 50, 55, 116, 119, 156, 158, 159, 201, 214, 241, 266, 309, 344, 345, 347, 370, 395, 405, 406, 407, 408, 413, 435, 440, 590, 681, 749, 774, 813, 835, 884, 890, 912, 915, 916, 918, 968, 978, 982, 983, 984, 990, 1012, 1018, 1102, 1227, 1228, 1244], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 93, 129, 138, 176, 185, 194, 201, 233, 241, 246, 247, 261, 268, 309, 339, 340, 342, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 382, 383, 424, 425, 426, 427, 428, 429, 430, 434, 440, 443, 531, 532, 555, 557, 559, 574, 582, 590, 641, 666, 677, 681, 697, 722, 730, 731, 734, 749, 756, 770, 774, 797, 804, 813, 830, 835, 836, 837, 884, 890, 910, 911, 913, 914, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 931, 956, 957, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1013, 1018, 1103, 1125, 1203, 1215, 1225, 1226, 1227, 1228, 1244], "int64arrai": [1219, 1244], "int8": [1, 50, 76, 194, 309, 357, 358, 382, 383, 400, 403, 409, 410, 416, 419, 432, 433, 522, 677, 746, 749, 765, 774, 889, 928, 929, 956, 957, 961, 973, 976, 986, 987, 993, 996, 1009, 1010, 1095, 1130, 1215, 1225, 1232, 1244], "int_rang": [201, 277, 286, 295, 309, 697, 733, 813, 822, 860, 868, 884], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 150, 157, 159, 162, 164, 184, 201, 241, 264, 267, 309, 322, 373, 419, 452, 453, 569, 575, 577, 582, 589, 590, 602, 639, 662, 666, 691, 697, 726, 730, 731, 749, 774, 803, 813, 835, 884, 890, 945, 996, 1029, 1121, 1125, 1132, 1139, 1146, 1176, 1199, 1203, 1225, 1244, 1264, 1270, 1273], "integer_list": 72, "integr": [36, 271, 309, 1273], "intend": [1, 152, 153, 154, 155, 671, 1208], "intens": [219, 295, 309, 570, 774, 1103, 1244], "interact": [159, 163, 180, 309, 800, 884], "interchang": [117, 170], "interest": [130, 420, 423, 997, 1000], "interfac": [0, 106, 107, 786, 1270], "interleav": 1265, "intermedi": [207, 309, 816, 884, 1273], "intern": [37, 38, 131, 150, 213, 261, 309, 453, 774, 1219, 1244, 1253], "interpol": [180, 236, 301, 309, 448, 468, 535, 578, 600, 601, 747, 774, 800, 832, 874, 884, 960, 1040, 1122, 1138, 1244], "interpolate_bi": [774, 1244], "interpolationmethod": [467, 774, 1039, 1244], "interpret": [120, 122, 129, 130, 143, 309, 884], "intersect": [36, 309, 513, 890, 1086, 1269], "interv": [201, 241, 279, 309, 385, 418, 431, 464, 469, 577, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 835, 884, 959, 973, 975, 976, 982, 984, 986, 987, 990, 992, 993, 995, 999, 1008, 1009, 1037, 1041, 1121, 1244], "intoexpr": [172, 200, 201, 241, 247, 248, 252, 255, 272, 283, 284, 288, 309, 324, 342, 362, 365, 367, 369, 392, 440, 446, 464, 468, 469, 492, 512, 513, 514, 515, 570, 584, 585, 593, 595, 597, 599, 601, 604, 606, 608, 612, 614, 623, 628, 637, 649, 652, 653, 654, 659, 660, 675, 683, 693, 695, 700, 703, 704, 705, 706, 708, 710, 713, 717, 724, 738, 740, 743, 749, 752, 756, 758, 774, 790, 812, 813, 835, 837, 838, 841, 844, 849, 856, 857, 861, 884, 888, 913, 932, 935, 937, 965, 1018, 1024, 1040, 1041, 1065, 1127, 1128, 1147, 1151, 1189, 1190, 1191, 1196, 1197, 1244], "intoexprcolumn": [192, 309, 341, 345, 346, 353, 368, 369, 374, 418, 446, 449, 491, 499, 502, 511, 516, 571, 575, 611, 614, 634, 639, 642, 651, 656, 657, 658, 662, 666, 671, 682, 683, 697, 702, 715, 716, 718, 719, 730, 731, 761, 762, 764, 774, 809, 841, 884, 912, 916, 917, 924, 948, 995, 1008, 1024, 1064, 1072, 1075, 1084, 1089, 1117, 1171, 1176, 1179, 1188, 1193, 1194, 1195, 1199, 1208, 1244], "introduc": [46, 85, 661, 663, 664, 1198, 1200, 1201], "introduct": 1269, "intuit": [453, 774, 890], "invalid": [33, 42, 107, 129, 130, 143, 309, 370, 641, 642, 666, 684, 774, 884, 933, 939, 1178, 1179, 1203, 1244], "invalid_valu": 933, "invalidoperationerror": [585, 774, 1128, 1244, 1268], "invari": [822, 884], "invers": [326, 327, 328, 329, 330, 331, 774, 897, 898, 899, 900, 901, 902, 1225, 1244, 1267], "invert": 890, "invok": [531, 774], "involv": [192, 309, 809, 884], "io": [31, 33, 36, 37, 38, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 181, 249, 309, 387, 455, 544, 774, 801, 839, 884], "iobas": [39, 40, 138, 139, 181, 249, 309, 387, 544, 547, 774, 801, 839, 884], "ipc": [37, 38, 43, 135, 136, 137, 146, 149, 309, 786, 884], "ipccompress": [37, 38, 309], "is_between": [774, 1244], "is_dupl": [309, 774, 1244], "is_elementwis": [531, 774, 888], "is_empti": [309, 1244], "is_finit": [774, 1244], "is_first_distinct": [774, 1244], "is_in": [93, 192, 309, 774, 1244], "is_infinit": [774, 1244], "is_last_distinct": [774, 1244], "is_nan": [774, 1244], "is_not_nan": [774, 1244], "is_not_nul": [774, 1244], "is_nul": [184, 309, 774, 803, 884, 1244], "is_numer": 1273, "is_odd": [247, 309, 837, 884, 890], "is_selector": 890, "is_sort": 1244, "is_uniqu": [309, 774, 1244], "isn": 764, "iso": [405, 432, 433, 978, 1009, 1010, 1265], "iso8601": [129, 130, 143], "iso_lang": 1265, "iso_year": 435, "isodow": 1266, "isoweek": 1266, "isoyear": 1266, "issu": [86, 87, 90, 91, 94, 101, 103, 114, 129, 130, 131, 143, 309, 382, 383, 677, 774, 956, 957, 1215, 1244, 1270], "ital": [36, 309], "item": [13, 55, 130, 199, 242, 245, 309, 341, 345, 346, 388, 445, 491, 493, 500, 502, 511, 611, 654, 774, 912, 916, 917, 961, 1022, 1064, 1066, 1073, 1075, 1084, 1145, 1191, 1244], "iter": [53, 54, 55, 65, 116, 131, 162, 164, 172, 182, 192, 200, 201, 212, 213, 214, 241, 242, 243, 244, 247, 248, 255, 272, 273, 283, 284, 287, 288, 309, 369, 384, 392, 449, 570, 623, 675, 683, 693, 695, 700, 702, 703, 704, 705, 713, 738, 740, 743, 752, 756, 758, 764, 770, 774, 790, 802, 809, 812, 813, 835, 837, 838, 844, 849, 856, 857, 861, 884, 888, 889, 958, 965, 1146, 1244, 1273], "iter_batch": 131, "iter_column": 309, "iter_row": [214, 242, 243, 244, 309], "iter_slic": 309, "its": [123, 151, 187, 267, 309, 396, 418, 431, 440, 531, 588, 623, 764, 774, 798, 804, 855, 884, 942, 969, 995, 1008, 1016, 1018, 1131, 1225, 1244, 1272], "itself": [157, 309, 312, 313, 532, 592, 594, 596, 598, 600, 602, 603, 605, 607, 750, 751, 774, 820, 884, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1244, 1248, 1252, 1253, 1270], "ix": [234, 309], "j": [273, 309], "jan": [818, 884], "jax": [266, 309, 1223, 1244], "jax_enable_x64": [266, 309], "jaxexporttyp": [266, 309], "jjk": 890, "jkl": [635, 1172], "jklmn": 1265, "job": [791, 884], "join": [46, 47, 53, 54, 55, 85, 192, 216, 278, 309, 449, 467, 570, 626, 753, 774, 795, 796, 805, 809, 818, 831, 842, 853, 858, 884, 1163, 1253, 1255, 1261, 1269, 1270], "join_asof": [215, 309, 817, 884], "join_nul": [215, 309, 817, 884], "joinstrategi": [47, 215, 309, 817, 884], "joinvalid": [215, 309, 817, 884], "jpy": 1273, "json": [2, 3, 5, 6, 39, 40, 126, 138, 139, 145, 147, 181, 249, 309, 387, 455, 544, 547, 641, 642, 673, 774, 786, 801, 839, 884, 888, 1178, 1179, 1211], "json_path": [642, 1179], "json_path_match": [641, 1178], "json_str": [5, 138, 139], "json_val": [642, 1179], "jsonpath": [641, 642, 1178, 1179], "jst": [123, 890], "jul": [661, 1198, 1265], "juli": [1265, 1266], "just": [36, 121, 131, 143, 225, 276, 309, 826, 852, 884, 890], "k": [172, 244, 272, 273, 309, 368, 369, 379, 481, 682, 683, 774, 790, 849, 884, 938, 953, 1056, 1229, 1244], "k_2": [620, 774, 1158, 1244], "k_3": [620, 774, 1158, 1244], "kanji": 890, "karen": [234, 309], "kathmandu": [971, 972, 998], "kb": [187, 309, 366, 936, 1016, 1244], "kde": [1244, 1248], "keep": [47, 129, 130, 139, 143, 146, 147, 192, 274, 278, 279, 309, 455, 531, 546, 554, 584, 703, 774, 809, 850, 853, 884, 1127, 1244], "kei": [36, 41, 45, 47, 52, 55, 139, 141, 143, 145, 146, 147, 148, 201, 213, 215, 216, 226, 232, 234, 238, 240, 243, 244, 278, 309, 449, 532, 584, 585, 756, 774, 813, 817, 818, 827, 833, 834, 853, 884, 890, 1127, 1128, 1244, 1259], "kept": [274, 309, 850, 884], "keyerror": 16, "keystrok": 770, "keyword": [35, 133, 141, 144, 159, 163, 178, 200, 233, 242, 247, 248, 268, 283, 284, 288, 309, 449, 574, 675, 752, 756, 764, 774, 812, 830, 837, 838, 856, 857, 861, 884, 1226, 1244, 1256], "kleen": [321, 323, 692, 693, 694, 695, 774, 894, 895, 1244], "klmnoopqrstuvwxyz": [214, 309], "knight": 1252, "know": [47, 131, 234, 276, 309, 523, 531, 774, 852, 884], "known": [135, 358, 523, 868, 929, 1096], "kurtosi": [774, 1244], "kuzu_db_conn": 131, "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 128, 131, 132, 159, 161, 163, 178, 192, 233, 268, 309, 574, 774, 809, 830, 884, 888, 1226, 1244, 1256, 1270], "k\u00f9zudb": 131, "l1": 55, "l2": 55, "label": [201, 266, 271, 309, 313, 385, 577, 591, 592, 594, 596, 598, 600, 603, 605, 607, 774, 813, 831, 884, 959, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1244], "label_column": [271, 309], "lag": [252, 309, 353, 516, 614, 704, 774, 841, 884, 924, 1089, 1151, 1244], "lake": [35, 133, 144, 309, 786], "lambda": [143, 194, 219, 233, 234, 238, 295, 309, 358, 439, 440, 441, 442, 523, 531, 532, 554, 555, 710, 711, 724, 735, 736, 748, 774, 822, 830, 833, 868, 884, 929, 1017, 1018, 1019, 1020, 1096, 1103, 1244], "land": [392, 965], "languag": [143, 201, 216, 241, 279, 309, 414, 418, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 818, 835, 884, 991, 995, 1008, 1018, 1244], "larg": [10, 11, 14, 47, 131, 134, 140], "large_str": [214, 261, 268, 309], "larger": [10, 42, 43, 44, 45, 53, 54, 453, 706, 774, 795, 796, 884], "largest": [172, 272, 309, 369, 682, 683, 774, 790, 849, 884, 1229, 1244], "last": [35, 139, 143, 146, 147, 152, 153, 154, 155, 203, 216, 218, 234, 244, 255, 260, 267, 274, 303, 309, 334, 345, 354, 384, 400, 411, 415, 432, 475, 500, 518, 521, 523, 553, 554, 556, 558, 560, 561, 585, 622, 623, 639, 654, 662, 678, 700, 759, 770, 774, 818, 844, 848, 850, 876, 884, 890, 905, 916, 925, 958, 973, 988, 992, 1009, 1036, 1048, 1058, 1073, 1091, 1094, 1128, 1160, 1176, 1191, 1199, 1216, 1225, 1244, 1263, 1265], "last_column": [36, 309], "later": [216, 249, 309, 544, 839, 884], "latest": [117, 133, 144, 170, 417, 454, 542, 661, 664, 717, 774, 994, 1198, 1201], "latt": 890, "latter": [36, 189, 309, 1023, 1244], "lazi": [1, 55, 143, 159, 216, 233, 234, 256, 309, 532, 726, 746, 749, 765, 774, 800, 817, 818, 858, 861, 862, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 884, 890, 1252, 1253, 1254, 1255, 1256, 1258, 1270, 1273], "lazili": [129, 130, 143, 144, 145, 146, 147, 148, 796, 884], "lazy_fram": [53, 54], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 143, 144, 145, 146, 147, 148, 149, 152, 153, 159, 176, 181, 217, 233, 234, 249, 256, 309, 387, 449, 523, 544, 753, 774, 786, 882, 883, 890, 1252, 1253, 1256, 1258, 1270, 1271, 1273], "lazygroupbi": [812, 813, 835, 884], "lbl": [266, 271, 309], "ldf": [1, 861, 862, 864, 866, 869, 870, 871, 872, 873, 874, 875], "ldot": [440, 774, 1018, 1244], "le": [632, 774, 1244], "lead": [14, 41, 123, 149, 223, 250, 252, 259, 309, 353, 456, 459, 516, 531, 532, 613, 614, 656, 658, 706, 774, 822, 840, 841, 868, 884, 924, 1089, 1103, 1149, 1151, 1193, 1195, 1244], "leap": [404, 414, 977, 991], "leap_year": 404, "learn": [271, 309], "least": [97, 234, 309, 571, 634, 636, 774, 1117, 1171, 1173, 1244, 1263], "leav": [6, 225, 276, 309, 523, 826, 852, 884], "left": [15, 16, 36, 47, 152, 153, 154, 155, 201, 215, 216, 241, 278, 309, 385, 439, 441, 442, 467, 469, 577, 590, 593, 595, 597, 599, 601, 604, 606, 608, 612, 681, 703, 710, 711, 715, 716, 718, 719, 724, 748, 761, 762, 764, 774, 813, 817, 818, 835, 853, 884, 959, 1017, 1019, 1020, 1041, 1121, 1147, 1227, 1244, 1255, 1259, 1263], "left_clos": [385, 577, 774, 959, 1121, 1244], "left_on": [215, 216, 278, 309, 817, 818, 853, 884], "leftmost": [612, 774, 1147, 1244, 1265], "len": [12, 36, 159, 163, 176, 214, 234, 286, 290, 295, 309, 378, 532, 541, 543, 588, 707, 730, 774, 797, 855, 860, 863, 868, 884, 889, 1131, 1244], "len_byt": [12, 644, 1181], "len_char": [643, 1180], "length": [55, 56, 72, 134, 140, 143, 157, 161, 199, 201, 241, 254, 309, 312, 384, 418, 431, 517, 523, 542, 584, 585, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 621, 639, 643, 644, 645, 646, 651, 662, 671, 746, 749, 750, 751, 765, 774, 813, 831, 835, 843, 884, 888, 946, 958, 969, 995, 1008, 1090, 1096, 1114, 1127, 1128, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1159, 1176, 1180, 1181, 1182, 1183, 1188, 1199, 1208, 1244, 1261, 1263], "leq": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "less": [143, 216, 309, 453, 483, 530, 531, 654, 774, 818, 884, 1191, 1273], "letter": [188, 292, 303, 309, 443, 628, 635, 637, 649, 722, 774, 806, 865, 876, 884, 890, 1165, 1172, 1174, 1186, 1265], "level": [10, 36, 37, 38, 41, 45, 126, 143, 146, 147, 148, 194, 219, 230, 256, 261, 309, 313, 449, 774, 786, 814, 821, 845, 884, 1219, 1244, 1270], "lexic": [59, 890, 943], "lf": [42, 43, 44, 45, 50, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 836, 837, 839, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 859, 860, 863, 867, 884, 1260, 1270, 1273], "lf1": [753, 845, 884, 1256, 1258, 1271], "lf2": [753, 845, 884, 1256, 1258, 1271], "lf3": [884, 1256], "lf4": [884, 1256], "lf5": 884, "lf6": 884, "lf_other": [858, 884], "lib": [774, 1219, 1244], "librari": [1, 99, 131, 134, 531, 774, 888, 1273], "life": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "lifetim": [168, 785, 1258], "light": [36, 309], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 117, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 181, 201, 208, 210, 215, 244, 249, 266, 267, 309, 387, 393, 455, 495, 531, 546, 580, 634, 657, 658, 688, 770, 774, 791, 796, 801, 813, 884, 888, 966, 1068, 1123, 1171, 1233, 1244], "limit": [10, 11, 45, 131, 132, 165, 191, 309, 361, 448, 454, 774, 808, 814, 884, 1026, 1244, 1261, 1269], "line": [10, 20, 36, 129, 130, 134, 143, 199, 208, 210, 309, 312, 634, 1171], "line_termin": [33, 42, 309, 884], "linear": [180, 207, 236, 301, 309, 467, 468, 490, 535, 578, 600, 601, 704, 705, 747, 774, 800, 816, 832, 874, 884, 960, 1039, 1040, 1063, 1122, 1138, 1244], "lineitem": [125, 130, 132], "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 91, 116, 118, 119, 120, 122, 123, 125, 127, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 158, 159, 163, 177, 182, 185, 187, 188, 192, 198, 200, 201, 205, 213, 229, 232, 241, 242, 243, 244, 247, 255, 262, 263, 271, 273, 274, 275, 277, 283, 288, 289, 309, 319, 346, 357, 358, 359, 385, 392, 445, 451, 456, 465, 473, 531, 532, 542, 543, 570, 577, 583, 586, 591, 592, 594, 596, 598, 600, 603, 605, 607, 622, 623, 633, 635, 637, 652, 672, 674, 681, 700, 702, 704, 716, 719, 721, 729, 731, 734, 736, 754, 756, 762, 770, 774, 798, 804, 806, 809, 812, 813, 837, 844, 850, 851, 856, 858, 861, 862, 884, 889, 890, 917, 928, 929, 930, 946, 959, 965, 1016, 1022, 1027, 1030, 1032, 1037, 1038, 1046, 1103, 1121, 1129, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1165, 1170, 1172, 1174, 1186, 1189, 1224, 1227, 1244, 1252, 1257, 1261, 1262, 1272, 1273], "list_of_seri": 736, "lit": [1, 320, 362, 469, 553, 638, 704, 710, 724, 746, 749, 765, 774, 1026, 1244], "liter": [15, 16, 20, 35, 131, 162, 163, 164, 247, 248, 252, 278, 283, 284, 309, 320, 362, 374, 396, 437, 438, 446, 453, 458, 460, 469, 483, 530, 549, 551, 564, 565, 575, 584, 585, 627, 629, 638, 647, 648, 675, 676, 684, 693, 695, 697, 703, 704, 705, 713, 714, 717, 730, 734, 738, 740, 743, 752, 756, 758, 760, 774, 808, 837, 838, 841, 853, 856, 857, 884, 890, 932, 948, 969, 1024, 1041, 1127, 1128, 1146, 1148, 1151, 1164, 1166, 1175, 1184, 1185, 1244, 1265], "littl": [243, 309], "lmn": 890, "ln": [439, 440, 441, 442, 774, 1017, 1018, 1019, 1020, 1244, 1263], "ln_a": 1264, "load": [3, 5, 6, 119, 121, 131, 133, 134, 140, 144, 145, 162, 164, 309, 774, 786, 814, 821, 884, 888, 1273], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 134, "load_workbook": 134, "loader": [271, 309], "lobster": [638, 1175], "loc": [309, 313], "local": [4, 35, 131, 133, 144, 145, 148, 309, 431, 572, 573, 774, 941, 942, 971, 972, 995, 998, 1008, 1118, 1119, 1244, 1253], "localhost": 131, "localis": [418, 431, 1008], "locat": [36, 141, 143, 146, 148, 189, 239, 269, 275, 309, 612, 774, 851, 884, 1023, 1030, 1146, 1147, 1244], "lock": 165, "log": [29, 49, 369, 436, 528, 551, 575, 683, 774, 1014, 1244, 1263], "log10": [774, 1244, 1263], "log10_a": 1264, "log16_a": 1264, "log1p": [774, 1244, 1263], "log1p_a": 1264, "log2": 1263, "logarithm": [526, 527, 528, 774, 1099, 1100, 1101, 1244, 1264], "logic": [55, 219, 295, 309, 312, 313, 321, 323, 387, 532, 681, 692, 693, 694, 695, 736, 774, 801, 805, 817, 839, 868, 884, 894, 895, 1103, 1225, 1227, 1244, 1248], "london": [397, 401, 417, 970, 974, 994], "london_timezon": [417, 994], "london_to_amsterdam": [417, 994], "long": [188, 225, 234, 276, 277, 309, 806, 826, 852, 884], "longer": [129, 130, 143], "longest": 523, "look": [10, 201, 309, 362, 523, 813, 884, 932], "lookup": 770, "loop": [532, 774], "lose": [394, 967], "lossi": [129, 130, 143], "love": [628, 649, 1165, 1186], "low": [17, 131, 577, 774, 1121, 1244], "low_memori": [129, 130, 139, 141, 143, 147, 148], "lower": [143, 180, 201, 236, 301, 309, 374, 469, 529, 554, 578, 582, 600, 601, 697, 715, 716, 718, 719, 747, 761, 762, 774, 800, 813, 832, 874, 884, 948, 960, 1041, 1102, 1122, 1125, 1138, 1232, 1244, 1261, 1263], "lower_bound": [201, 309, 374, 469, 774, 813, 884, 948, 1041, 1232, 1244], "lowercas": [560, 667, 1204, 1265], "lowest": [529, 774], "lru_cach": [219, 309, 532, 774, 1103, 1244], "lst": 158, "lt": [449, 690, 774, 1244], "ltrim": 1263, "lyric": [628, 649, 1165, 1186], "lz4": [37, 38, 41, 43, 45, 309, 884], "lzo": [41, 45, 309, 884], "m": [62, 64, 215, 309, 393, 394, 396, 401, 402, 420, 422, 423, 434, 634, 661, 663, 664, 668, 717, 718, 719, 720, 726, 817, 884, 890, 966, 967, 969, 974, 975, 997, 999, 1000, 1011, 1171, 1198, 1200, 1201, 1205, 1256, 1265, 1266], "m_2": [620, 774, 1158, 1244], "m_3": [620, 774, 1158, 1244], "m_i": [620, 774, 1158, 1244], "machin": 1273, "maco": 151, "made": [36, 131, 309], "mai": [1, 35, 41, 42, 43, 44, 45, 53, 54, 55, 63, 65, 116, 118, 119, 120, 122, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 180, 181, 187, 189, 201, 216, 219, 241, 249, 256, 266, 268, 271, 277, 278, 279, 309, 312, 313, 384, 385, 387, 392, 393, 394, 405, 414, 418, 420, 423, 431, 443, 464, 498, 523, 531, 532, 541, 544, 577, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 637, 641, 643, 702, 710, 711, 715, 716, 718, 719, 724, 748, 750, 751, 761, 762, 774, 795, 796, 800, 801, 805, 813, 818, 822, 835, 839, 845, 853, 859, 860, 868, 884, 942, 943, 958, 959, 960, 965, 966, 967, 978, 991, 995, 997, 1000, 1008, 1016, 1023, 1037, 1071, 1103, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1174, 1178, 1180, 1223, 1226, 1228, 1244, 1248, 1273], "main": [151, 796, 884], "maintain": [42, 43, 44, 45, 255, 309, 359, 524, 612, 623, 685, 700, 774, 800, 844, 884, 930, 1097, 1147, 1230, 1244], "maintain_ord": [42, 43, 44, 45, 200, 232, 234, 255, 274, 279, 289, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 319, 359, 369, 456, 459, 524, 532, 623, 683, 685, 700, 774, 796, 805, 812, 831, 842, 844, 850, 862, 864, 866, 869, 870, 871, 872, 873, 874, 875, 884, 930, 1097, 1230, 1244], "major": [134, 266, 309], "make": [36, 55, 76, 116, 121, 129, 130, 133, 134, 135, 137, 141, 226, 230, 237, 267, 279, 309, 441, 442, 464, 560, 561, 570, 583, 653, 774, 827, 884, 888, 1019, 1020, 1037, 1190, 1225, 1244], "man": [650, 1187], "manag": [46, 84, 85, 785, 786, 1258, 1270], "mandatori": [36, 309], "mango": [632, 655, 1169, 1192], "mani": [131, 132, 189, 309, 637, 649, 1023, 1174, 1186, 1244], "manner": 131, "many_to_mani": [215, 309, 817, 884], "many_to_on": [215, 309, 817, 884], "map": [76, 118, 119, 129, 130, 131, 132, 135, 136, 141, 142, 143, 146, 159, 173, 176, 193, 213, 219, 238, 242, 243, 244, 246, 262, 309, 320, 418, 431, 531, 532, 553, 555, 556, 558, 560, 561, 584, 585, 688, 735, 774, 792, 833, 836, 884, 889, 890, 960, 995, 1008, 1103, 1127, 1128, 1233, 1244, 1253, 1255, 1256, 1270], "map_": 103, "map_batch": [774, 884], "map_el": [94, 219, 309, 531, 691, 774, 1244], "map_row": 309, "mapelementsstrategi": [532, 774], "mapping_strategi": [570, 774], "march": [420, 423, 997, 1000], "mariadb": 132, "mark": [126, 370, 774, 939, 1244], "markdown": 20, "marker": [36, 309], "mask": [208, 210, 309, 363, 470, 472, 475, 480, 572, 573, 627, 630, 638, 774, 933, 1027, 1041, 1042, 1045, 1048, 1054, 1118, 1119, 1148, 1164, 1167, 1175, 1235, 1244], "mass": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "massag": [225, 276, 309, 826, 852, 884], "match": [35, 36, 55, 62, 105, 116, 118, 119, 120, 122, 131, 138, 139, 147, 152, 153, 154, 155, 173, 191, 215, 216, 242, 278, 309, 538, 539, 584, 585, 602, 627, 628, 629, 632, 634, 635, 637, 638, 641, 642, 647, 648, 649, 655, 661, 663, 664, 764, 770, 774, 792, 808, 817, 818, 853, 884, 890, 1015, 1127, 1128, 1139, 1164, 1165, 1166, 1169, 1171, 1172, 1174, 1175, 1178, 1179, 1184, 1185, 1186, 1192, 1198, 1200, 1201, 1244, 1265], "matches_overlap": 637, "matches_supertyp": [191, 309, 808, 884], "materi": [219, 244, 295, 309, 795, 831, 868, 878, 884, 890, 1103, 1244], "materialis": [213, 214, 242, 243, 309], "math": [1, 10, 51, 234, 309, 386, 774, 950, 952, 1156, 1217, 1244, 1263, 1267, 1269], "mathemat": [684, 721, 774, 1263], "mathshortcut": [1, 51], "matplotlib": [151, 831, 842, 884], "matter": [201, 213, 241, 243, 244, 263, 309, 590, 657, 658, 774, 813, 835, 884], "max": [25, 36, 41, 45, 126, 180, 191, 200, 221, 234, 241, 309, 313, 380, 448, 523, 531, 570, 580, 584, 585, 590, 592, 593, 613, 654, 738, 754, 774, 800, 808, 812, 835, 884, 954, 960, 1026, 1096, 1123, 1134, 1149, 1191, 1244, 1252, 1261, 1263], "max_a": [241, 309, 590, 774, 835, 884], "max_binary_s": 131, "max_col": [157, 159], "max_colname_length": [199, 309], "max_color": [36, 309], "max_data_s": 163, "max_elem": 1261, "max_horizont": [309, 737], "max_items_per_column": [199, 309], "max_level": 126, "max_siz": [158, 159, 161, 163, 1273], "max_text_s": 131, "max_valu": 1273, "max_width": [523, 1096], "maxim": [296, 332, 774, 869, 903, 1244], "maximum": [10, 26, 33, 41, 42, 45, 63, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 149, 157, 158, 159, 161, 163, 199, 201, 220, 221, 309, 339, 488, 533, 562, 572, 580, 639, 641, 644, 651, 662, 737, 738, 774, 813, 823, 884, 910, 979, 1061, 1104, 1112, 1118, 1123, 1176, 1178, 1181, 1188, 1199, 1244, 1260], "mb": [187, 309, 1016, 1244], "me": [628, 649, 1165, 1186], "mean": [41, 45, 129, 130, 135, 141, 143, 146, 180, 191, 200, 201, 216, 223, 234, 241, 279, 288, 309, 414, 418, 431, 445, 448, 453, 590, 593, 594, 595, 597, 599, 601, 604, 606, 608, 620, 626, 634, 640, 715, 716, 718, 719, 720, 740, 761, 762, 764, 774, 800, 808, 812, 813, 818, 822, 835, 861, 884, 960, 991, 995, 1008, 1022, 1026, 1135, 1158, 1163, 1171, 1177, 1244, 1260, 1261], "mean_horizont": [309, 739], "measur": [225, 276, 309, 313, 826, 852, 884], "measure_a": [309, 313], "measure_b": [309, 313], "median": [180, 234, 309, 448, 596, 597, 774, 800, 858, 884, 960, 1136, 1244, 1263], "mediat": 1270, "medium": [36, 309], "megan": [226, 309, 827, 884], "melt": [276, 309, 852, 884], "member": [201, 309, 813, 884, 1046, 1244], "membership": [341, 491, 912, 1064], "memori": [14, 41, 45, 53, 54, 55, 116, 117, 120, 121, 122, 129, 130, 131, 133, 134, 135, 139, 141, 143, 146, 147, 148, 170, 189, 219, 243, 244, 253, 267, 295, 309, 570, 581, 615, 774, 795, 796, 884, 1023, 1103, 1124, 1152, 1153, 1225, 1244], "memory_map": [135, 141, 146], "merg": [35, 215, 216, 226, 309, 817, 818, 827, 884], "merge_sort": [309, 884], "messi": [634, 636, 1171, 1173], "met": 764, "meta": [387, 774], "metadata": [0, 145, 786], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115, 117, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 156, 159, 163, 168, 176, 180, 181, 184, 189, 196, 200, 207, 213, 219, 230, 236, 242, 243, 244, 252, 274, 283, 290, 295, 301, 309, 318, 321, 322, 353, 374, 387, 420, 423, 437, 438, 446, 453, 455, 458, 460, 467, 483, 516, 530, 532, 547, 549, 551, 553, 554, 556, 558, 560, 561, 564, 565, 566, 569, 575, 578, 580, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 614, 657, 658, 659, 660, 665, 671, 676, 684, 686, 691, 706, 736, 747, 766, 767, 769, 770, 774, 775, 776, 779, 780, 781, 782, 783, 786, 796, 800, 801, 803, 816, 832, 841, 850, 856, 863, 868, 874, 884, 889, 896, 924, 948, 960, 997, 1000, 1023, 1024, 1039, 1089, 1103, 1122, 1123, 1138, 1151, 1202, 1208, 1227, 1236, 1238, 1240, 1244, 1245, 1249, 1250, 1251, 1253, 1257], "metric": 131, "micro": [419, 996], "microsecond": [62, 64, 201, 213, 216, 241, 243, 244, 263, 279, 309, 414, 418, 426, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 717, 718, 719, 720, 760, 761, 762, 774, 813, 818, 831, 835, 884, 890, 991, 995, 1003, 1008, 1018, 1244, 1266], "microsoft": [36, 309], "mid_color": [36, 309], "midnight": 77, "midpoint": [180, 236, 301, 309, 578, 600, 601, 747, 774, 800, 832, 874, 884, 960, 1122, 1138, 1244], "might": [129, 130, 143, 165, 234, 267, 276, 309, 532, 686, 774, 844, 852, 884], "millennia": 1266, "millennium": 1266, "milli": [419, 996], "millisecond": [201, 216, 241, 279, 309, 403, 409, 414, 418, 427, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 718, 719, 720, 761, 762, 774, 813, 818, 835, 884, 890, 991, 995, 1004, 1008, 1018, 1244, 1266], "milliseconds_diff": [426, 427, 429], "mimic": 704, "min": [36, 41, 45, 180, 191, 228, 234, 241, 309, 381, 448, 532, 570, 580, 590, 598, 599, 743, 752, 774, 800, 808, 835, 884, 888, 955, 960, 1026, 1123, 1137, 1244, 1261, 1263, 1266, 1273], "min_a": [241, 309, 590, 774, 835, 884], "min_col": [157, 159], "min_color": [36, 309], "min_elem": 1261, "min_horizont": [309, 742, 752], "min_period": [384, 439, 441, 442, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 750, 751, 774, 958, 1017, 1019, 1020, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1244], "min_siz": [158, 159, 161, 163, 1273], "min_valu": 1273, "mincol": 157, "minim": [299, 333, 340, 489, 615, 623, 774, 872, 904, 911, 1062, 1107, 1152, 1244], "minimum": [41, 45, 157, 158, 159, 161, 163, 194, 227, 228, 309, 439, 441, 442, 548, 563, 573, 580, 742, 743, 774, 828, 884, 985, 1017, 1019, 1020, 1113, 1119, 1123, 1244, 1260, 1273], "minu": [414, 566, 774, 991], "minut": [201, 216, 241, 279, 309, 403, 406, 408, 413, 414, 418, 419, 428, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 717, 718, 719, 720, 760, 761, 762, 774, 813, 818, 835, 884, 890, 991, 995, 1005, 1008, 1018, 1244, 1266], "minutes_diff": 428, "misc": 1258, "miscellan": 786, "mismatch": [55, 108, 139, 147, 152, 154], "miss": [55, 129, 130, 143, 190, 196, 309, 361, 439, 441, 442, 447, 454, 476, 477, 523, 774, 807, 884, 1017, 1019, 1020, 1025, 1244], "missing_utf8_is_empty_str": [129, 130, 143], "mix": [11, 216, 267, 309, 753, 845, 884, 890, 960, 1244], "mixin": 1, "mlnm": 407, "mm": [36, 309], "mn": 1265, "mno": [16, 20], "mnop": 1265, "mo": 720, "mocha": 890, "mod": [774, 1263], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 152, 154, 234, 256, 309, 635, 746, 749, 765, 774, 795, 796, 805, 884, 1172, 1244, 1252, 1253, 1270], "model": [271, 309], "modifi": [129, 130, 143, 165, 168, 189, 205, 212, 213, 281, 309, 335, 417, 434, 627, 634, 635, 638, 647, 648, 774, 896, 994, 1011, 1023, 1164, 1171, 1172, 1175, 1184, 1185, 1204, 1206, 1207, 1244], "modul": [87, 95, 134, 773, 890, 1273], "modulu": [549, 774], "moment": [41, 178, 309, 481, 620, 774, 1056, 1158, 1244], "mon": 1266, "mondai": [201, 309, 392, 431, 433, 702, 813, 884, 965, 1008, 1010], "monkei": [645, 646, 1182, 1183], "month": [201, 216, 241, 279, 309, 400, 411, 412, 414, 418, 420, 423, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 714, 715, 716, 717, 718, 719, 720, 761, 762, 774, 813, 818, 835, 884, 973, 988, 989, 991, 995, 997, 1000, 1008, 1018, 1244, 1266], "month_nam": [420, 423], "monthbegin": [412, 989], "monthend": [411, 988], "moos": 890, "more": [20, 36, 41, 45, 47, 55, 84, 85, 113, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 138, 139, 140, 141, 144, 145, 147, 152, 154, 159, 168, 178, 180, 192, 212, 213, 219, 225, 230, 242, 243, 245, 256, 266, 267, 271, 274, 276, 295, 309, 312, 313, 322, 359, 449, 453, 461, 481, 511, 524, 528, 531, 532, 569, 611, 620, 635, 643, 661, 663, 664, 685, 696, 707, 723, 729, 732, 739, 741, 744, 745, 754, 764, 770, 774, 800, 809, 826, 845, 850, 852, 884, 888, 890, 930, 942, 960, 1033, 1034, 1056, 1084, 1097, 1103, 1145, 1158, 1172, 1180, 1198, 1200, 1201, 1223, 1225, 1230, 1244, 1248, 1258, 1259, 1268, 1271, 1272, 1273], "more_bi": [232, 255, 309, 623, 774, 844, 884], "more_column": [188, 275, 309, 443, 722, 774, 806, 851, 884, 890], "more_expr": [570, 700, 703, 704, 705, 774], "more_nam": [672, 770], "most": [36, 116, 129, 130, 132, 143, 152, 153, 154, 155, 267, 309, 542, 550, 571, 585, 654, 774, 1108, 1117, 1128, 1191, 1225, 1244, 1255, 1270], "mostli": [261, 309, 449, 774], "move": [18, 244, 309, 392, 439, 440, 441, 442, 592, 594, 598, 605, 774, 965, 1017, 1018, 1019, 1020, 1134, 1135, 1137, 1141, 1244], "mssql": [34, 309], "much": [219, 277, 295, 309, 384, 498, 532, 643, 644, 736, 774, 868, 958, 1071, 1103, 1180, 1181, 1244], "mul": 774, "multi": [8, 36, 129, 130, 271, 309, 443, 634, 774, 1171], "multi_fram": [36, 309], "multipl": [36, 53, 54, 55, 100, 129, 130, 134, 140, 143, 146, 147, 148, 157, 159, 163, 182, 187, 189, 192, 200, 201, 205, 214, 232, 234, 244, 247, 250, 255, 278, 283, 288, 309, 369, 498, 531, 537, 542, 550, 551, 570, 584, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 623, 672, 683, 700, 707, 724, 735, 737, 742, 748, 754, 757, 764, 770, 774, 795, 796, 802, 809, 812, 813, 837, 840, 844, 853, 856, 861, 868, 884, 896, 925, 1016, 1023, 1071, 1091, 1108, 1127, 1129, 1160, 1244, 1256, 1261], "multipli": [531, 591, 592, 594, 596, 598, 600, 603, 605, 607, 675, 774, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1244], "multithread": [255, 309, 623, 700, 774, 844, 884, 925, 1091, 1160, 1244], "must": [36, 65, 117, 118, 133, 144, 145, 149, 180, 188, 201, 216, 226, 234, 241, 242, 309, 385, 523, 532, 577, 584, 585, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 764, 774, 800, 806, 813, 818, 822, 827, 835, 842, 884, 888, 959, 960, 1121, 1127, 1128, 1244], "mutual": [242, 309], "my": [145, 149, 669, 1206], "my_column": 868, "my_column_": [273, 309], "my_column_0": [273, 309], "my_column_1": [273, 309], "my_column_2": [273, 309], "my_custom_aggreg": 736, "my_fil": 135, "my_holidai": [392, 702, 965], "my_larger_than_ram_fil": [42, 43, 44, 45, 884], "my_long_fil": 143, "my_struct": 756, "mydf": 143, "myrol": 132, "mysql": 132, "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 125, 129, 130, 134, 139, 143, 159, 174, 189, 195, 201, 203, 213, 214, 218, 219, 243, 244, 245, 252, 257, 260, 263, 265, 280, 292, 294, 303, 309, 325, 353, 358, 366, 368, 369, 384, 388, 392, 394, 396, 402, 422, 434, 446, 449, 457, 463, 485, 493, 499, 501, 511, 512, 516, 519, 521, 523, 525, 571, 574, 583, 603, 604, 607, 608, 611, 614, 620, 625, 639, 643, 644, 647, 653, 654, 656, 657, 662, 664, 678, 682, 683, 684, 688, 689, 691, 706, 708, 717, 718, 719, 720, 726, 728, 746, 749, 750, 751, 755, 759, 763, 765, 774, 793, 795, 811, 813, 814, 821, 841, 846, 848, 854, 865, 867, 876, 884, 890, 924, 929, 936, 938, 947, 958, 961, 965, 967, 969, 975, 999, 1011, 1023, 1024, 1031, 1036, 1058, 1066, 1072, 1074, 1084, 1085, 1089, 1094, 1096, 1117, 1140, 1142, 1145, 1151, 1158, 1162, 1176, 1180, 1181, 1184, 1190, 1191, 1199, 1201, 1216, 1222, 1229, 1233, 1234, 1244, 1255, 1256, 1262, 1265, 1266, 1268, 1270, 1273], "n0": [358, 523], "n00": [929, 1096], "n01": [929, 1096], "n02": [929, 1096], "n1": [358, 523], "n2": [1, 358], "n3": 1, "n_1": [449, 774], "n_2": [449, 774], "n_3": [449, 774], "n_bar": 1260, "n_bit": 1265, "n_byte": [366, 643, 644, 1265], "n_char": [643, 644, 1265], "n_chunk": [309, 896, 1023, 1124, 1244], "n_elem": 1261, "n_even": 890, "n_field_strategi": [523, 1096], "n_film": 1252, "n_foo_uniqu": 1260, "n_kilobyt": 366, "n_row": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 214, 309, 884], "n_thread": [129, 130], "n_uniqu": [309, 325, 774, 1244], "na": [268, 309, 655, 1226, 1244], "naiv": [396, 397, 664, 969, 970, 1201], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 92, 116, 118, 119, 120, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 155, 156, 157, 159, 162, 163, 164, 172, 173, 176, 177, 182, 183, 184, 188, 192, 193, 196, 197, 199, 200, 211, 212, 213, 215, 216, 219, 221, 223, 225, 226, 228, 232, 234, 238, 242, 243, 244, 246, 247, 248, 255, 256, 259, 262, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 283, 284, 285, 286, 287, 288, 294, 309, 313, 320, 358, 362, 363, 365, 367, 369, 385, 420, 423, 443, 449, 469, 476, 477, 478, 479, 523, 532, 537, 539, 541, 543, 546, 570, 577, 587, 623, 635, 636, 647, 648, 672, 674, 675, 683, 688, 692, 693, 694, 695, 696, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 712, 713, 722, 723, 728, 729, 732, 737, 738, 739, 740, 741, 742, 743, 744, 747, 750, 751, 752, 753, 755, 756, 757, 758, 759, 763, 764, 770, 774, 790, 792, 797, 798, 802, 803, 806, 809, 812, 817, 818, 826, 827, 833, 836, 837, 838, 844, 845, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 867, 884, 888, 889, 890, 893, 929, 947, 959, 997, 1000, 1015, 1096, 1121, 1126, 1171, 1172, 1173, 1184, 1185, 1209, 1212, 1220, 1221, 1226, 1233, 1244, 1253, 1254, 1255, 1256, 1257, 1258, 1269, 1270, 1273], "name_gener": [273, 309], "named_agg": [288, 861], "named_bi": [200, 309, 812, 884], "named_expr": [247, 248, 283, 284, 309, 675, 752, 756, 837, 838, 856, 857, 884], "named_fram": [1256, 1270], "nameless": 121, "namespac": [1, 131, 308, 309, 312, 672, 753, 773, 786, 882, 883, 1244, 1248, 1273], "nan": [121, 159, 170, 190, 267, 268, 309, 390, 391, 437, 438, 447, 458, 460, 467, 476, 477, 478, 479, 483, 530, 533, 548, 562, 563, 564, 565, 591, 684, 706, 774, 807, 884, 898, 902, 963, 964, 1025, 1049, 1050, 1112, 1113, 1133, 1225, 1226, 1244, 1273], "nan_as_nul": 170, "nan_max": [774, 1244], "nan_min": [774, 1244], "nan_to_nul": [121, 309, 884, 1244], "nana": 1265, "nanmax": [562, 563, 774, 1112, 1113, 1244], "nanosecond": [77, 201, 216, 241, 279, 309, 414, 418, 419, 429, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 718, 719, 720, 761, 762, 774, 813, 818, 835, 884, 991, 995, 996, 1006, 1008, 1018, 1244, 1266], "nansum": [591, 774, 1133, 1244], "nativ": [10, 34, 129, 131, 134, 135, 137, 141, 213, 219, 243, 244, 263, 267, 295, 309, 532, 736, 753, 774, 780, 845, 868, 884, 1103, 1225, 1244, 1270, 1273], "natur": [528, 774, 1101, 1244, 1259, 1264], "ndarrai": [120, 192, 267, 309, 456, 612, 774, 809, 884, 1030, 1146, 1147, 1225, 1244], "ndjson": [44, 884], "ne": [565, 774, 1244], "ne_miss": [192, 309, 774, 809, 884, 1244], "nearest": [49, 180, 216, 236, 301, 309, 373, 452, 467, 578, 600, 601, 747, 774, 800, 818, 832, 874, 884, 945, 960, 1029, 1039, 1122, 1138, 1244, 1264], "nearest_pow2": 49, "necessari": [33, 34, 42, 46, 85, 134, 267, 309, 884, 1225, 1244], "need": [55, 86, 95, 123, 129, 130, 132, 141, 143, 146, 148, 201, 241, 244, 253, 309, 523, 590, 615, 665, 720, 746, 749, 765, 774, 813, 835, 884, 1152, 1202, 1244, 1273], "neg": [13, 61, 62, 63, 64, 129, 130, 135, 137, 141, 150, 203, 218, 241, 252, 254, 260, 286, 309, 353, 516, 517, 574, 575, 590, 614, 621, 639, 651, 662, 774, 835, 841, 843, 859, 860, 884, 890, 924, 1036, 1058, 1089, 1090, 1151, 1159, 1176, 1188, 1199, 1216, 1244], "negat": [567, 774, 1115, 1244], "neither": [123, 134, 140, 245, 309, 358, 523, 929, 1096], "nest": [46, 123, 126, 160, 161, 187, 309, 786, 1016, 1244, 1270, 1273], "nest_asyncio": 151, "nesting_level": 160, "net": [635, 1172], "netherland": [216, 309], "never": [33, 42, 131, 215, 216, 242, 309, 817, 818, 884], "new": [34, 35, 36, 143, 168, 195, 205, 206, 219, 230, 231, 238, 273, 275, 277, 278, 283, 284, 309, 320, 396, 445, 455, 457, 467, 554, 555, 570, 584, 585, 589, 647, 648, 653, 654, 672, 674, 770, 774, 786, 811, 833, 851, 853, 856, 857, 868, 884, 893, 969, 1022, 1031, 1114, 1126, 1127, 1128, 1132, 1184, 1185, 1190, 1191, 1209, 1212, 1221, 1244, 1270, 1272], "new_column": [129, 130, 134, 143], "new_dat": 414, "new_df": [278, 309, 853, 884], "new_fil": [31, 33, 37, 38, 41, 309], "new_from_index": 1244, "new_id": [273, 309], "new_lf": [853, 884], "new_tabl": 1272, "new_valu": [710, 711, 724, 748], "new_york": 718, "newli": 47, "newlin": [40, 139, 147, 309], "next": [49, 201, 216, 241, 279, 309, 361, 392, 414, 418, 431, 580, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 818, 835, 884, 965, 991, 995, 1008, 1123, 1244], "next_batch": 130, "next_pow2": 49, "nfruit": 662, "nl": [392, 702, 965], "nnel_id": 123, "no1": 890, "no_default": [196, 309, 584, 585, 774, 1127, 1128, 1244], "no_optim": [42, 43, 44, 45, 53, 54, 795, 796, 822, 831, 884], "nodataerror": [129, 130, 134, 140, 143], "nodd": [634, 1171], "node": [791, 795, 815, 822, 826, 831, 833, 852, 884], "nodefault": [196, 309, 584, 585, 774, 1127, 1128, 1244], "non": [4, 33, 35, 36, 42, 47, 62, 63, 121, 150, 172, 179, 214, 225, 241, 247, 248, 252, 272, 273, 276, 278, 283, 284, 309, 368, 369, 374, 378, 379, 392, 417, 469, 523, 531, 532, 571, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 629, 635, 643, 671, 675, 682, 683, 693, 695, 703, 704, 705, 707, 709, 713, 720, 738, 740, 743, 750, 751, 752, 756, 758, 774, 790, 799, 826, 835, 837, 838, 841, 849, 852, 853, 856, 857, 884, 888, 890, 938, 948, 953, 960, 965, 994, 1041, 1096, 1103, 1117, 1127, 1128, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1151, 1166, 1172, 1180, 1208, 1225, 1229, 1244, 1262, 1270], "non_exist": [417, 994], "non_numer": [33, 42, 309, 884], "none": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 54, 56, 59, 62, 63, 85, 116, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 174, 179, 180, 184, 190, 191, 192, 194, 196, 199, 201, 202, 207, 211, 215, 216, 217, 219, 222, 225, 230, 231, 234, 241, 242, 245, 249, 252, 254, 255, 261, 262, 264, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 279, 290, 294, 309, 321, 323, 324, 336, 337, 338, 345, 346, 358, 361, 374, 378, 379, 380, 383, 385, 390, 391, 399, 414, 417, 438, 439, 440, 441, 442, 443, 446, 447, 448, 454, 461, 462, 464, 467, 468, 469, 476, 477, 478, 479, 484, 486, 487, 494, 500, 502, 504, 511, 512, 513, 514, 515, 517, 523, 531, 532, 541, 544, 545, 547, 552, 565, 566, 567, 568, 570, 571, 577, 580, 581, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 611, 614, 615, 616, 617, 621, 622, 626, 627, 629, 631, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 666, 668, 671, 672, 673, 674, 681, 688, 693, 694, 695, 697, 703, 704, 705, 707, 709, 713, 715, 716, 717, 718, 719, 720, 722, 723, 730, 731, 732, 733, 734, 735, 736, 738, 740, 743, 749, 750, 751, 756, 758, 760, 761, 762, 764, 774, 793, 794, 796, 799, 800, 803, 805, 807, 808, 809, 813, 816, 817, 818, 820, 822, 826, 829, 835, 839, 841, 842, 843, 844, 850, 851, 852, 853, 858, 863, 867, 868, 877, 878, 884, 888, 889, 890, 894, 895, 903, 904, 908, 909, 916, 917, 929, 947, 948, 953, 959, 960, 962, 963, 964, 972, 979, 980, 981, 985, 994, 1014, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1033, 1035, 1037, 1039, 1040, 1041, 1051, 1052, 1055, 1056, 1057, 1059, 1060, 1063, 1067, 1073, 1075, 1077, 1084, 1085, 1086, 1087, 1088, 1090, 1096, 1103, 1104, 1105, 1106, 1107, 1116, 1121, 1122, 1123, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1151, 1154, 1155, 1158, 1159, 1162, 1163, 1164, 1166, 1168, 1169, 1172, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1203, 1205, 1208, 1211, 1219, 1221, 1222, 1223, 1225, 1226, 1227, 1233, 1234, 1244, 1252, 1254, 1255, 1256, 1258, 1261, 1262, 1266, 1270], "nonexist": [417, 994], "nor": [134, 140, 245, 309], "normal": [35, 126, 201, 309, 436, 481, 620, 688, 774, 813, 884, 1014, 1056, 1158, 1233, 1244], "normalised_scor": 131, "norowsreturnederror": [242, 309], "not_": [283, 309, 774, 856, 884, 890, 1244], "not_c": [283, 309, 856, 884], "notabl": 131, "notat": [11, 36, 309], "note": [4, 10, 20, 35, 36, 41, 46, 47, 54, 61, 62, 64, 77, 84, 85, 116, 117, 118, 120, 122, 123, 129, 131, 132, 133, 134, 138, 139, 144, 145, 147, 149, 152, 154, 157, 159, 163, 165, 168, 170, 176, 178, 180, 181, 190, 192, 201, 202, 211, 212, 213, 215, 216, 219, 230, 233, 234, 241, 242, 243, 244, 249, 252, 256, 263, 266, 268, 271, 273, 274, 276, 278, 279, 283, 285, 286, 309, 353, 374, 382, 383, 387, 390, 391, 397, 411, 412, 414, 418, 431, 440, 447, 453, 455, 462, 469, 476, 477, 495, 498, 516, 523, 532, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 584, 585, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 614, 620, 626, 627, 633, 634, 635, 636, 638, 639, 643, 644, 647, 648, 651, 656, 657, 658, 661, 662, 671, 672, 677, 684, 693, 695, 702, 710, 715, 716, 718, 719, 720, 724, 734, 746, 748, 749, 753, 761, 762, 764, 765, 770, 774, 785, 796, 800, 801, 807, 809, 813, 814, 817, 818, 821, 833, 835, 839, 841, 842, 844, 845, 850, 852, 853, 856, 859, 860, 884, 890, 924, 948, 956, 957, 960, 963, 964, 970, 988, 989, 991, 995, 1008, 1018, 1025, 1035, 1041, 1068, 1071, 1089, 1103, 1127, 1128, 1132, 1139, 1146, 1148, 1151, 1153, 1158, 1163, 1164, 1170, 1171, 1172, 1173, 1175, 1176, 1180, 1181, 1184, 1185, 1188, 1193, 1194, 1195, 1198, 1199, 1208, 1215, 1226, 1228, 1244, 1248, 1252, 1253, 1257, 1258, 1268, 1270], "noth": [20, 634, 642, 1171, 1179], "notic": [131, 192, 309, 809, 884, 1244], "notimplementederror": 170, "now": [47, 134, 241, 267, 309, 835, 884, 1225, 1244], "np": [120, 192, 267, 309, 456, 531, 612, 774, 809, 884, 1030, 1044, 1047, 1049, 1050, 1146, 1147, 1244], "nr": [292, 303, 865, 876], "nth": [195, 309, 457, 654, 770, 774, 811, 884, 1031, 1191, 1244], "nthe": [634, 1171], "nthose": [634, 1171], "nu": 632, "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 118, 119, 122, 126, 129, 130, 139, 143, 147, 149, 156, 159, 163, 170, 172, 174, 179, 180, 184, 186, 191, 192, 194, 207, 215, 222, 223, 224, 231, 234, 236, 252, 255, 257, 258, 259, 262, 267, 268, 272, 275, 278, 280, 283, 290, 309, 321, 323, 324, 334, 337, 338, 345, 346, 353, 354, 361, 363, 368, 369, 370, 374, 378, 379, 380, 383, 388, 390, 391, 414, 417, 424, 425, 426, 427, 428, 429, 430, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 454, 461, 467, 468, 476, 477, 478, 479, 484, 486, 487, 493, 494, 497, 498, 500, 502, 503, 504, 512, 513, 514, 515, 516, 518, 523, 531, 532, 552, 565, 566, 567, 568, 571, 581, 585, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 614, 615, 617, 622, 623, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 653, 654, 655, 661, 662, 664, 666, 671, 672, 673, 674, 681, 682, 683, 692, 693, 694, 695, 700, 703, 704, 705, 707, 709, 713, 717, 722, 733, 734, 738, 740, 743, 750, 751, 756, 758, 764, 774, 790, 793, 799, 800, 803, 808, 809, 816, 817, 829, 841, 844, 849, 851, 853, 856, 858, 863, 884, 890, 894, 895, 905, 908, 909, 916, 917, 924, 925, 933, 938, 939, 947, 948, 953, 961, 963, 964, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1015, 1017, 1018, 1019, 1020, 1024, 1026, 1027, 1033, 1034, 1039, 1040, 1051, 1052, 1053, 1057, 1059, 1060, 1063, 1066, 1067, 1070, 1071, 1073, 1075, 1076, 1077, 1086, 1088, 1089, 1091, 1096, 1103, 1116, 1117, 1128, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1151, 1155, 1160, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1188, 1190, 1191, 1192, 1198, 1199, 1201, 1203, 1208, 1211, 1222, 1225, 1226, 1227, 1229, 1244, 1255, 1259, 1261, 1262, 1266, 1268, 1270, 1271, 1273], "null_behavior": [388, 493, 774, 961, 1066, 1244], "null_count": [41, 45, 180, 184, 309, 384, 774, 800, 884, 958, 960, 1244], "null_equ": [186, 309, 1015, 1244], "null_on_oob": [345, 498, 500, 916, 1071, 1073], "null_prob": [156, 159, 163], "null_valu": [33, 42, 129, 130, 143, 309, 884], "nullabl": [35, 309], "nullbehavior": [388, 493, 774, 961, 1066, 1244], "nullif": 1263, "nulls_last": [255, 309, 334, 354, 518, 622, 623, 700, 774, 844, 884, 905, 925, 1053, 1091, 1160, 1244], "num": [13, 36, 270, 309, 469, 774, 1041, 1244], "num_row": 170, "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 105, 116, 118, 119, 120, 122, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 150, 157, 159, 162, 164, 165, 166, 172, 174, 179, 187, 188, 190, 191, 199, 203, 204, 213, 214, 218, 229, 230, 241, 245, 252, 257, 260, 272, 277, 280, 282, 290, 292, 294, 303, 309, 335, 351, 353, 358, 361, 368, 369, 378, 384, 385, 388, 392, 395, 403, 405, 407, 409, 410, 419, 432, 433, 435, 439, 440, 441, 442, 446, 447, 448, 454, 463, 476, 477, 484, 485, 493, 501, 504, 509, 511, 516, 519, 521, 523, 525, 570, 574, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 616, 625, 639, 641, 643, 644, 647, 651, 653, 654, 662, 665, 678, 682, 683, 689, 702, 706, 707, 708, 720, 728, 733, 750, 751, 755, 759, 763, 774, 790, 793, 799, 806, 807, 808, 814, 821, 831, 841, 846, 848, 849, 854, 855, 863, 865, 867, 876, 884, 889, 922, 924, 929, 938, 947, 958, 959, 961, 965, 968, 976, 978, 983, 986, 987, 996, 1009, 1010, 1012, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1036, 1057, 1058, 1066, 1074, 1077, 1082, 1084, 1089, 1094, 1096, 1109, 1110, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1151, 1154, 1162, 1176, 1178, 1180, 1181, 1184, 1188, 1190, 1191, 1199, 1202, 1216, 1229, 1234, 1244, 1259, 1264, 1273], "number_of_two": [342, 492], "numbers_decim": 665, "numer": [10, 16, 33, 36, 42, 133, 144, 173, 182, 216, 267, 268, 276, 277, 309, 318, 370, 374, 453, 469, 528, 549, 551, 575, 583, 615, 636, 671, 676, 684, 774, 786, 792, 802, 818, 852, 884, 890, 939, 948, 960, 1041, 1152, 1173, 1208, 1225, 1244, 1264, 1273], "numeric_dtyp": 1273, "numericliter": [374, 774, 948, 1244], "numpi": [90, 120, 151, 178, 213, 243, 244, 263, 267, 268, 309, 531, 562, 563, 591, 774, 884, 1044, 1047, 1049, 1050, 1112, 1113, 1133, 1225, 1226, 1244], "nworld": 656, "o": [135, 146, 366, 368, 369, 384, 633, 682, 683, 774, 936, 938, 958, 1170, 1193, 1229, 1244, 1256], "oauth": 145, "obj": 890, "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 93, 117, 118, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 157, 159, 160, 170, 176, 181, 200, 201, 216, 217, 232, 241, 244, 249, 256, 266, 267, 268, 309, 387, 544, 715, 716, 718, 719, 734, 753, 761, 762, 774, 786, 795, 801, 813, 818, 835, 845, 884, 890, 1219, 1244, 1253, 1255, 1258, 1270, 1272], "observ": [385, 439, 440, 441, 442, 577, 774, 959, 1017, 1018, 1019, 1020, 1121, 1244], "obtain": 523, "obvious": 674, "occur": [36, 53, 54, 91, 100, 106, 309, 342, 492, 550, 580, 774, 795, 796, 805, 831, 842, 884, 913, 1065, 1108, 1123, 1225, 1244], "occurr": [464, 472, 475, 688, 774, 1037, 1045, 1048, 1233, 1244], "oct": 1265, "octet_length": 1263, "octob": 1265, "od": [140, 786], "odbc": [34, 131, 309], "odd": 634, "odi": 637, "off": [42, 43, 44, 45, 53, 54, 129, 130, 143, 215, 216, 309, 392, 702, 795, 796, 805, 817, 818, 822, 831, 884, 965], "offer": [233, 309, 574, 774, 830, 884, 1266, 1270], "offic": [36, 309], "offset": [64, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 195, 201, 241, 254, 285, 286, 309, 392, 393, 401, 411, 412, 414, 418, 431, 457, 499, 517, 590, 621, 651, 664, 774, 811, 813, 835, 843, 859, 860, 884, 965, 966, 974, 988, 989, 991, 995, 1008, 1031, 1072, 1090, 1159, 1188, 1201, 1244, 1269], "offset_bi": 720, "often": [132, 168, 201, 241, 309, 342, 492, 583, 590, 774, 813, 835, 884, 913, 1065, 1258, 1270], "ok": 523, "old": [35, 238, 309, 584, 585, 774, 833, 884, 1127, 1128, 1244], "old_tabl": 1272, "older": [41, 45, 309, 884], "oldw": 657, "omit": [27, 119, 123, 157, 168, 230, 244, 266, 271, 309, 730, 731, 761, 762, 890, 1271], "onc": [129, 130, 165, 219, 243, 245, 288, 309, 511, 531, 532, 611, 659, 660, 774, 791, 861, 884, 1084, 1103, 1145, 1196, 1197, 1244, 1256], "one": [20, 33, 34, 36, 42, 47, 97, 116, 118, 119, 120, 121, 122, 129, 130, 134, 138, 139, 140, 143, 147, 162, 164, 168, 173, 181, 191, 192, 199, 200, 201, 213, 225, 234, 241, 242, 243, 249, 250, 252, 267, 270, 276, 289, 309, 319, 353, 385, 387, 448, 449, 453, 456, 459, 461, 516, 523, 528, 544, 553, 554, 556, 558, 560, 561, 589, 590, 614, 622, 634, 635, 636, 649, 672, 736, 754, 764, 770, 774, 792, 801, 808, 809, 812, 813, 826, 835, 839, 840, 841, 852, 858, 862, 884, 896, 924, 929, 959, 1026, 1033, 1034, 1089, 1096, 1101, 1121, 1132, 1151, 1171, 1172, 1173, 1186, 1209, 1225, 1244, 1248, 1258, 1259, 1261, 1264, 1272], "one_to_mani": [215, 309, 817, 884], "one_to_on": [215, 309, 817, 884], "oneormoredatatyp": [36, 157, 309], "ones": 890, "onf": [651, 1188], "onli": [1, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 129, 130, 131, 133, 134, 135, 137, 139, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 168, 184, 189, 201, 202, 213, 216, 219, 234, 241, 243, 244, 263, 265, 266, 267, 278, 279, 295, 309, 319, 321, 323, 335, 373, 374, 387, 392, 414, 421, 443, 452, 462, 531, 532, 538, 553, 554, 555, 556, 557, 558, 559, 560, 561, 570, 582, 628, 637, 649, 686, 702, 736, 774, 795, 798, 801, 803, 804, 813, 814, 818, 821, 835, 836, 853, 855, 868, 884, 888, 890, 894, 895, 896, 945, 948, 965, 991, 1023, 1029, 1035, 1103, 1125, 1165, 1174, 1186, 1219, 1222, 1225, 1244, 1252, 1255, 1270, 1271, 1273], "onlin": [189, 309, 1023, 1244], "ont": [637, 1174], "onto": 159, "oof": [650, 1187, 1261, 1265], "op": [20, 163, 309, 538, 583, 774, 884, 1244], "opaqu": 868, "open": [36, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 309, 387, 774, 801, 884], "openoffic": 140, "openpyxl": [134, 151], "oper": [4, 36, 46, 55, 85, 93, 96, 103, 110, 116, 118, 119, 120, 121, 122, 129, 131, 175, 189, 192, 194, 200, 206, 217, 219, 226, 230, 232, 233, 234, 237, 239, 241, 244, 245, 250, 252, 261, 267, 268, 273, 276, 277, 287, 288, 309, 318, 319, 322, 353, 379, 380, 381, 382, 383, 384, 437, 438, 453, 455, 458, 460, 483, 511, 512, 513, 514, 515, 516, 523, 530, 546, 549, 551, 552, 553, 554, 556, 558, 560, 561, 564, 565, 566, 569, 570, 575, 582, 611, 614, 676, 684, 691, 692, 694, 704, 705, 709, 721, 753, 764, 774, 786, 794, 798, 800, 804, 809, 812, 814, 817, 821, 826, 827, 836, 840, 841, 845, 852, 855, 861, 884, 888, 924, 949, 953, 954, 955, 956, 957, 958, 1023, 1084, 1085, 1086, 1087, 1088, 1089, 1125, 1145, 1151, 1219, 1224, 1225, 1226, 1244, 1269, 1270], "operand": [684, 774], "opp": 890, "oppos": 702, "opposit": [252, 309, 353, 516, 614, 774, 841, 884, 924, 1089, 1151, 1244], "opt": [271, 309], "optim": [42, 43, 44, 45, 53, 54, 141, 143, 146, 147, 148, 213, 217, 233, 237, 243, 274, 309, 791, 795, 796, 805, 822, 831, 842, 850, 859, 860, 868, 884, 944, 1146, 1244], "optimis": [131, 219, 244, 295, 309, 884, 1103, 1148, 1244, 1273], "optimist": 14, "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 129, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 156, 157, 158, 159, 162, 163, 164, 181, 196, 201, 211, 216, 225, 249, 256, 262, 273, 276, 278, 309, 387, 392, 481, 538, 544, 591, 592, 594, 596, 598, 600, 603, 605, 607, 620, 628, 637, 649, 651, 688, 756, 764, 774, 786, 795, 801, 813, 817, 818, 826, 839, 845, 852, 853, 884, 890, 965, 1056, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1158, 1165, 1174, 1186, 1188, 1221, 1233, 1244, 1261, 1265], "optional_memb": [473, 774, 1046, 1244], "or_": 774, "oracl": 132, "orang": [177, 290, 291, 293, 294, 296, 297, 299, 301, 302, 309, 369, 683, 774, 863, 864, 866, 867, 869, 870, 872, 874, 875, 1265], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 119, 131, 150, 152, 153, 154, 155, 172, 176, 177, 184, 185, 192, 200, 201, 215, 232, 233, 234, 241, 243, 245, 246, 250, 255, 266, 267, 272, 274, 279, 309, 334, 354, 359, 368, 369, 390, 391, 449, 494, 511, 518, 524, 570, 575, 580, 590, 611, 612, 613, 622, 623, 650, 657, 658, 659, 660, 674, 682, 683, 685, 686, 688, 700, 753, 764, 774, 785, 790, 798, 803, 804, 809, 812, 813, 817, 826, 835, 836, 840, 844, 845, 849, 850, 852, 884, 889, 890, 905, 925, 930, 938, 943, 963, 964, 1027, 1053, 1067, 1084, 1091, 1097, 1123, 1130, 1145, 1147, 1149, 1160, 1187, 1212, 1229, 1230, 1231, 1233, 1244, 1252, 1255, 1261, 1269, 1270, 1273], "order_bi": [570, 774], "ordin": [415, 580, 774, 992, 1123, 1244, 1271], "ordinal_dai": [400, 433], "org": [20, 37, 38, 117, 131, 132, 135, 137, 170, 178, 309, 842, 884], "orient": [48, 50, 91, 120, 122, 230, 309, 884, 1252], "origin": [47, 129, 130, 143, 184, 192, 274, 309, 390, 391, 417, 418, 431, 449, 494, 532, 553, 570, 582, 583, 584, 585, 586, 588, 629, 634, 642, 698, 699, 774, 803, 809, 850, 884, 963, 964, 994, 995, 1008, 1027, 1067, 1127, 1128, 1129, 1131, 1166, 1171, 1179, 1244], "orld": 1194, "other": [1, 20, 32, 36, 41, 54, 128, 129, 130, 131, 134, 143, 152, 153, 154, 155, 184, 186, 189, 192, 215, 216, 225, 226, 234, 242, 244, 247, 248, 271, 276, 278, 281, 283, 284, 307, 309, 318, 322, 324, 334, 335, 374, 389, 437, 438, 449, 453, 458, 460, 469, 473, 483, 490, 512, 513, 514, 515, 530, 536, 540, 549, 551, 564, 565, 569, 584, 585, 623, 675, 676, 681, 684, 691, 693, 695, 700, 703, 704, 705, 713, 720, 738, 740, 743, 752, 756, 758, 774, 786, 796, 803, 809, 817, 818, 826, 827, 837, 838, 852, 853, 856, 857, 858, 884, 890, 896, 948, 962, 1015, 1023, 1046, 1063, 1085, 1086, 1087, 1088, 1127, 1128, 1227, 1235, 1243, 1244, 1258, 1270], "other_df": [215, 309], "other_lf": [817, 884], "otherwis": [34, 131, 134, 141, 146, 158, 161, 165, 196, 219, 226, 244, 247, 266, 271, 295, 309, 358, 363, 374, 385, 439, 440, 441, 442, 523, 532, 541, 570, 574, 575, 577, 582, 627, 630, 633, 638, 639, 644, 651, 662, 688, 692, 720, 723, 732, 736, 764, 774, 827, 837, 868, 884, 929, 933, 948, 959, 1017, 1018, 1019, 1020, 1096, 1103, 1121, 1125, 1146, 1148, 1164, 1167, 1170, 1175, 1176, 1181, 1188, 1199, 1233, 1244, 1262], "out": [8, 14, 34, 42, 43, 44, 45, 98, 123, 151, 192, 241, 244, 309, 345, 363, 498, 500, 627, 630, 638, 764, 809, 835, 884, 916, 933, 1071, 1073, 1164, 1167, 1175, 1268], "outcom": [570, 774], "outer": [47, 55, 278, 309, 853, 884], "outermost": 46, "outlin": 7, "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 41, 42, 172, 180, 213, 219, 223, 226, 232, 234, 243, 247, 249, 259, 272, 279, 283, 309, 321, 323, 346, 368, 369, 385, 502, 523, 531, 532, 541, 544, 554, 577, 584, 626, 640, 644, 682, 683, 688, 692, 693, 694, 695, 704, 705, 706, 735, 736, 774, 786, 790, 800, 805, 822, 826, 827, 837, 839, 849, 852, 856, 868, 884, 894, 895, 917, 938, 959, 1075, 1103, 1121, 1163, 1177, 1181, 1229, 1233, 1244], "output_path": [842, 884], "outsid": [374, 774, 948, 1244], "over": [125, 129, 130, 131, 133, 134, 143, 159, 160, 172, 189, 212, 213, 214, 219, 242, 243, 244, 256, 272, 273, 287, 295, 309, 313, 368, 369, 384, 387, 440, 448, 531, 532, 541, 543, 544, 545, 546, 554, 555, 580, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 682, 683, 710, 711, 724, 735, 736, 748, 753, 774, 790, 795, 845, 849, 868, 884, 890, 938, 958, 1018, 1023, 1103, 1134, 1135, 1137, 1141, 1229, 1244, 1270], "overflow": [173, 309, 370, 382, 383, 666, 677, 774, 792, 884, 939, 956, 957, 1203, 1215, 1244], "overhead": [46, 85, 143, 146, 147, 148], "overlap": [629, 635, 637, 1166, 1172, 1174], "overrid": [1, 36, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 138, 139, 140, 147, 156, 157, 163, 165, 309, 884], "overridden": [36, 116, 118, 120, 122, 138, 139, 147, 165, 309, 884], "overview": [309, 774, 786, 884, 1244, 1269, 1273], "overwrit": [14, 34, 35, 116, 118, 119, 120, 122, 126, 129, 130, 138, 139, 143, 147, 170, 278, 309, 320, 675, 774, 853, 884], "overwrite_schema": [35, 309], "ow": 656, "own": [764, 1225, 1244, 1273], "p": [49, 233, 309, 574, 756, 774, 830, 884, 890, 1175, 1176, 1256], "pa": [35, 116, 149, 309, 753], "pa_tabl": 753, "pacif": [393, 966], "pack": [230, 309], "packag": [131, 309, 313, 392, 702, 888, 965], "pad": [645, 646, 671, 1182, 1183, 1208], "pad_end": [646, 1183], "pad_start": [645, 671, 1182, 1208], "page": [41, 45, 135, 141, 146, 148, 309, 774, 786, 884, 1244, 1269], "pair": [116, 118, 119, 120, 122, 138, 139, 147, 238, 309, 833, 884, 1273], "pairwis": [178, 309], "panda": [34, 117, 121, 126, 151, 192, 201, 268, 274, 276, 309, 411, 412, 681, 753, 774, 809, 813, 850, 852, 884, 988, 989, 1226, 1227, 1244, 1253, 1255, 1270], "pandas_df": 1270, "pane": [36, 309], "panic": 99, "pap": 1176, "papa": 639, "papai": [639, 1176], "papaya": [639, 651, 662, 1176, 1188, 1199], "parallel": [53, 55, 125, 132, 141, 148, 201, 216, 217, 233, 248, 284, 309, 384, 495, 688, 764, 774, 786, 813, 817, 818, 838, 857, 868, 884, 958, 1068, 1233, 1244], "parallelis": [219, 295, 309, 1103, 1244], "parallelstrategi": [141, 148], "param": [36, 116, 118, 119, 120, 122, 129, 130, 138, 139, 143, 147, 158, 159, 163, 242, 309, 884], "paramet": [2, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 91, 100, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 170, 172, 173, 174, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 211, 213, 214, 215, 216, 218, 219, 223, 225, 226, 229, 230, 232, 233, 234, 236, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 288, 292, 294, 295, 301, 303, 309, 318, 320, 321, 322, 323, 324, 334, 341, 342, 345, 346, 353, 354, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 392, 394, 396, 397, 402, 414, 417, 418, 419, 420, 422, 423, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 467, 468, 469, 473, 481, 483, 485, 490, 491, 492, 493, 495, 498, 499, 500, 501, 502, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 530, 531, 532, 538, 544, 545, 549, 551, 554, 555, 556, 557, 558, 559, 564, 565, 569, 570, 571, 574, 575, 577, 578, 580, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 672, 674, 675, 676, 678, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 774, 790, 792, 793, 795, 796, 800, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 813, 814, 817, 818, 821, 822, 826, 827, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 865, 867, 868, 874, 876, 884, 888, 889, 890, 893, 894, 895, 896, 905, 912, 913, 916, 917, 924, 925, 929, 930, 932, 933, 934, 935, 937, 938, 939, 947, 948, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 965, 967, 969, 970, 975, 991, 994, 995, 996, 997, 999, 1000, 1008, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1035, 1036, 1037, 1039, 1040, 1041, 1053, 1056, 1058, 1063, 1064, 1065, 1066, 1068, 1071, 1072, 1073, 1074, 1075, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1094, 1095, 1096, 1097, 1103, 1117, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1154, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1208, 1209, 1212, 1216, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1229, 1230, 1233, 1234, 1235, 1244, 1252, 1253, 1254, 1255, 1256, 1258, 1262, 1265, 1270], "parameteris": 131, "parametr": 786, "paramount": [822, 884], "parent": [36, 194, 309], "parenthes": 18, "parquet": [41, 45, 141, 142, 148, 309, 786, 884], "parquetcompress": [41, 309], "pars": [33, 42, 128, 129, 130, 132, 134, 139, 140, 141, 143, 146, 147, 148, 172, 200, 247, 248, 252, 255, 272, 283, 284, 288, 309, 369, 374, 469, 570, 584, 585, 623, 641, 665, 666, 675, 683, 693, 695, 700, 703, 704, 705, 713, 726, 738, 740, 743, 752, 754, 756, 758, 764, 774, 790, 812, 837, 838, 841, 844, 849, 856, 857, 861, 884, 948, 1041, 1127, 1128, 1151, 1178, 1202, 1203, 1244, 1252], "parseerror": [666, 1203], "parser": [129, 134], "part": [116, 134, 266, 271, 309, 570, 635, 653, 654, 774, 805, 831, 842, 858, 884, 1172, 1190, 1191, 1266], "parti": [531, 774], "partial": [119, 129, 143, 309, 884], "particip": [36, 309], "particular": [129, 135, 137, 172, 187, 272, 309, 368, 369, 682, 683, 774, 790, 849, 884, 938, 1016, 1229, 1244], "partit": [41, 132, 133, 141, 144, 146, 148, 149, 214, 232, 309, 570, 774], "partition_bi": [41, 130, 214, 309, 570, 774], "partition_chunk_size_byt": [41, 309], "partition_col": [41, 132, 309], "partition_df": 130, "partition_num": 132, "partition_on": 132, "partition_rang": 132, "partitioned_object": [41, 309], "pass": [32, 34, 35, 36, 41, 47, 91, 118, 126, 128, 131, 132, 134, 141, 143, 146, 149, 152, 154, 157, 159, 161, 163, 172, 178, 182, 200, 201, 203, 218, 232, 233, 234, 241, 247, 252, 255, 260, 268, 271, 272, 279, 283, 288, 309, 312, 353, 369, 392, 402, 414, 417, 446, 466, 516, 531, 532, 570, 574, 584, 585, 590, 614, 623, 656, 657, 658, 683, 692, 700, 702, 709, 726, 756, 764, 770, 774, 790, 802, 812, 813, 815, 822, 830, 835, 837, 841, 842, 844, 849, 856, 861, 868, 884, 888, 889, 924, 965, 975, 994, 1024, 1036, 1058, 1089, 1103, 1127, 1128, 1151, 1193, 1194, 1195, 1216, 1226, 1244, 1248, 1256, 1270], "pass_nam": [532, 774], "pass_name_to_appli": [774, 888], "password": [129, 132, 135, 137], "past": [32, 309, 822, 884], "pat": [638, 1175], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 249, 309, 387, 544, 547, 613, 642, 774, 801, 839, 842, 884, 888, 1149, 1179, 1244, 1273], "pathlib": [31, 33, 37, 38, 41, 143, 309], "pattern": [55, 87, 129, 130, 143, 146, 147, 148, 213, 309, 539, 627, 628, 629, 634, 635, 636, 637, 638, 647, 648, 649, 868, 890, 1146, 1148, 1164, 1165, 1166, 1171, 1172, 1173, 1174, 1175, 1184, 1185, 1186, 1244, 1265], "paya": 662, "pct": 159, "pct_chang": [774, 1244], "pd": [117, 121, 681, 753, 774, 1226, 1227, 1244, 1253, 1270], "pd_df": 121, "pd_frame": 753, "pd_seri": 121, "pea": 639, "peak": [243, 309, 572, 573, 774, 1118, 1119, 1244], "peak_max": [774, 1244], "peak_min": [774, 1244], "pear": [639, 651, 662, 1176, 1188, 1199], "pearson": [178, 309, 481, 620, 706, 774, 1056, 1158, 1244], "penalti": [661, 663, 664, 1198, 1200, 1201], "per": [14, 33, 36, 42, 134, 157, 159, 172, 199, 230, 231, 234, 248, 255, 272, 284, 298, 300, 301, 309, 345, 369, 495, 498, 500, 531, 532, 553, 554, 556, 558, 560, 561, 623, 683, 688, 700, 774, 790, 838, 844, 849, 857, 871, 873, 874, 884, 888, 916, 1068, 1071, 1073, 1233, 1244], "percent": [571, 774, 1117, 1244], "percentag": [156, 159, 163, 571, 774, 1117, 1244], "percentil": [180, 309, 800, 884, 960, 1244], "perform": [34, 41, 43, 45, 47, 89, 94, 96, 101, 103, 110, 117, 129, 130, 131, 135, 139, 141, 143, 146, 147, 148, 170, 192, 200, 201, 216, 219, 237, 241, 243, 244, 267, 295, 309, 453, 523, 531, 532, 570, 590, 628, 637, 643, 644, 649, 661, 663, 664, 774, 809, 813, 818, 835, 844, 859, 860, 884, 1103, 1165, 1174, 1180, 1181, 1186, 1198, 1200, 1201, 1225, 1244], "perhap": [273, 309], "period": [129, 130, 143, 201, 241, 309, 418, 431, 439, 441, 442, 571, 590, 715, 716, 718, 719, 761, 762, 774, 813, 835, 884, 995, 1008, 1017, 1019, 1020, 1117, 1244], "persist": 1258, "phase": [34, 277, 309], "philadelphia": [647, 648], "physic": [46, 59, 85, 129, 130, 216, 234, 309, 681, 774, 791, 817, 818, 884, 942, 1227, 1244], "pi": [10, 386, 774, 950, 952, 1156, 1217, 1244, 1263, 1267], "pick": [160, 764], "pickl": [387, 774, 801, 884], "pip": [392, 702, 965], "pipe": [309, 774, 884], "pipelin": [134, 271, 309], "pitfal": 101, "pivot": [277, 309, 890], "pivot_long": [276, 309, 852, 884], "pivot_wid": [234, 309], "pivotagg": [234, 309], "pixel": [36, 309], "pk": [436, 774, 1014, 1244], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 774, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1244, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1273], "pl_frame": 753, "place": [10, 11, 33, 42, 183, 189, 205, 206, 234, 239, 244, 255, 281, 309, 313, 334, 346, 354, 502, 518, 622, 623, 700, 774, 844, 884, 896, 905, 917, 925, 1023, 1075, 1091, 1124, 1160, 1244], "placehold": 725, "plai": [12, 705], "plain": [805, 884], "plan": [216, 217, 309, 387, 774, 791, 795, 801, 805, 817, 818, 839, 842, 884, 1272], "plane": [698, 699], "platform": 151, "ple": 1265, "pleas": [121, 131, 132, 192, 201, 225, 309, 312, 313, 440, 707, 720, 774, 809, 813, 826, 884, 1018, 1244, 1248], "plenti": 890, "plot": [309, 831, 842, 884, 1244], "plu": [385, 528, 774, 959, 1101, 1121, 1244, 1264], "plugin": [0, 774, 786], "plugin_path": 888, "point": [10, 11, 36, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 126, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 190, 201, 217, 256, 266, 271, 277, 278, 309, 312, 313, 373, 384, 385, 390, 418, 419, 447, 452, 453, 464, 476, 477, 511, 532, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 750, 751, 774, 795, 796, 805, 807, 813, 822, 833, 845, 853, 884, 943, 945, 958, 959, 963, 995, 996, 1025, 1029, 1037, 1084, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1223, 1228, 1244, 1248, 1270], "poison": [562, 563, 774, 1112, 1113, 1244], "pola": 309, "polar": [1, 309, 312, 313, 773, 774, 780, 786, 884, 888, 889, 890, 1244, 1248, 1269, 1270, 1272], "polars_df": 1270, "polars_file_cache_ttl": [139, 143, 146, 147], "polars_hypothesis_profil": [162, 164], "polars_max_thread": 165, "polars_seri": 1270, "polars_verbos": [795, 884], "polarsdatafram": 170, "polarsdataset": [271, 309], "polarsdatatyp": [56, 72, 129, 130, 143, 156, 157, 158, 159, 160, 163, 173, 219, 266, 271, 309, 370, 443, 531, 532, 584, 585, 641, 722, 734, 735, 736, 746, 749, 765, 770, 774, 792, 884, 890, 939, 1103, 1127, 1128, 1178, 1244], "polarsintegertyp": [697, 730, 731], "polarstemporaltyp": [661, 1198], "polarstyp": 55, "pool": [14, 54, 165, 166, 796, 884], "poor": 131, "pop2": [216, 309], "popul": [216, 309, 818, 884], "port": [34, 129, 131, 132, 135, 137, 309], "portion": 1265, "pos_a": 1265, "posit": [36, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 182, 188, 200, 232, 247, 248, 252, 255, 275, 283, 284, 288, 309, 353, 439, 441, 442, 443, 516, 570, 575, 577, 614, 623, 636, 638, 647, 648, 666, 675, 698, 699, 700, 703, 704, 705, 722, 752, 756, 770, 774, 802, 806, 812, 837, 838, 841, 844, 851, 856, 857, 861, 884, 890, 924, 1017, 1019, 1020, 1089, 1121, 1151, 1173, 1203, 1244, 1271], "position": 1244, "possibl": [36, 41, 45, 91, 93, 118, 119, 122, 129, 134, 156, 159, 163, 200, 213, 219, 243, 274, 295, 309, 529, 532, 541, 591, 654, 687, 774, 795, 812, 844, 850, 884, 1103, 1133, 1191, 1244], "post": 47, "postgresql": [34, 131, 132, 309, 570, 774, 1268], "potenti": [101, 103, 134, 143, 146, 147, 213, 242, 244, 309, 553, 798, 800, 804, 836, 855, 884, 888], "pow": [774, 1244, 1263], "pow_n": 49, "power": [754, 1244, 1264], "powersofn": 49, "pre": [523, 532, 577, 746, 749, 765, 774, 1121, 1244], "preced": [159, 890], "precis": [10, 11, 33, 36, 42, 63, 131, 213, 243, 244, 263, 266, 271, 309, 394, 665, 884, 890, 967, 1202], "predefin": [234, 309], "predic": [35, 42, 43, 44, 45, 53, 54, 143, 146, 147, 148, 149, 192, 211, 242, 309, 449, 690, 724, 764, 774, 795, 796, 805, 809, 822, 831, 833, 842, 859, 860, 884, 1027, 1146, 1148, 1244], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 795, 796, 805, 822, 831, 842, 884], "predict": [234, 237, 279, 309], "prefer": [129, 130, 133, 134, 143, 164, 172, 189, 213, 219, 242, 243, 272, 295, 309, 368, 369, 443, 532, 682, 683, 774, 790, 849, 884, 938, 1023, 1103, 1229, 1244, 1253, 1273], "prefix": [35, 129, 130, 143, 168, 309, 320, 367, 539, 554, 557, 558, 560, 561, 655, 658, 659, 671, 774, 890, 937, 1192, 1196, 1208], "prefix_": 557, "prefix_a": 557, "prefix_b": 557, "presenc": [723, 732, 890], "present": [119, 159, 196, 309, 473, 657, 658, 774, 842, 884], "preserv": [184, 192, 200, 215, 219, 267, 268, 309, 390, 391, 392, 411, 412, 449, 494, 584, 617, 633, 774, 803, 809, 817, 884, 963, 964, 965, 1027, 1067, 1127, 1155, 1170, 1226, 1244], "pressur": [45, 129, 130, 139, 141, 143, 147, 148, 615, 774, 884, 1152, 1244], "presum": [531, 774], "prev_pow2": 49, "prevent": [267, 309, 320, 382, 383, 553, 677, 774, 884, 956, 957, 1215, 1244], "preview": [199, 309], "previou": [49, 168, 392, 553, 554, 556, 558, 560, 561, 571, 674, 774, 965, 1117, 1244], "previous": [2, 3], "price": 1273, "primari": [134, 1270, 1273], "primarili": 1, "primit": [35, 309, 473, 774], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 130, 151, 152, 154, 185, 199, 200, 214, 217, 265, 287, 309, 466, 545, 774, 795, 815, 884, 890, 1046, 1222, 1244, 1273], "prior": 121, "prioriti": 160, "probabl": [436, 577, 774, 1014, 1121, 1244], "process": [14, 33, 42, 43, 44, 45, 53, 54, 129, 130, 131, 143, 165, 243, 309, 795, 796, 884], "process_index": [266, 309], "produc": [2, 3, 159, 163, 215, 309, 342, 492, 541, 735, 817, 822, 884, 913, 1065], "product": [47, 178, 215, 309, 382, 389, 774, 817, 884, 956, 962, 1244], "profil": [162, 164, 795, 884], "programmat": [180, 309, 800, 884], "progress": [63, 65], "project": [42, 43, 44, 45, 53, 54, 143, 145, 146, 147, 148, 622, 623, 774, 795, 796, 805, 822, 831, 833, 842, 884], "projection_pushdown": [42, 43, 44, 45, 53, 54, 795, 796, 805, 822, 831, 842, 884], "prompt": 123, "propag": [346, 438, 502, 562, 563, 565, 626, 640, 704, 705, 774, 917, 1075, 1112, 1113, 1163, 1177, 1244], "propagate_nan": 706, "properti": [36, 170, 176, 177, 185, 193, 204, 246, 251, 282, 286, 309, 312, 313, 797, 798, 804, 836, 855, 860, 884, 889, 890, 1013, 1028, 1111, 1150, 1244, 1248, 1273], "proport": [688, 774, 1233, 1244], "protocol": [35, 117, 132, 170, 309], "prototyp": 770, "provid": [34, 36, 129, 130, 132, 133, 134, 139, 141, 143, 144, 145, 146, 147, 148, 159, 163, 192, 196, 211, 256, 266, 309, 363, 364, 443, 464, 523, 531, 532, 630, 631, 634, 641, 642, 657, 658, 659, 660, 726, 756, 774, 786, 795, 809, 845, 884, 933, 934, 1037, 1055, 1103, 1167, 1168, 1171, 1178, 1179, 1223, 1244, 1256, 1262, 1265, 1270, 1273], "prune": [141, 146, 148, 822, 884], "public": [132, 309, 774, 786, 884, 1244, 1269], "pulp": 1252, "pure": [36, 309, 538], "purpos": [552, 774, 795, 884], "push": [143, 146, 147, 148, 149], "pushdown": [42, 43, 44, 45, 53, 54, 795, 796, 805, 822, 831, 833, 842, 859, 860, 884, 1146, 1148, 1244], "put": [33, 42, 309, 313, 884], "pwd": 131, "py": 145, "pyarrow": [35, 41, 116, 121, 129, 132, 133, 135, 137, 141, 144, 149, 151, 261, 267, 268, 309, 753, 786, 1219, 1225, 1226, 1244, 1253, 1255, 1270], "pyarrow_opt": [41, 133, 141, 144, 309], "pyarrow_t": 1270, "pydant": 151, "pyiceberg": [145, 151], "pyodbc": [34, 309], "pyodbc_uri": [34, 309], "pyspark": 165, "pytest": [152, 154], "python": [0, 37, 38, 74, 87, 117, 129, 130, 135, 137, 151, 152, 154, 170, 213, 219, 243, 244, 263, 295, 309, 387, 392, 396, 453, 531, 532, 636, 702, 715, 716, 718, 719, 761, 762, 764, 774, 780, 801, 868, 884, 965, 969, 979, 980, 981, 985, 1103, 1173, 1224, 1244, 1269], "pythondatatyp": [56, 72], "pythonliter": [1104, 1105, 1106, 1107, 1146, 1244], "pytorch": [271, 309, 1228, 1244], "q": [244, 309, 756, 1256], "q1": [36, 309], "q2": [36, 309], "q3": [36, 309], "q4": [36, 309], "qcut": [385, 774, 959, 1244], "qhoo": 1273, "qmark": 131, "qqr": 890, "quad": [440, 774, 1018, 1244], "qualifi": [34, 309], "quantifi": [635, 1172], "quantil": [309, 577, 600, 601, 774, 884, 1121, 1138, 1244], "quarter": [201, 216, 241, 279, 309, 414, 418, 431, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 818, 835, 884, 991, 995, 1008, 1266], "queri": [42, 43, 44, 45, 53, 54, 131, 132, 135, 143, 146, 147, 148, 189, 217, 233, 256, 309, 531, 532, 642, 753, 774, 795, 796, 805, 814, 821, 831, 842, 845, 859, 860, 868, 877, 884, 1023, 1103, 1179, 1244, 1252, 1253, 1255, 1259, 1269, 1271, 1272], "quick": [770, 960, 1244, 1273], "quit": [216, 309], "quot": [33, 34, 42, 129, 130, 132, 143, 309, 884], "quote_char": [33, 42, 129, 130, 143, 309, 884], "quote_plu": 132, "quote_styl": [33, 42, 309, 884], "quotient": 1264, "r": [129, 130, 143, 309, 574, 629, 633, 634, 635, 636, 647, 648, 774, 890, 1166, 1170, 1171, 1172, 1173, 1184, 1185, 1199, 1256, 1265], "r1": 55, "r2": 55, "r3": 55, "rab": [627, 650, 1164, 1187, 1261], "rad": 1267, "radian": [386, 698, 774, 1263], "radix": [666, 1203], "rai": [698, 699], "raini": [647, 648, 1184, 1185], "rais": [1, 15, 16, 20, 35, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 129, 130, 134, 140, 143, 152, 154, 170, 196, 234, 242, 267, 309, 345, 363, 392, 417, 498, 500, 541, 575, 577, 585, 627, 630, 638, 661, 663, 664, 666, 668, 717, 734, 774, 916, 933, 965, 994, 1071, 1073, 1121, 1128, 1164, 1167, 1175, 1198, 1200, 1201, 1203, 1205, 1225, 1244], "raise_if_empti": [129, 130, 134, 140, 143], "raise_if_undetermin": 541, "raker": 126, "ram": [42, 43, 44, 45, 884], "ran": [774, 888], "random": [36, 37, 135, 150, 157, 202, 245, 309, 462, 511, 580, 611, 616, 688, 774, 786, 1035, 1084, 1123, 1145, 1154, 1233, 1244], "randomli": 158, "rang": [17, 36, 131, 132, 180, 187, 201, 214, 309, 325, 386, 392, 400, 410, 415, 416, 418, 431, 432, 467, 697, 702, 704, 714, 715, 716, 717, 718, 719, 730, 731, 760, 761, 762, 774, 800, 813, 884, 890, 960, 965, 973, 987, 992, 993, 995, 1008, 1009, 1016, 1117, 1244, 1265], "rank": [334, 495, 700, 706, 721, 774, 905, 1068, 1244], "rankmethod": [580, 774, 1123, 1244], "rare": [393, 966], "rather": [216, 309, 455, 531, 545, 577, 589, 671, 774, 818, 884, 1121, 1132, 1208, 1244], "raw": 132, "raw_output": [842, 884], "re": [196, 201, 212, 274, 276, 309, 411, 412, 420, 423, 813, 850, 852, 884, 988, 989, 997, 1000, 1270], "reach": [645, 646, 671, 1182, 1183, 1208], "read": [32, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 189, 309, 387, 455, 764, 774, 801, 884, 1023, 1244], "read_arrow_batches_from_odbc": 131, "read_clipboard": [32, 309], "read_csv": [128, 134, 143], "read_csv_batch": 125, "read_databas": 132, "read_database_uri": 131, "read_excel": 140, "read_ndjson": 138, "read_od": 134, "read_opt": 134, "read_parquet": 148, "read_tabl": 141, "readabl": 770, "reader": [41, 45, 125, 129, 130, 135, 137, 141, 309, 884], "readi": 878, "readthedoc": [36, 309], "real": [635, 1172], "realli": [384, 628, 649, 774, 958, 1165, 1186, 1244], "realloc": [139, 143, 146, 147, 189, 309, 1023, 1244], "rearrang": [219, 309], "reason": [165, 180, 309, 523, 531, 774, 800, 884], "receiv": [47, 131, 143, 219, 233, 295, 309, 532, 574, 774, 830, 884, 1273], "recent": [152, 153, 154, 155, 267, 309, 571, 585, 774, 1117, 1128, 1225, 1244, 1255, 1270], "rechunk": [55, 116, 121, 129, 130, 133, 135, 137, 139, 141, 143, 146, 147, 148, 189, 309, 774, 946, 1023, 1032, 1109, 1244], "recognis": [15, 16, 20, 890], "recommend": [36, 165, 180, 213, 217, 233, 309, 791, 800, 884, 890], "record": [33, 38, 42, 126, 137, 149, 309, 818, 884], "record_batch": [214, 309], "recordbatch": [116, 214, 309, 753, 1253, 1255, 1270], "recurs": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "red": [46, 84, 85, 295, 688, 774, 868, 1233, 1244], "redempt": 1252, "redshift": 132, "reduc": [45, 129, 130, 139, 141, 143, 146, 147, 148, 243, 296, 297, 299, 302, 309, 615, 711, 724, 774, 869, 870, 872, 875, 884, 1105, 1120, 1152, 1215, 1244], "reduct": [194, 309, 532, 774], "ref": [634, 636, 1171, 1173], "refer": [0, 36, 87, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 178, 181, 309, 312, 313, 387, 420, 423, 580, 634, 647, 648, 661, 663, 664, 668, 774, 801, 884, 997, 1000, 1123, 1184, 1185, 1198, 1200, 1201, 1205, 1244, 1248], "referenc": [36, 309, 531, 674, 774, 1253, 1270], "refin": 134, "reg": 126, "regard": [129, 706], "regardless": [121, 172, 200, 216, 272, 309, 369, 397, 642, 683, 764, 774, 790, 849, 884, 970, 1179], "regex": [443, 538, 539, 627, 629, 632, 634, 635, 636, 638, 647, 648, 655, 672, 722, 774, 890, 1164, 1166, 1169, 1171, 1172, 1173, 1175, 1184, 1185, 1192], "regexp_lik": 1263, "region": [36, 145, 309], "regist": [1, 48, 49, 50, 51, 162, 164, 256, 309, 774, 845, 884, 888, 1252, 1253, 1255, 1256, 1257, 1258, 1270, 1272], "register_dataframe_namespac": [1, 49, 50, 51], "register_expr_namespac": [1, 48, 50, 51], "register_glob": [1254, 1256, 1258, 1270], "register_lazyframe_namespac": [1, 48, 49, 51], "register_mani": [1254, 1255, 1258], "register_plugin": 774, "register_plugin_funct": [774, 888], "register_series_namespac": [1, 48, 49, 50], "registr": [256, 309, 753, 786, 845, 884, 1258, 1270], "regrid": [467, 774], "regular": [124, 213, 242, 243, 279, 286, 309, 443, 627, 629, 634, 635, 636, 638, 647, 648, 702, 722, 770, 774, 860, 884, 890, 1164, 1166, 1171, 1172, 1173, 1175, 1184, 1185, 1268], "reinterpret": [774, 1244], "rel": [36, 132, 133, 144, 145, 152, 153, 154, 155, 309, 414, 439, 441, 442, 688, 774, 991, 1017, 1019, 1020, 1233, 1244], "relat": [131, 168, 647, 648, 890, 1184, 1185, 1259], "releas": [54, 532, 774, 796, 884, 1273], "release_year": 1252, "relev": 55, "reliabl": [84, 85], "remain": [129, 130, 143, 184, 187, 192, 234, 309, 390, 391, 449, 494, 584, 653, 654, 774, 803, 809, 822, 884, 963, 964, 1016, 1027, 1067, 1127, 1190, 1191, 1244, 1258], "remaind": [654, 1191, 1264], "remap": 86, "remot": [129, 130, 135, 137], "remov": [4, 129, 130, 143, 170, 182, 264, 309, 443, 554, 656, 657, 658, 659, 660, 722, 774, 802, 884, 1193, 1194, 1195, 1196, 1197, 1220, 1244, 1272], "removes_pronoun": 649, "renam": [1, 119, 129, 130, 166, 200, 247, 248, 283, 284, 288, 290, 309, 320, 455, 546, 547, 553, 554, 555, 556, 558, 560, 561, 674, 675, 752, 756, 774, 812, 837, 838, 856, 857, 861, 863, 884, 893, 1175, 1212, 1221, 1244, 1270], "rename_field": [653, 654, 1190, 1191], "render": [842, 884], "render_as_str": 131, "reoconstruct": [244, 309], "repeat": [135, 146, 581, 583, 746, 765, 774], "repeat_bi": 774, "replac": [34, 35, 129, 130, 143, 190, 191, 239, 273, 276, 283, 284, 309, 396, 417, 447, 531, 532, 585, 648, 649, 664, 774, 807, 852, 856, 857, 884, 969, 994, 1025, 1128, 1146, 1148, 1185, 1186, 1201, 1244, 1263], "replace_al": [585, 647, 774, 1127, 1128, 1184, 1244], "replace_column": 309, "replace_strict": [584, 774, 1127, 1244], "replace_time_zon": [393, 399, 401, 971, 972, 998], "replace_with": [649, 1186], "replic": [681, 774, 1227, 1244], "report": 131, "repr": 123, "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 116, 118, 120, 121, 122, 131, 234, 256, 257, 266, 267, 280, 287, 309, 453, 476, 477, 519, 525, 531, 625, 639, 644, 651, 662, 689, 692, 706, 708, 720, 722, 734, 735, 736, 745, 750, 751, 755, 763, 770, 774, 845, 846, 854, 884, 890, 1146, 1162, 1176, 1181, 1188, 1199, 1225, 1234, 1244, 1270], "represent": [10, 39, 40, 61, 62, 64, 77, 123, 249, 265, 309, 395, 400, 403, 405, 406, 407, 408, 409, 410, 413, 415, 416, 419, 432, 433, 435, 544, 681, 774, 805, 820, 839, 884, 942, 968, 973, 976, 977, 978, 982, 983, 984, 986, 987, 990, 992, 993, 996, 1009, 1010, 1012, 1222, 1227, 1244], "request": [217, 309], "requir": [1, 35, 36, 47, 121, 131, 132, 152, 153, 154, 155, 178, 242, 266, 267, 268, 271, 309, 359, 439, 441, 442, 524, 532, 570, 615, 661, 663, 664, 685, 749, 774, 798, 804, 844, 855, 884, 930, 1015, 1017, 1019, 1020, 1097, 1152, 1198, 1200, 1201, 1225, 1226, 1230, 1244, 1248], "require_al": 890, "rerais": [54, 796, 884], "rerun": [189, 309, 1023, 1244], "resampl": [201, 309, 813, 884], "reset": [4, 168], "reset_index": [121, 201, 309, 813, 884], "reshap": [234, 267, 309, 496, 774, 1069, 1244], "resolv": [396, 797, 798, 804, 836, 855, 884], "resourc": 888, "respect": [36, 309, 628, 637, 649, 890, 1165, 1174, 1186, 1228, 1244], "respons": [132, 226, 309, 827, 884], "restor": 168, "restore_default": 168, "restrict": [30, 654, 1191], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 120, 121, 122, 131, 132, 133, 134, 143, 146, 148, 149, 163, 189, 192, 201, 202, 215, 216, 230, 234, 241, 244, 249, 250, 252, 266, 267, 268, 279, 286, 288, 294, 309, 392, 418, 420, 423, 431, 439, 440, 441, 442, 446, 453, 462, 469, 481, 522, 523, 531, 532, 544, 570, 575, 577, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 613, 614, 633, 652, 653, 664, 684, 688, 709, 710, 711, 717, 718, 719, 720, 734, 735, 746, 749, 750, 751, 753, 765, 774, 791, 795, 800, 809, 813, 817, 822, 831, 835, 839, 840, 841, 860, 861, 867, 878, 879, 884, 890, 896, 995, 997, 1000, 1008, 1017, 1019, 1020, 1023, 1024, 1035, 1041, 1056, 1095, 1103, 1121, 1127, 1128, 1129, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1149, 1151, 1170, 1189, 1190, 1201, 1225, 1226, 1233, 1244, 1253, 1259, 1270, 1271, 1273], "resultset": 131, "retri": [139, 141, 143, 146, 147, 148], "retriev": [196, 266, 309, 339, 340, 488, 489, 672, 745, 910, 911, 1061, 1062, 1209, 1223, 1244, 1259], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 94, 97, 105, 113, 116, 118, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 165, 166, 172, 174, 177, 178, 179, 183, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 209, 211, 212, 213, 214, 215, 217, 218, 219, 221, 223, 228, 229, 230, 232, 233, 234, 238, 241, 242, 243, 244, 245, 249, 256, 259, 260, 266, 267, 268, 271, 272, 273, 274, 279, 282, 283, 284, 290, 292, 294, 295, 298, 303, 309, 321, 323, 326, 327, 328, 329, 330, 331, 334, 335, 339, 340, 341, 343, 345, 346, 357, 362, 363, 364, 365, 366, 367, 368, 369, 375, 376, 377, 378, 379, 385, 386, 392, 393, 395, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 440, 445, 453, 456, 457, 459, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 485, 488, 489, 491, 496, 498, 500, 501, 502, 504, 511, 521, 522, 529, 531, 532, 542, 544, 545, 550, 574, 577, 579, 583, 584, 585, 586, 588, 589, 611, 612, 617, 618, 619, 626, 627, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 662, 666, 671, 678, 679, 680, 682, 683, 684, 686, 687, 688, 691, 692, 697, 698, 699, 700, 701, 702, 707, 709, 714, 715, 716, 717, 718, 719, 720, 723, 726, 728, 730, 731, 732, 733, 734, 735, 736, 746, 749, 752, 753, 756, 759, 760, 761, 762, 764, 765, 774, 790, 793, 795, 796, 798, 799, 800, 804, 805, 811, 813, 814, 817, 820, 821, 822, 830, 831, 833, 835, 839, 842, 848, 849, 850, 855, 856, 857, 863, 865, 867, 871, 876, 878, 884, 888, 890, 894, 895, 896, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 928, 930, 932, 933, 934, 936, 938, 941, 943, 947, 953, 959, 960, 965, 966, 968, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1016, 1018, 1022, 1023, 1031, 1036, 1037, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1069, 1071, 1073, 1074, 1075, 1077, 1084, 1094, 1095, 1102, 1103, 1108, 1115, 1121, 1127, 1128, 1129, 1130, 1131, 1132, 1145, 1147, 1155, 1163, 1164, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1187, 1188, 1189, 1190, 1191, 1199, 1203, 1208, 1216, 1219, 1226, 1229, 1231, 1232, 1233, 1235, 1244, 1252, 1253, 1257, 1259, 1260, 1261, 1262, 1264, 1265, 1268, 1270, 1271, 1272, 1273], "return_as_str": [199, 309, 545], "return_dtyp": [36, 219, 309, 531, 532, 584, 585, 691, 735, 736, 774, 1103, 1127, 1128, 1244], "return_typ": [266, 271, 309], "returns_scalar": [531, 532, 736, 774, 888], "reus": [53, 54, 795, 796, 805, 831, 842, 884], "revers": [172, 187, 272, 309, 369, 379, 380, 381, 382, 383, 554, 556, 558, 683, 709, 774, 790, 849, 884, 953, 954, 955, 956, 957, 1244, 1261, 1263], "reverse_": 556, "reverse_a": 556, "reverse_b": 556, "revert": [7, 9, 10], "rhap": 637, "rhapsodi": 637, "right": [9, 10, 15, 16, 18, 27, 36, 63, 129, 130, 152, 153, 154, 155, 201, 215, 216, 241, 278, 309, 385, 439, 441, 442, 469, 512, 513, 514, 515, 577, 590, 593, 595, 597, 599, 601, 604, 606, 608, 612, 620, 703, 715, 716, 718, 719, 761, 762, 774, 813, 817, 818, 835, 853, 884, 959, 1017, 1019, 1020, 1041, 1085, 1086, 1087, 1088, 1121, 1147, 1158, 1244, 1259, 1263], "right_on": [215, 216, 278, 309, 817, 818, 853, 884], "rightmost": [612, 774, 1147, 1244, 1265], "rld": [656, 658, 1195], "rle": [589, 774, 1132, 1244], "rle_id": [588, 774, 1244], "rle_id_a": [589, 774], "rle_id_ab": [589, 774], "rn": [129, 130, 143], "role": 132, "roll": [201, 309, 392, 411, 412, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 704, 750, 751, 774, 813, 884, 965, 988, 989, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1244], "rollback": [412, 989], "rolled_forward": 392, "rollforward": [411, 988], "rolling_map": [774, 1244], "rolling_max": [774, 1244], "rolling_max_bi": 774, "rolling_mean": [774, 1244], "rolling_mean_bi": 774, "rolling_median": [774, 1244], "rolling_median_bi": 774, "rolling_min": [774, 1244], "rolling_min_bi": 774, "rolling_quantil": [774, 1244], "rolling_quantile_bi": 774, "rolling_row_max": [593, 774], "rolling_row_mean": [595, 774], "rolling_row_median": [597, 774], "rolling_row_min": [599, 774], "rolling_row_quantil": [601, 774], "rolling_row_std": [604, 774], "rolling_row_sum": [606, 774], "rolling_row_var": [608, 774], "rolling_skew": [774, 1244], "rolling_std": [774, 1244], "rolling_std_bi": 774, "rolling_sum": [591, 774, 1133, 1244], "rolling_sum_bi": 774, "rolling_var": [774, 1244], "rolling_var_bi": 774, "rollinggroupbi": [241, 309], "rollinginterpolationmethod": [180, 236, 301, 309, 578, 600, 601, 747, 774, 800, 832, 874, 884, 960, 1122, 1138, 1244], "ronaldo": [634, 1171], "root": [133, 144, 372, 543, 553, 554, 556, 558, 560, 561, 624, 773, 774, 944, 1161, 1244, 1264], "round": [20, 36, 49, 123, 131, 309, 373, 377, 452, 610, 679, 774, 945, 1029, 1144, 1244, 1263], "round_sig_fig": [774, 1244], "round_str": 995, "round_td": 995, "rounded_corn": 20, "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 91, 97, 105, 113, 119, 120, 121, 122, 123, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 159, 172, 174, 184, 189, 192, 194, 195, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 225, 230, 234, 241, 244, 245, 254, 260, 263, 265, 266, 271, 272, 274, 276, 277, 278, 285, 286, 290, 292, 294, 295, 303, 309, 313, 334, 335, 343, 358, 369, 445, 453, 457, 463, 485, 496, 523, 570, 571, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 621, 623, 633, 641, 678, 683, 697, 700, 705, 707, 709, 724, 728, 730, 731, 733, 748, 750, 751, 759, 764, 774, 790, 793, 795, 803, 809, 810, 811, 813, 814, 817, 818, 819, 821, 822, 826, 843, 848, 849, 850, 852, 853, 859, 860, 863, 865, 867, 868, 876, 884, 905, 914, 1022, 1023, 1031, 1036, 1058, 1069, 1117, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1159, 1170, 1178, 1216, 1244, 1252, 1259, 1261, 1271, 1273], "row_group": [141, 148], "row_group_s": [41, 45, 309, 884], "row_height": [36, 309], "row_index": [36, 309], "row_index_nam": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_index_offset": [129, 130, 135, 137, 139, 141, 143, 146, 147, 148], "row_nr": [285, 309, 859, 884], "row_tot": [36, 309], "rowname_col": [309, 313], "rows_by_kei": [213, 243, 309], "rowserror": [242, 309], "rowtotalsdefinit": [36, 309], "rpc": 131, "rstrip": 554, "rtol": [152, 153, 154, 155], "rtrim": 1263, "ru": 1265, "rule": [129, 141, 143, 148, 194, 309, 628, 649, 664, 1165, 1186, 1201], "run": [42, 43, 44, 45, 53, 54, 62, 131, 159, 162, 163, 164, 200, 217, 219, 248, 274, 284, 295, 309, 384, 495, 531, 532, 588, 589, 644, 752, 774, 795, 796, 805, 812, 822, 826, 831, 838, 842, 850, 852, 857, 884, 890, 958, 1068, 1103, 1131, 1132, 1181, 1244, 1270, 1273], "runtimeerror": [267, 309, 1225, 1244], "rust": [33, 41, 42, 87, 99, 135, 137, 141, 219, 295, 309, 636, 884, 888, 1103, 1173, 1244], "s1": [46, 84, 85, 154, 155, 194, 309, 929, 1015, 1032, 1055, 1063, 1096, 1124, 1235, 1244], "s2": [1, 46, 84, 85, 154, 155, 194, 309, 929, 946, 962, 1015, 1032, 1046, 1055, 1063, 1096, 1109, 1124, 1235, 1244], "s3": [1, 35, 133, 144, 145, 148, 149, 309, 929, 1096, 1244], "s_bar": 1261, "s_dt": [1265, 1266], "s_dt1": 1265, "s_dt2": 1265, "s_foo": 1261, "s_from_str_repr": [1222, 1244], "s_head_5": 639, "s_head_n": 639, "s_tail_5": 662, "s_tail_n": 662, "s_tm": [1265, 1266], "safe": [582, 774, 1125, 1244], "sam": 12, "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 100, 135, 143, 152, 153, 154, 155, 157, 168, 192, 200, 219, 234, 243, 244, 255, 274, 283, 284, 288, 295, 309, 317, 324, 357, 390, 391, 449, 453, 455, 456, 459, 522, 536, 540, 570, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 623, 633, 643, 674, 770, 774, 795, 796, 809, 812, 822, 844, 850, 856, 857, 861, 884, 890, 892, 928, 963, 964, 969, 1095, 1103, 1127, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1170, 1180, 1235, 1244, 1257, 1259, 1266], "samoa": [393, 966], "sampl": [129, 130, 295, 309, 620, 774, 868, 1158, 1244], "sample_s": [129, 130], "sampled_from": 1273, "sandwich": [197, 309], "satisfi": [469, 774, 1041, 1244], "saturdai": [201, 309, 813, 884], "save": [2, 3, 6, 201, 216, 241, 279, 309, 393, 401, 414, 418, 431, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 720, 761, 762, 770, 774, 786, 813, 818, 835, 884, 974, 991, 995, 1008], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [211, 219, 242, 309, 531, 612, 639, 644, 651, 662, 734, 736, 774, 888, 1055, 1147, 1176, 1181, 1188, 1199, 1244], "scale": [28, 63, 187, 309, 532, 574, 665, 774, 890, 1016, 1202, 1244], "scale_negative_even": [574, 774], "scan": [119, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 309, 641, 814, 821, 884, 1178], "scan_csv": [42, 43, 44, 45, 129, 130, 884], "scan_parquet": [141, 149], "scan_pyarrow_dataset": [141, 148], "scatter": [309, 312, 1244], "scenario": 1244, "schedul": [54, 796, 884], "schema": [0, 1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 91, 108, 109, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 146, 147, 148, 174, 175, 176, 182, 185, 187, 214, 217, 219, 226, 230, 267, 271, 309, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 399, 522, 523, 532, 541, 555, 557, 559, 641, 691, 756, 774, 786, 793, 794, 797, 798, 802, 804, 822, 827, 855, 868, 884, 890, 949, 1178, 1244, 1252], "schema_mod": [35, 309], "schema_overrid": [116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 138, 139, 140, 143, 147, 214, 267, 309, 884, 890], "schemadefinit": [116, 118, 119, 120, 122, 138, 139, 147, 309, 884], "schemadict": [76, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 140, 141, 143, 146, 148, 309, 756, 822, 868, 884], "schindler": 1252, "scientif": [11, 33, 42, 309, 884], "scikit": [271, 309], "scipi": [481, 620, 774, 1056, 1158, 1244, 1248], "scope": [168, 785, 890, 1255, 1258, 1270], "score": [36, 234, 309], "scroll": [36, 309], "sdiff": 514, "search": [216, 309, 523, 628, 637, 649, 818, 844, 884, 1165, 1174, 1186], "search_sort": [774, 1244], "searchsortedsid": [612, 774, 1147, 1244], "searchstrategi": [156, 158, 159, 160, 161, 163], "season": [647, 648], "sec": [1266, 1273], "second": [33, 42, 139, 143, 146, 147, 152, 153, 154, 155, 201, 216, 241, 279, 309, 403, 406, 408, 409, 413, 414, 418, 430, 431, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 647, 648, 661, 664, 717, 718, 719, 720, 760, 761, 762, 764, 774, 813, 818, 835, 884, 890, 991, 995, 1007, 1008, 1018, 1184, 1185, 1198, 1201, 1244, 1265, 1266, 1271, 1273], "second_part": [653, 654, 1190, 1191], "seconds_diff": 430, "secret": [145, 148], "section": [234, 309, 627, 634, 635, 638, 647, 648, 715, 716, 718, 719, 761, 762, 1164, 1171, 1172, 1175, 1184, 1185], "secur": [387, 774, 801, 884], "see": [35, 36, 37, 38, 53, 54, 62, 131, 132, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 159, 163, 178, 192, 201, 215, 233, 234, 309, 312, 313, 374, 448, 481, 531, 620, 627, 634, 635, 638, 639, 647, 648, 662, 715, 716, 718, 719, 748, 761, 762, 770, 774, 795, 796, 809, 813, 884, 888, 890, 942, 948, 1056, 1158, 1164, 1171, 1172, 1175, 1176, 1184, 1185, 1199, 1244, 1248, 1273], "seed": [150, 202, 245, 309, 462, 511, 580, 611, 616, 774, 1035, 1084, 1123, 1145, 1154, 1244], "seed_1": [202, 309, 462, 774, 1035, 1244], "seed_2": [202, 309, 462, 774, 1035, 1244], "seed_3": [202, 309, 462, 774, 1035, 1244], "seen": [361, 454, 774], "seen_group": 130, "select": [1, 8, 34, 47, 48, 49, 50, 88, 127, 129, 130, 131, 132, 133, 135, 137, 141, 143, 149, 158, 171, 211, 212, 216, 219, 230, 233, 242, 248, 254, 256, 269, 275, 279, 286, 309, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 343, 348, 349, 350, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 384, 386, 388, 389, 390, 391, 394, 396, 397, 405, 411, 412, 414, 417, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 439, 441, 442, 443, 444, 445, 446, 450, 452, 454, 457, 461, 462, 464, 465, 466, 467, 470, 471, 474, 480, 481, 482, 484, 495, 496, 523, 526, 527, 528, 529, 531, 532, 533, 534, 535, 538, 548, 550, 552, 553, 555, 557, 559, 562, 563, 567, 568, 569, 570, 572, 573, 576, 578, 579, 580, 581, 582, 583, 586, 587, 588, 591, 602, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 633, 634, 635, 636, 637, 638, 640, 661, 672, 674, 677, 679, 680, 682, 683, 685, 686, 687, 688, 689, 692, 694, 696, 699, 700, 701, 704, 706, 707, 708, 709, 712, 719, 720, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 737, 739, 741, 742, 744, 745, 748, 749, 753, 754, 755, 756, 757, 759, 763, 770, 774, 789, 795, 798, 818, 830, 838, 843, 845, 851, 858, 860, 884, 890, 994, 1030, 1068, 1146, 1148, 1159, 1179, 1198, 1244, 1252, 1253, 1254, 1255, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272], "select_from": [158, 161, 163], "select_seq": [309, 884], "selector": [0, 36, 173, 182, 184, 188, 225, 232, 234, 255, 264, 266, 271, 274, 276, 277, 309, 313, 443, 449, 538, 774, 786, 792, 802, 803, 806, 826, 844, 850, 852, 884], "selectortyp": [36, 309, 890], "self": [1, 48, 49, 50, 51, 53, 54, 256, 287, 309, 753, 774, 795, 796, 805, 831, 842, 845, 858, 884, 896, 939, 949, 953, 1023, 1027, 1038, 1102, 1103, 1114, 1118, 1119, 1124, 1127, 1128, 1146, 1148, 1149, 1160, 1232, 1235, 1244, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270], "semi": [126, 215, 309, 817, 884, 1259], "semigraph": 20, "sens": [129, 135, 137, 226, 279, 309, 570, 774, 827, 884], "sensit": [627, 635, 638, 647, 648, 1164, 1172, 1175, 1184, 1185], "sep": 126, "separ": [9, 10, 24, 27, 32, 33, 42, 125, 126, 128, 129, 130, 134, 143, 232, 234, 264, 273, 275, 309, 343, 346, 496, 502, 532, 633, 705, 710, 711, 774, 851, 884, 914, 917, 1069, 1075, 1170, 1214, 1220, 1244, 1265], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [36, 41, 47, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 157, 158, 159, 160, 161, 172, 180, 188, 189, 215, 216, 225, 230, 232, 233, 234, 244, 255, 264, 266, 271, 272, 276, 277, 278, 279, 309, 358, 369, 385, 456, 473, 523, 531, 574, 577, 584, 585, 623, 659, 660, 674, 683, 700, 710, 711, 724, 726, 735, 736, 745, 748, 754, 774, 790, 800, 806, 817, 818, 826, 830, 844, 849, 852, 853, 884, 890, 929, 959, 960, 1023, 1096, 1121, 1127, 1128, 1212, 1244], "sequenti": [53, 54, 248, 284, 309, 795, 796, 805, 831, 838, 842, 857, 884], "ser": [971, 972, 998], "seri": [0, 1, 11, 25, 36, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 93, 116, 118, 121, 123, 152, 154, 155, 159, 183, 192, 194, 196, 198, 201, 202, 205, 206, 208, 210, 212, 221, 223, 228, 239, 241, 245, 259, 262, 265, 267, 269, 270, 289, 309, 324, 335, 358, 362, 371, 373, 417, 446, 449, 452, 456, 457, 466, 471, 473, 474, 476, 477, 478, 479, 490, 496, 498, 523, 529, 531, 532, 580, 581, 582, 583, 584, 585, 590, 591, 602, 613, 615, 639, 661, 662, 663, 664, 668, 672, 682, 687, 697, 701, 710, 711, 715, 716, 718, 719, 724, 726, 730, 731, 734, 735, 736, 746, 748, 749, 752, 753, 756, 761, 762, 765, 774, 786, 809, 813, 835, 862, 884, 888, 1236, 1238, 1240, 1243, 1245, 1248, 1249, 1250, 1251, 1253, 1255, 1270, 1273], "serial": [39, 40, 181, 309, 387, 547, 774, 801, 884], "serializ": [774, 888], "serializationformat": [181, 249, 309, 387, 544, 774, 801, 839, 884], "server": [34, 131, 132, 309], "service_account": [133, 144], "service_account_json_absolute_path": [133, 144], "session": 131, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 117, 118, 119, 122, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 177, 184, 193, 196, 200, 202, 213, 216, 223, 225, 243, 245, 247, 249, 254, 259, 264, 266, 267, 271, 273, 274, 276, 277, 278, 283, 309, 321, 323, 345, 346, 358, 374, 385, 417, 434, 462, 473, 498, 500, 502, 511, 512, 513, 514, 515, 517, 523, 531, 532, 538, 544, 574, 577, 584, 585, 591, 592, 594, 596, 598, 600, 603, 605, 607, 611, 616, 620, 621, 626, 640, 641, 647, 648, 651, 656, 657, 658, 659, 660, 661, 663, 664, 668, 688, 692, 694, 697, 701, 705, 715, 716, 717, 718, 719, 720, 730, 731, 734, 746, 749, 750, 751, 756, 761, 762, 764, 765, 774, 786, 795, 796, 803, 805, 812, 817, 818, 822, 826, 837, 839, 843, 850, 852, 853, 856, 868, 884, 888, 894, 895, 916, 917, 929, 933, 948, 959, 994, 1011, 1028, 1035, 1046, 1053, 1071, 1073, 1075, 1084, 1085, 1086, 1087, 1088, 1090, 1096, 1103, 1121, 1127, 1128, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1145, 1146, 1147, 1154, 1158, 1159, 1163, 1177, 1178, 1184, 1185, 1188, 1193, 1194, 1195, 1198, 1200, 1201, 1205, 1225, 1233, 1244, 1269, 1273], "set_": 168, "set_ascii_t": 168, "set_auto_structifi": [247, 283, 309, 837, 856, 884], "set_decimal_separ": 27, "set_environ": 162, "set_except": [54, 796, 884], "set_fmt_float": 30, "set_fmt_str_length": [628, 637, 649, 1165, 1186], "set_index": [201, 309, 813, 884], "set_legend": [36, 309], "set_sort": [241, 279, 309, 590, 774, 818, 835, 884, 1244], "set_stat": 30, "set_streaming_chunk_s": [795, 884], "set_styl": [36, 309], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": 47, "set_tbl_row": 168, "set_thousands_separ": 9, "set_titl": [36, 309], "set_verbos": 168, "setosa": [309, 312], "setup": 1273, "sever": [116, 118, 119, 120, 122, 138, 139, 147, 309, 884, 1273], "sfu": 132, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 91, 110, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 138, 139, 143, 149, 156, 159, 163, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 245, 247, 249, 252, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 548, 549, 550, 551, 552, 553, 554, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 774, 789, 790, 792, 793, 795, 796, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 890, 892, 893, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1108, 1114, 1115, 1117, 1118, 1119, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1151, 1152, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1214, 1216, 1217, 1218, 1220, 1221, 1222, 1227, 1229, 1230, 1231, 1232, 1233, 1235, 1244, 1252, 1253, 1254, 1255, 1257, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1270, 1271], "share": [152, 153, 154, 155, 187, 309, 1016, 1244], "shawshank": 1252, "sheet": [36, 134, 140, 309], "sheet1": [36, 309], "sheet_id": [134, 140], "sheet_nam": [134, 140], "sheet_zoom": [36, 309], "sheetnam": [134, 140], "shift": [201, 309, 361, 388, 454, 493, 571, 704, 774, 813, 884, 961, 1066, 1117, 1244], "short": [152, 154], "shorten": [152, 154], "shorter": [129, 130, 143, 523, 730, 731], "should": [10, 34, 36, 41, 42, 43, 44, 45, 55, 116, 118, 120, 122, 126, 133, 134, 138, 139, 143, 147, 149, 156, 157, 159, 163, 182, 213, 216, 219, 242, 243, 244, 255, 263, 264, 275, 295, 309, 319, 384, 387, 434, 440, 443, 476, 477, 495, 532, 544, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 612, 620, 623, 688, 700, 720, 722, 734, 736, 750, 751, 764, 770, 774, 795, 801, 802, 817, 818, 822, 839, 844, 851, 884, 890, 958, 1011, 1018, 1068, 1103, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1147, 1158, 1233, 1244, 1253], "show": [30, 36, 180, 184, 199, 217, 231, 309, 464, 774, 800, 803, 831, 842, 884, 1037, 1244, 1257, 1269], "show_graph": [217, 309, 884], "show_plot": [831, 884], "shrink": [253, 309, 615, 774, 1152, 1153, 1244], "shrink_dtyp": [774, 1244], "shrink_to_fit": [309, 1244], "shuffl": [150, 245, 271, 295, 309, 511, 611, 774, 868, 1084, 1145, 1244], "side": [36, 201, 241, 309, 469, 512, 513, 514, 515, 590, 593, 595, 597, 599, 601, 604, 606, 608, 612, 715, 716, 718, 719, 761, 762, 774, 813, 835, 884, 888, 1041, 1085, 1086, 1087, 1088, 1147, 1244], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 414, 582, 647, 648, 671, 774, 890, 991, 1125, 1184, 1185, 1208, 1244, 1263], "sign_x": 1264, "signed_integ": 890, "signific": [213, 219, 309, 532, 610, 774, 1103, 1144, 1244], "significantli": [134, 219, 295, 309, 1103, 1244, 1273], "silenc": 91, "silent": [666, 1203], "similar": [32, 41, 128, 165, 194, 216, 252, 274, 276, 309, 353, 420, 423, 516, 570, 614, 675, 733, 764, 774, 818, 841, 850, 852, 884, 924, 997, 1000, 1089, 1151, 1244], "similarli": [36, 119, 201, 216, 241, 279, 309, 414, 418, 431, 590, 593, 595, 597, 599, 601, 604, 606, 608, 715, 716, 718, 719, 761, 762, 774, 813, 818, 835, 884, 991, 995, 1008], "simpl": [36, 230, 309], "simpler": 890, "simpli": [143, 710, 724], "simplifi": [42, 43, 44, 45, 53, 54, 795, 796, 805, 831, 842, 884], "simplify_express": [42, 43, 44, 45, 53, 54, 795, 796, 805, 831, 842, 884], "sin": [774, 1244, 1263], "sinc": [35, 61, 62, 77, 131, 133, 139, 143, 144, 146, 147, 156, 157, 158, 159, 163, 166, 171, 225, 267, 285, 290, 309, 399, 402, 434, 455, 531, 547, 584, 626, 633, 690, 699, 726, 774, 789, 805, 826, 844, 858, 859, 863, 884, 972, 975, 980, 981, 1011, 1034, 1127, 1163, 1170, 1225, 1244], "sind": 1263, "sine": [328, 329, 531, 618, 619, 774, 899, 900, 1156, 1157, 1244, 1267], "sing": [669, 1206], "singl": [36, 41, 47, 53, 54, 55, 128, 129, 130, 131, 132, 133, 134, 141, 143, 146, 157, 173, 182, 183, 184, 189, 196, 202, 211, 219, 232, 242, 244, 255, 266, 267, 309, 342, 374, 392, 414, 456, 459, 462, 492, 498, 531, 532, 581, 584, 586, 588, 623, 626, 639, 640, 644, 651, 662, 690, 700, 704, 705, 731, 735, 736, 754, 762, 770, 774, 792, 795, 796, 802, 803, 844, 884, 890, 913, 948, 965, 991, 1023, 1035, 1065, 1071, 1124, 1127, 1129, 1131, 1163, 1176, 1177, 1181, 1188, 1199, 1219, 1225, 1244, 1254], "sinh": [774, 1244], "sink_csv": 884, "sink_ipc": 884, "sink_ndjson": 884, "sink_parquet": 884, "site_id": [309, 313], "six": [612, 774], "size": [14, 41, 45, 129, 130, 131, 156, 157, 158, 159, 163, 165, 187, 277, 309, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 697, 730, 731, 750, 751, 774, 795, 884, 1016, 1129, 1139, 1244, 1273], "sizeunit": [187, 309, 366, 936, 1016, 1244], "skew": [602, 774, 1139, 1244], "skewtest": [620, 774, 1158, 1244], "skip": [129, 130, 134, 141, 143, 148, 216, 277, 309, 1103, 1244, 1259], "skip_empty_lin": 134, "skip_nul": [532, 774, 1103, 1244], "skip_row": [129, 130, 143], "skip_rows_after_head": [129, 130, 143], "sklearn": [271, 309], "slice": [42, 43, 44, 45, 48, 53, 54, 187, 203, 214, 260, 309, 501, 521, 532, 541, 543, 591, 592, 594, 596, 598, 600, 603, 605, 607, 639, 662, 774, 795, 796, 805, 822, 831, 842, 884, 888, 1016, 1036, 1074, 1094, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1176, 1199, 1216, 1244, 1265], "slice_pushdown": [42, 43, 44, 45, 53, 54, 795, 796, 805, 822, 831, 842, 884], "slide": [384, 774, 958, 1244], "slightli": [42, 43, 44, 45, 87, 453, 774, 884, 1266], "slot": [384, 388, 493, 774, 958, 961, 1066, 1244], "slow": [103, 119, 122, 129, 130, 131, 134, 138, 139, 140, 143, 147, 309, 384, 532, 591, 641, 774, 868, 884, 958, 1133, 1178, 1244], "slower": [120, 122, 134, 200, 219, 232, 279, 295, 309, 532, 736, 774, 812, 868, 884, 1103, 1244], "small": [11, 132, 418, 884, 1273], "smaller": [41, 45, 187, 309, 884, 1016, 1244], "smallest": [172, 272, 309, 368, 369, 683, 774, 790, 849, 884, 938, 1244, 1260, 1262], "smooth": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "snappi": [31, 41, 45, 309, 884], "snippet": [803, 884], "snowflak": [131, 132], "snowi": [647, 648], "so": [1, 36, 132, 143, 165, 199, 201, 234, 241, 309, 335, 345, 387, 453, 469, 500, 523, 532, 590, 647, 648, 649, 656, 657, 658, 672, 774, 801, 813, 835, 884, 890, 916, 1073, 1184, 1185, 1186, 1193, 1194, 1195], "softwar": [32, 128, 309], "solut": [34, 309], "some": [14, 30, 36, 46, 85, 119, 129, 130, 131, 143, 170, 184, 234, 244, 267, 309, 313, 770, 803, 884, 1046, 1244, 1273], "some_account": [635, 1172], "some_t": 1272, "someth": [531, 774], "sometim": [720, 773], "somewher": [635, 1172], "sort": [47, 48, 172, 201, 216, 226, 233, 234, 241, 250, 272, 279, 292, 303, 309, 334, 368, 369, 440, 449, 532, 570, 590, 613, 623, 682, 683, 688, 690, 700, 736, 774, 790, 805, 813, 818, 827, 830, 831, 835, 840, 842, 849, 865, 876, 884, 890, 905, 938, 1018, 1053, 1149, 1229, 1230, 1233, 1244, 1259, 1271, 1273], "sort_bi": [570, 774], "sort_column": [234, 309], "sorted_asc": [1028, 1244], "sorted_desc": [1028, 1244], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 774, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 884, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1244, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1270], "source_ac": 123, "source_actor_id": 123, "source_alia": [35, 309], "source_cha": 123, "source_channel_id": 123, "space": [20, 201, 309, 813, 884, 890], "spam": [222, 309, 635, 1172], "span": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "spanner": [309, 313], "spark": [41, 309], "sparklin": [36, 309], "speak": [620, 774, 1158, 1244], "spearman": 706, "speci": [309, 312], "special": [34, 129, 130, 132, 143, 271, 286, 309, 591, 635, 647, 648, 774, 860, 884, 1103, 1133, 1172, 1184, 1185, 1244], "specif": [1, 30, 35, 36, 37, 38, 87, 116, 118, 120, 122, 129, 132, 133, 134, 138, 139, 140, 144, 147, 173, 213, 215, 216, 261, 266, 309, 420, 423, 661, 663, 664, 668, 688, 774, 792, 817, 818, 884, 889, 890, 997, 1000, 1198, 1200, 1201, 1205, 1219, 1223, 1233, 1244, 1259, 1270, 1273], "specifi": [33, 35, 36, 41, 42, 47, 88, 91, 94, 109, 112, 129, 134, 140, 143, 160, 172, 173, 187, 188, 191, 196, 200, 201, 215, 232, 234, 241, 242, 244, 247, 248, 252, 255, 266, 272, 275, 283, 284, 288, 309, 369, 374, 439, 441, 442, 443, 448, 570, 583, 585, 592, 594, 596, 598, 600, 603, 605, 607, 614, 623, 675, 683, 700, 703, 704, 705, 715, 716, 718, 719, 720, 722, 752, 756, 761, 762, 770, 774, 790, 792, 806, 808, 812, 813, 817, 835, 837, 838, 841, 844, 849, 851, 856, 857, 861, 884, 890, 948, 1016, 1017, 1019, 1020, 1026, 1128, 1151, 1223, 1244, 1259, 1272], "speed": [45, 250, 309, 532, 774, 840, 884, 1273], "speedup": [47, 213, 219, 309, 532, 774, 1103, 1244], "split": [1, 36, 41, 48, 214, 309, 633, 653, 654, 1170, 1190, 1191], "split_by_column_dtyp": 50, "split_inclus": 652, "splitfram": [1, 48], "spreadsheet": [32, 128, 134, 140, 234, 309], "spring": [647, 648], "sql": [0, 34, 106, 107, 115, 131, 132, 215, 252, 309, 353, 516, 614, 733, 754, 774, 786, 841, 884, 924, 1089, 1151, 1244, 1252, 1253, 1255, 1257, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1271, 1272], "sql_expr": 1270, "sqlalchemi": [34, 131, 151, 309], "sqlcontext": [256, 309, 753, 845, 884, 1269], "sqlite": [34, 131, 309], "sqrt": [532, 620, 675, 774, 1103, 1158, 1244, 1263], "sqrt_x": 1264, "squar": [1, 51, 295, 481, 586, 624, 774, 868, 1056, 1129, 1161, 1244, 1264], "st": 1273, "stabil": [202, 309, 462, 774, 1035, 1244], "stabl": [141, 178, 180, 181, 202, 245, 249, 256, 309, 387, 462, 528, 544, 774, 800, 801, 826, 839, 844, 845, 852, 884, 1035, 1244], "stack": [55, 205, 281, 309, 1253], "stai": [531, 774], "standalon": [157, 890], "standard": [10, 36, 257, 266, 271, 309, 405, 441, 603, 604, 620, 625, 642, 755, 770, 774, 846, 884, 978, 1019, 1158, 1162, 1179, 1244, 1260, 1273], "standardis": [36, 309], "start": [36, 127, 129, 130, 132, 135, 137, 139, 140, 141, 143, 146, 147, 148, 165, 195, 200, 201, 217, 254, 279, 285, 286, 309, 362, 365, 367, 392, 400, 410, 415, 418, 431, 432, 443, 457, 499, 517, 589, 593, 595, 597, 599, 601, 604, 606, 608, 621, 627, 632, 635, 646, 651, 655, 656, 658, 659, 662, 671, 697, 702, 710, 714, 715, 716, 717, 718, 719, 722, 724, 730, 731, 761, 762, 764, 770, 774, 811, 812, 813, 831, 843, 859, 860, 884, 890, 937, 965, 967, 970, 973, 975, 976, 982, 984, 986, 987, 990, 992, 995, 999, 1008, 1009, 1031, 1072, 1090, 1132, 1159, 1169, 1172, 1183, 1188, 1192, 1193, 1195, 1199, 1208, 1244, 1259, 1265, 1273], "start_bi": [201, 309, 813, 884], "startbi": [201, 309, 813, 884], "starts_a": 1265, "starts_with": [48, 234, 309, 313, 362, 365, 538, 627, 632, 753, 845, 884, 890, 1169, 1263], "starts_with_expr": 367, "starts_with_lit": 367, "startup": [266, 309], "stat": [481, 620, 774, 1056, 1158, 1244], "state": [4, 99, 710, 786, 805, 831, 842, 884, 1270], "statement": [764, 1257, 1271], "static": [82, 868], "statist": [41, 45, 129, 130, 141, 146, 148, 180, 309, 441, 442, 481, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 620, 774, 800, 884, 960, 1019, 1020, 1056, 1139, 1158, 1244], "std": [180, 309, 603, 604, 774, 800, 884, 960, 1140, 1244], "std_dev": [36, 309], "stddev": 1263, "stddev_samp": 1260, "stdev": [36, 309, 1260], "stdev_samp": 1260, "stdout": [168, 199, 309, 545], "step": [277, 309, 453, 697, 730, 731, 774], "steve": [226, 309, 827, 884], "still": [131, 132], "stock_1": [309, 312], "stock_2": [309, 312], "stop": [127, 129, 130, 135, 137, 139, 141, 143, 146, 147, 148, 593, 595, 597, 599, 601, 604, 606, 608, 774, 967, 970, 975, 976, 982, 984, 986, 990, 995, 999], "storag": [35, 129, 133, 135, 137, 144, 145, 309], "storage_opt": [35, 129, 133, 135, 137, 139, 141, 143, 144, 145, 146, 147, 148, 309], "store": [35, 129, 145, 189, 213, 243, 309, 371, 588, 774, 940, 1023, 1131, 1244], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 159, 162, 163, 164, 168, 172, 173, 177, 180, 181, 182, 183, 184, 185, 187, 188, 192, 193, 194, 196, 197, 199, 200, 201, 203, 205, 208, 210, 211, 213, 215, 216, 218, 220, 222, 224, 225, 226, 227, 229, 230, 232, 234, 236, 238, 239, 240, 241, 242, 243, 245, 249, 250, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309, 318, 319, 320, 341, 346, 358, 362, 363, 364, 365, 367, 369, 371, 379, 385, 387, 389, 397, 414, 417, 418, 420, 423, 431, 440, 443, 449, 451, 455, 456, 459, 466, 469, 490, 491, 500, 501, 502, 517, 521, 523, 532, 541, 543, 544, 545, 547, 554, 555, 556, 557, 558, 559, 560, 561, 567, 570, 574, 577, 583, 584, 585, 587, 589, 590, 593, 595, 597, 599, 601, 604, 606, 608, 615, 622, 623, 672, 673, 674, 683, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 704, 705, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 770, 774, 781, 790, 792, 795, 796, 798, 800, 801, 802, 803, 805, 806, 809, 812, 813, 815, 817, 818, 826, 827, 830, 831, 833, 834, 835, 839, 840, 842, 843, 844, 845, 849, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 884, 888, 889, 890, 893, 912, 917, 929, 934, 939, 940, 959, 960, 970, 991, 994, 995, 997, 1000, 1008, 1018, 1026, 1028, 1063, 1064, 1075, 1096, 1111, 1112, 1113, 1121, 1126, 1127, 1128, 1148, 1209, 1211, 1212, 1220, 1221, 1222, 1223, 1233, 1244, 1249, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1266, 1270, 1271, 1273], "str_date": 1265, "str_timestamp": 1265, "strategi": [33, 42, 47, 55, 129, 156, 157, 158, 159, 160, 161, 163, 191, 201, 215, 216, 229, 278, 309, 448, 523, 532, 774, 808, 813, 817, 818, 853, 884, 1026, 1096, 1244], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 200, 215, 274, 309, 531, 774, 795, 796, 805, 812, 817, 822, 826, 831, 842, 844, 850, 852, 884], "streamabl": [822, 826, 852, 884], "strftime": [87, 423, 1000, 1263, 1265], "strict": [118, 119, 122, 126, 173, 182, 309, 363, 370, 627, 630, 638, 661, 663, 664, 666, 668, 774, 792, 802, 884, 890, 933, 939, 1164, 1167, 1175, 1198, 1200, 1201, 1203, 1205, 1244], "strictli": [33, 42, 46, 85, 309, 884], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 87, 93, 111, 119, 123, 126, 129, 130, 131, 132, 143, 152, 153, 154, 155, 156, 163, 167, 172, 173, 176, 181, 185, 187, 194, 196, 199, 200, 201, 216, 232, 234, 241, 244, 246, 247, 248, 249, 255, 265, 266, 272, 273, 277, 279, 283, 284, 288, 309, 318, 341, 346, 363, 364, 365, 369, 387, 414, 418, 420, 423, 431, 440, 443, 451, 455, 469, 502, 544, 545, 570, 574, 584, 585, 590, 593, 595, 597, 599, 601, 604, 606, 608, 623, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 673, 675, 683, 691, 693, 695, 700, 703, 704, 705, 713, 715, 716, 718, 719, 725, 738, 740, 743, 752, 756, 758, 761, 762, 764, 770, 774, 786, 790, 792, 797, 801, 804, 805, 812, 813, 818, 835, 836, 837, 838, 839, 844, 849, 856, 857, 861, 884, 889, 890, 917, 933, 934, 935, 941, 991, 995, 997, 1000, 1008, 1018, 1041, 1075, 1127, 1128, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1211, 1222, 1223, 1244, 1252, 1253, 1261, 1263, 1266, 1269, 1273], "stringcach": [84, 85, 215, 309, 786, 941, 942], "stringio": [138, 139, 455, 774], "strings_hex": 631, "strip": [28, 656, 657, 658, 659, 660, 1193, 1194, 1195, 1265], "strip_chars_end": [658, 660], "strip_chars_start": [657, 659], "strip_prefix": [658, 660], "strip_suffix": [657, 659], "strongli": [36, 165, 219, 242, 295, 309, 532, 774, 1103, 1244], "strpo": 1263, "strpost": 1265, "strptime": [241, 309, 417, 590, 774, 835, 884, 994, 1263], "struct": [8, 112, 123, 230, 247, 270, 275, 283, 309, 358, 385, 464, 523, 531, 532, 555, 557, 559, 577, 588, 589, 636, 641, 653, 654, 688, 710, 711, 713, 735, 774, 837, 851, 856, 868, 884, 929, 959, 1096, 1103, 1121, 1131, 1173, 1178, 1190, 1191, 1225, 1244], "struct_col": [672, 674], "struct_seri": 868, "structarrai": [187, 309, 1016, 1244], "structfieldnotfounderror": 674, "structur": [36, 37, 38, 93, 96, 110, 126, 189, 233, 244, 261, 267, 309, 574, 774, 830, 884, 1023, 1219, 1244, 1270], "student": [234, 309], "style": [7, 20, 36, 131, 234, 309], "sub": [295, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 360, 502, 509, 774, 910, 911, 912, 915, 916, 917, 918, 919, 920, 921, 922, 926, 927, 931, 1075, 1082], "subarrai": [337, 338, 908, 909], "subclass": [1, 309], "subexpress": [53, 54, 795, 796, 805, 831, 842, 884], "subject": [41, 234, 309], "sublist": [345, 488, 489, 491, 493, 497, 498, 499, 500, 501, 502, 503, 512, 517, 521, 523, 916, 1046, 1061, 1062, 1064, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1085, 1090, 1094, 1096, 1244], "subplan": [53, 54, 795, 796, 805, 831, 842, 884], "subsequ": [36, 237, 268, 309, 523, 753, 764, 805, 884, 1226, 1244, 1258], "subset": [184, 230, 274, 309, 803, 850, 884], "substr": [362, 365, 367, 627, 632, 638, 647, 648, 651, 652, 653, 654, 655, 890, 932, 935, 937, 1164, 1169, 1175, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1263], "subtl": [36, 309], "subtli": [453, 774], "subtract": [481, 676, 774, 1056, 1244], "succe": [129, 130, 143], "success": [629, 635, 1166, 1172], "successfulli": [795, 884], "suffix": [215, 216, 247, 283, 288, 309, 320, 365, 369, 476, 477, 478, 479, 537, 554, 556, 559, 560, 561, 570, 587, 632, 657, 660, 683, 774, 817, 818, 837, 856, 858, 861, 884, 890, 935, 1169, 1197], "sugar": [278, 309, 584, 585, 692, 694, 696, 707, 709, 712, 722, 727, 728, 729, 737, 739, 741, 742, 744, 746, 747, 752, 755, 757, 759, 763, 765, 774, 853, 884, 1127, 1128, 1161, 1244], "suitabl": [47, 55, 131, 157, 219, 309, 532, 612, 774, 1103, 1147, 1244], "sum": [36, 187, 194, 200, 201, 211, 234, 241, 259, 288, 309, 382, 383, 387, 436, 449, 523, 532, 541, 543, 544, 545, 546, 584, 585, 590, 605, 606, 690, 692, 710, 712, 713, 724, 736, 748, 758, 774, 795, 796, 801, 805, 812, 813, 829, 831, 835, 839, 842, 861, 884, 888, 890, 956, 957, 1014, 1016, 1141, 1244, 1252, 1259, 1261, 1263, 1270], "sum_": [620, 774, 1158, 1244], "sum_a": [241, 309, 590, 774, 835, 884], "sum_horizont": [47, 309, 757], "summari": [180, 309, 800, 884, 960, 1244, 1259], "summer": [647, 648], "sun": [661, 1198], "sundai": [201, 309, 392, 420, 423, 433, 702, 813, 884, 965, 997, 1000, 1010], "sunni": [647, 648, 1184, 1185], "supercast": [194, 309], "supertyp": [55, 191, 267, 271, 309, 324, 704, 774, 808, 884, 888, 1244], "suppli": [34, 36, 116, 118, 119, 120, 122, 131, 138, 139, 147, 192, 242, 266, 309, 449, 574, 774, 809, 884, 1223, 1244], "support": [1, 34, 35, 36, 41, 55, 116, 117, 118, 119, 120, 121, 122, 123, 131, 132, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 156, 160, 163, 168, 213, 214, 215, 216, 243, 244, 254, 255, 263, 268, 271, 309, 440, 517, 570, 584, 585, 621, 623, 639, 647, 648, 649, 651, 662, 770, 774, 780, 795, 817, 818, 843, 844, 884, 890, 1018, 1090, 1127, 1128, 1159, 1176, 1184, 1185, 1186, 1188, 1199, 1226, 1228, 1244, 1261, 1265, 1266, 1268, 1269, 1270], "supportsinterchang": 117, "suppos": [234, 309, 532, 774, 1103, 1244], "sure": [55, 116, 121, 129, 130, 133, 135, 137, 141, 237, 309, 774, 888], "surreal": 131, "surreal_query_to_fram": 131, "surrealdb": 131, "surrealhttp": 131, "surrealql": 131, "suscept": 884, "swap": [833, 884], "swim": 705, "switch": [393, 795, 884, 966], "sy": 168, "sydnei": 717, "symbol": [32, 33, 42, 309, 774, 884], "symmetr": [514, 890, 1087], "symmetri": [798, 804, 836, 855, 884], "synchron": 879, "syntact": [278, 309, 584, 585, 692, 694, 696, 707, 709, 712, 722, 727, 728, 729, 737, 739, 741, 742, 744, 746, 747, 752, 755, 757, 759, 763, 765, 774, 853, 884, 1127, 1128, 1161, 1244], "syntax": [36, 107, 192, 219, 230, 309, 627, 634, 635, 638, 647, 648, 730, 731, 770, 809, 842, 884, 1164, 1171, 1172, 1175, 1184, 1185, 1244, 1266, 1268], "system": [32, 129, 130, 309, 397, 795, 884, 970], "t": [32, 33, 35, 42, 55, 128, 129, 134, 140, 143, 201, 216, 219, 233, 274, 277, 309, 384, 393, 401, 417, 436, 439, 441, 442, 495, 532, 574, 634, 638, 647, 648, 658, 661, 664, 764, 774, 813, 830, 850, 884, 890, 958, 994, 1014, 1017, 1019, 1020, 1068, 1103, 1171, 1175, 1184, 1185, 1194, 1195, 1198, 1201, 1244, 1255, 1256, 1265], "t_": [275, 309, 440, 774, 851, 884, 1018, 1244], "t_0": [241, 309, 590, 593, 595, 597, 599, 601, 604, 606, 608, 774, 835, 884], "t_1": [241, 309, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 774, 835, 884, 1018, 1244], "t_2": [440, 774, 1018, 1244], "t_a": [275, 309, 851, 884], "t_b": [275, 309, 851, 884], "t_c": [275, 309, 851, 884], "t_d": [275, 309, 851, 884], "t_i": [440, 774, 1018, 1244], "t_n": [241, 309, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 774, 835, 884, 1018, 1244], "t_struct": [275, 309, 851, 884], "tab_spann": [309, 313], "tab_stub": [309, 313], "tab_styl": [309, 313], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 116, 123, 126, 133, 134, 144, 145, 215, 234, 256, 261, 268, 277, 278, 309, 313, 753, 786, 817, 845, 853, 884, 1253, 1254, 1255, 1256, 1258, 1259, 1269, 1270], "table_nam": [34, 36, 256, 309, 845, 884], "table_path": [35, 133, 144, 145, 309], "table_styl": [36, 309], "tablemerg": [35, 309], "tablenotfounderror": [35, 309], "tables_scale_100": [125, 130], "tail": [199, 203, 309, 324, 620, 774, 884, 1036, 1158, 1244], "take": [36, 126, 134, 140, 159, 160, 168, 194, 195, 201, 223, 226, 233, 234, 238, 309, 334, 392, 414, 449, 456, 457, 498, 499, 531, 555, 557, 559, 623, 700, 702, 721, 723, 732, 774, 811, 813, 827, 833, 884, 905, 965, 991, 1030, 1031, 1071, 1072, 1235, 1244, 1261], "taken": [517, 651, 1090, 1188], "tan": [774, 1244, 1263], "tand": 1263, "tangent": [330, 331, 679, 680, 774, 901, 902, 1217, 1218, 1244, 1267], "tanh": [234, 309, 774, 1244], "target": [1, 34, 35, 36, 52, 134, 271, 309, 634, 661, 663, 664, 890, 1171, 1198, 1200, 1201, 1265], "target_alia": [35, 309], "target_t": [34, 309], "task": [54, 796, 884], "tb": [152, 154, 187, 309, 1016, 1244], "tbl": [125, 130, 1272], "tbl0": 1258, "tbl1": [1256, 1258], "tbl2": [1256, 1258], "tbl3": 1256, "tbl4": 1256, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 180, 309, 800, 884], "tbl_width_char": 720, "td1": 890, "td2": 890, "td3": 890, "tdf": [233, 309], "technic": 770, "tell": [628, 649, 1165, 1186], "tempor": [87, 173, 201, 213, 241, 243, 244, 263, 309, 374, 469, 590, 593, 595, 597, 599, 601, 604, 606, 608, 774, 786, 792, 813, 835, 884, 890, 948, 1041, 1244, 1263, 1269], "temporalliter": [374, 774, 948, 980, 981, 1244], "temporari": [34, 309], "temporarili": [165, 168, 201, 241, 309, 590, 774, 813, 835, 884], "tend": [152, 154], "tensor": [271, 309, 1228, 1244], "tensordataset": [271, 309], "term": [439, 441, 442, 639, 651, 662, 774, 1017, 1019, 1020, 1176, 1188, 1199, 1244], "termin": [33, 42, 309, 884], "test": [0, 34, 131, 132, 134, 140, 234, 309, 786, 814, 821, 884], "test1": 1258, "test2": 1258, "test3": 1258, "test_1": [234, 309], "test_1_math": [234, 309], "test_1_phys": [234, 309], "test_2": [234, 309], "test_2_math": [234, 309], "test_2_phys": [234, 309], "test_data": 131, "test_df_height": 159, "test_func": 735, "test_lf": [858, 884], "test_miscellan": 1273, "test_numer": 1273, "test_price_calcul": 1273, "test_series_len": 163, "test_tabl": 132, "test_unique_xyz": 157, "testdb": 132, "testing1234": 1258, "text": [128, 131, 440, 639, 643, 644, 647, 648, 650, 651, 662, 754, 774, 1018, 1176, 1180, 1181, 1187, 1188, 1199, 1244, 1258, 1273], "texttt": [620, 774, 1158, 1244], "th": [195, 309, 457, 499, 512, 620, 639, 662, 774, 811, 884, 1031, 1072, 1085, 1158, 1176, 1199, 1244], "than": [36, 42, 43, 44, 45, 53, 54, 90, 113, 120, 122, 129, 130, 131, 134, 140, 143, 149, 174, 200, 213, 215, 216, 219, 232, 242, 243, 245, 277, 295, 309, 453, 455, 458, 460, 469, 483, 511, 530, 531, 532, 545, 577, 589, 611, 620, 639, 643, 645, 646, 654, 662, 671, 706, 736, 774, 795, 796, 812, 817, 818, 868, 884, 1041, 1084, 1103, 1121, 1132, 1145, 1158, 1176, 1180, 1182, 1183, 1191, 1199, 1208, 1225, 1244, 1273], "the_aws_access_key_id": [35, 133, 144, 145, 309], "the_aws_region": [35, 309], "the_aws_secret_access_kei": [35, 133, 144, 145, 309], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 119, 143, 168, 216, 217, 244, 309, 649, 657, 658, 774, 795, 884, 888, 890], "them": [54, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 188, 189, 201, 216, 226, 234, 241, 271, 279, 309, 346, 440, 469, 502, 562, 563, 570, 590, 704, 715, 716, 718, 719, 761, 762, 774, 796, 806, 813, 818, 827, 835, 884, 890, 917, 1018, 1023, 1075, 1112, 1113, 1244, 1261, 1270], "therebi": [143, 146, 147], "therefor": [187, 309, 532, 764, 774, 1016, 1244], "theta": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "thi": [1, 4, 10, 12, 14, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 91, 116, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 175, 176, 178, 180, 181, 184, 187, 189, 193, 194, 199, 200, 201, 202, 206, 208, 210, 211, 212, 213, 215, 216, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 232, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 256, 257, 258, 261, 263, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 290, 295, 308, 309, 312, 313, 321, 324, 325, 334, 346, 352, 353, 354, 359, 368, 369, 371, 374, 384, 385, 387, 393, 394, 405, 411, 412, 414, 417, 418, 420, 423, 434, 438, 445, 455, 462, 464, 466, 467, 469, 473, 495, 496, 502, 511, 512, 513, 514, 515, 516, 518, 523, 524, 528, 529, 531, 532, 536, 537, 538, 539, 540, 541, 542, 544, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 570, 577, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 614, 615, 616, 621, 622, 623, 626, 628, 634, 637, 640, 641, 645, 646, 649, 656, 657, 658, 659, 660, 665, 671, 673, 675, 682, 683, 685, 686, 687, 688, 692, 696, 704, 707, 709, 710, 723, 724, 726, 728, 729, 732, 733, 736, 739, 741, 744, 746, 750, 751, 752, 755, 759, 763, 764, 765, 770, 774, 786, 789, 790, 791, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 812, 813, 815, 817, 818, 822, 826, 827, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 850, 852, 853, 855, 856, 857, 858, 859, 860, 863, 868, 882, 883, 884, 888, 890, 896, 905, 917, 923, 924, 925, 930, 938, 940, 942, 943, 948, 949, 958, 959, 966, 967, 969, 978, 988, 989, 991, 994, 995, 997, 1000, 1011, 1013, 1016, 1022, 1023, 1031, 1032, 1035, 1037, 1046, 1055, 1068, 1069, 1075, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1097, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1116, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1159, 1160, 1162, 1163, 1165, 1171, 1174, 1177, 1178, 1182, 1183, 1186, 1193, 1194, 1195, 1202, 1208, 1209, 1211, 1214, 1215, 1219, 1221, 1223, 1224, 1225, 1226, 1228, 1229, 1230, 1232, 1233, 1234, 1244, 1248, 1252, 1253, 1254, 1258, 1265, 1268, 1269, 1270, 1271, 1273], "thing": [143, 150], "think": [411, 412, 988, 989], "third": [531, 774], "thoma": [226, 309, 827, 884], "those": [30, 36, 129, 244, 268, 278, 309, 453, 580, 634, 736, 774, 853, 884, 890, 1123, 1171, 1226, 1244], "though": [34, 131, 201, 309, 770, 813, 884], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 33, 42, 54, 125, 129, 130, 132, 165, 166, 255, 309, 495, 532, 623, 700, 774, 796, 844, 884, 925, 1068, 1091, 1160, 1244], "thread_loc": [532, 774], "thread_pool_s": 166, "threadpool": 53, "three": [36, 241, 270, 309, 385, 577, 590, 612, 639, 662, 774, 835, 884, 929, 959, 1096, 1121, 1176, 1199, 1244], "threshold": [247, 309, 837, 884], "through": [117, 131, 770, 890, 1244, 1258], "throw": [35, 118, 119, 122, 173, 182, 309, 641, 642, 792, 802, 884, 1178, 1179, 1244], "thu": [36, 189, 309, 706, 1023, 1244], "thursdai": [201, 309, 392, 702, 813, 884, 965], "ti": [580, 774, 1123, 1244], "time": [12, 35, 52, 53, 54, 62, 64, 100, 133, 139, 143, 144, 146, 147, 159, 160, 163, 180, 189, 201, 216, 241, 279, 309, 341, 368, 369, 393, 394, 396, 397, 398, 401, 402, 411, 412, 414, 417, 418, 420, 422, 423, 431, 434, 440, 490, 491, 523, 589, 590, 593, 595, 597, 599, 601, 604, 606, 608, 616, 661, 664, 668, 681, 682, 683, 704, 705, 715, 716, 717, 718, 719, 720, 726, 761, 762, 774, 795, 796, 800, 813, 818, 831, 835, 884, 890, 912, 938, 966, 967, 969, 970, 974, 975, 991, 994, 995, 997, 999, 1000, 1008, 1011, 1018, 1023, 1063, 1064, 1132, 1154, 1198, 1201, 1205, 1227, 1229, 1244, 1252, 1258, 1266, 1273], "time_column": [279, 309], "time_format": [33, 42, 309, 884], "time_unit": [62, 64, 394, 396, 402, 422, 434, 664, 717, 718, 719, 720, 726, 890, 967, 969, 975, 999, 1011, 1201], "time_unit_m": [394, 967], "time_unit_n": [394, 967], "time_unit_u": 434, "time_zon": [62, 397, 399, 417, 664, 717, 718, 719, 890, 966, 970, 974, 994, 1201], "timedelta": [201, 216, 241, 279, 309, 414, 418, 431, 440, 590, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 606, 607, 608, 715, 716, 718, 719, 761, 762, 774, 813, 818, 835, 884, 890, 979, 985, 991, 995, 1008, 1018, 1112, 1113, 1162, 1234, 1244], "timeout": [54, 796, 884], "timestamp": [123, 133, 144, 201, 309, 417, 418, 431, 726, 813, 884, 994, 995, 1008, 1263], "timestamp_m": 422, "timestamp_n": 999, "timestamp_u": [422, 999], "timestep": 726, "timeunit": [33, 42, 62, 64, 309, 394, 396, 422, 434, 664, 717, 718, 719, 720, 884, 890, 967, 969, 999, 1011, 1201], "timezon": [62, 133, 144, 399, 890, 1266], "tip": [532, 774], "titl": [36, 309, 1252], "titlecas": [669, 1206], "tm": [396, 890, 1266], "to_arrow": [214, 309, 1225, 1244, 1270], "to_batch": [214, 309], "to_dict": [173, 309, 792, 884, 890], "to_dummi": [266, 271, 309, 1244], "to_fram": [371, 402, 418, 422, 431, 661, 959, 1121, 1146, 1148, 1190, 1191, 1198, 1244], "to_init_repr": [123, 309, 1244], "to_jax": [271, 309, 1244], "to_list": [123, 241, 309, 1164, 1175, 1244], "to_lowercas": 561, "to_numpi": [266, 271, 309, 531, 774, 1244], "to_panda": [309, 1244], "to_phys": [774, 942, 1244], "to_seri": [48, 196, 309, 661, 701, 749, 1198], "to_sql": [34, 309], "to_str": [420, 997], "to_struct": [309, 635], "to_torch": [266, 309, 1244], "to_uppercas": [320, 560, 636, 774], "togeth": 1265, "token": [139, 141, 143, 145, 146, 147, 148], "tokyo": [123, 890], "tokyo_tz": 890, "toler": [152, 153, 154, 155, 216, 309, 818, 884], "tone": [36, 309], "tonight": [628, 649, 1165, 1186], "too": [14, 234, 309, 884], "toomanyrowsreturnederror": [242, 309], "top": [36, 256, 272, 309, 683, 774, 845, 849, 884, 1270], "top_col": [36, 309], "top_k": [172, 309, 368, 369, 683, 774, 790, 884, 938, 1244], "top_k_bi": [368, 369, 682, 774], "top_row": [36, 309], "tor_id": 123, "torch": [151, 271, 309, 1228, 1244], "torchexporttyp": [271, 309], "tostructstrategi": [523, 1096], "total": [36, 187, 290, 309, 424, 425, 426, 427, 428, 429, 430, 484, 504, 774, 863, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1016, 1057, 1077, 1244], "total_gross": 1252, "toward": [290, 484, 504, 709, 774, 863, 1057, 1077, 1244], "tp": [1, 50], "tpch": [125, 130], "tpu": [266, 309, 1223, 1244], "traceback": [152, 153, 154, 155, 267, 309, 585, 774, 1128, 1225, 1244], "tracebacktyp": 1270, "track": [133, 144, 145, 219, 309, 523, 1270], "trail": [28, 199, 309, 656, 657, 1193, 1194], "train": [271, 309], "train_lf": [858, 884], "transfer": 132, "transferencod": [363, 364, 630, 631, 933, 934, 1167, 1168], "transform": [219, 256, 309, 531, 667, 669, 670, 753, 774, 845, 884], "transit": [192, 309, 809, 884], "translat": 131, "transpar": [795, 884], "transpos": [234, 309], "travel": [133, 144], "travers": [592, 594, 596, 598, 600, 603, 605, 607, 774, 1134, 1135, 1137, 1140, 1141, 1142, 1244], "treat": [129, 130, 143, 440, 627, 629, 638, 647, 648, 764, 774, 1018, 1164, 1166, 1175, 1184, 1185, 1244], "tree": [545, 805, 884], "tree_format": [805, 884], "trend": [36, 309], "tri": [219, 309], "triangl": [295, 868], "trigger": [35, 268, 309, 774, 888, 1226, 1244], "trigonometri": [1263, 1269], "trim": [123, 1265], "trim_decimal_zero": 28, "trip": 131, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 41, 42, 43, 44, 45, 53, 54, 55, 116, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 137, 140, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 168, 170, 173, 174, 175, 180, 182, 186, 191, 192, 194, 196, 198, 199, 200, 201, 206, 208, 209, 210, 213, 215, 216, 217, 222, 223, 229, 230, 232, 234, 235, 242, 243, 244, 245, 247, 255, 256, 259, 262, 264, 266, 267, 268, 271, 273, 274, 275, 277, 278, 279, 283, 289, 291, 293, 296, 297, 298, 299, 300, 301, 302, 309, 319, 320, 321, 322, 323, 324, 335, 337, 338, 341, 345, 346, 354, 358, 362, 363, 365, 367, 369, 370, 379, 380, 381, 382, 383, 385, 392, 394, 397, 400, 402, 404, 411, 412, 414, 415, 417, 418, 419, 422, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 436, 437, 438, 439, 441, 442, 449, 456, 458, 459, 460, 461, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 486, 487, 491, 498, 500, 502, 518, 523, 530, 531, 532, 536, 537, 538, 539, 540, 541, 542, 545, 546, 564, 565, 567, 569, 572, 573, 577, 582, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 615, 620, 622, 623, 626, 627, 628, 629, 630, 632, 637, 638, 640, 641, 642, 647, 648, 652, 653, 655, 661, 663, 664, 666, 668, 672, 674, 683, 685, 688, 691, 692, 693, 694, 695, 697, 700, 701, 702, 706, 715, 718, 724, 730, 736, 746, 749, 753, 756, 761, 764, 765, 774, 792, 793, 794, 795, 796, 800, 802, 805, 808, 809, 812, 813, 817, 818, 820, 822, 826, 831, 837, 842, 844, 845, 850, 851, 852, 853, 856, 862, 864, 866, 869, 870, 871, 872, 873, 874, 875, 883, 884, 888, 890, 894, 895, 906, 908, 909, 912, 916, 917, 925, 932, 933, 935, 937, 939, 941, 943, 946, 947, 959, 965, 966, 967, 970, 973, 974, 975, 976, 977, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1015, 1017, 1019, 1020, 1027, 1033, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1059, 1060, 1064, 1071, 1073, 1075, 1091, 1103, 1109, 1115, 1118, 1119, 1121, 1124, 1125, 1139, 1158, 1160, 1163, 1164, 1165, 1166, 1167, 1169, 1174, 1175, 1177, 1178, 1179, 1184, 1185, 1189, 1190, 1192, 1198, 1200, 1201, 1203, 1205, 1220, 1225, 1226, 1233, 1235, 1244, 1252, 1253, 1255, 1257, 1261, 1262, 1265, 1270, 1273], "truediv": [453, 774], "truncat": [123, 129, 130, 143, 199, 201, 213, 243, 244, 263, 309, 813, 831, 884, 1269], "truncate_nod": [831, 884], "truncate_ragged_lin": [129, 130, 143], "truncate_str": 431, "truncate_td": 431, "trust": [387, 774, 801, 884], "try": [53, 54, 110, 129, 130, 135, 139, 141, 143, 146, 147, 148, 795, 796, 805, 831, 842, 884], "try_cast": 1263, "try_parse_d": [125, 129, 130, 143], "try_parse_hive_d": [141, 146, 148], "ts_local": [417, 994], "tseri": [411, 412, 988, 989], "tstamp": 890, "tstamp_tokyo": 890, "tstamp_utc": 890, "tuesdai": [201, 309, 813, 884], "tupl": [36, 56, 132, 134, 140, 213, 219, 232, 242, 243, 244, 251, 271, 287, 309, 586, 774, 831, 842, 884, 889, 890, 1129, 1150, 1244], "turn": [8, 42, 43, 44, 45, 53, 54, 129, 130, 143, 215, 216, 309, 669, 795, 796, 805, 817, 818, 822, 831, 884, 1206], "twice": [36, 309], "two": [36, 46, 84, 85, 118, 120, 122, 132, 192, 194, 216, 225, 226, 243, 270, 276, 289, 295, 309, 313, 319, 389, 396, 453, 456, 459, 523, 577, 622, 698, 699, 704, 706, 708, 750, 751, 753, 774, 809, 826, 827, 852, 862, 868, 884, 890, 929, 962, 969, 1096, 1121, 1244, 1258, 1259, 1262, 1271], "two_a": 1270, "tworld": [658, 1193, 1195], "txt": [1, 12, 143, 627, 638, 1175], "type": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 118, 119, 120, 121, 122, 124, 129, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 176, 185, 188, 194, 199, 201, 202, 214, 215, 219, 241, 246, 261, 266, 267, 270, 271, 274, 286, 309, 321, 323, 326, 327, 328, 329, 330, 331, 334, 339, 340, 341, 343, 346, 357, 358, 362, 363, 364, 365, 366, 367, 370, 371, 374, 375, 376, 377, 378, 385, 386, 392, 393, 395, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 440, 443, 445, 456, 459, 462, 469, 470, 471, 472, 473, 474, 475, 484, 488, 489, 491, 496, 502, 504, 522, 523, 531, 532, 577, 579, 583, 584, 585, 586, 588, 589, 590, 618, 619, 626, 629, 630, 631, 633, 634, 635, 636, 639, 640, 642, 643, 644, 651, 652, 653, 654, 661, 662, 666, 679, 680, 681, 688, 697, 704, 707, 714, 715, 716, 717, 718, 719, 720, 722, 730, 731, 733, 734, 735, 736, 746, 749, 760, 761, 762, 765, 770, 774, 786, 795, 796, 804, 805, 806, 813, 817, 831, 835, 836, 842, 850, 860, 884, 889, 894, 895, 906, 908, 909, 910, 911, 912, 914, 916, 917, 928, 929, 930, 932, 933, 934, 936, 939, 940, 948, 959, 960, 965, 966, 968, 970, 971, 972, 973, 974, 976, 977, 978, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1018, 1022, 1035, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1059, 1060, 1061, 1062, 1064, 1069, 1075, 1077, 1095, 1096, 1115, 1121, 1127, 1128, 1129, 1131, 1132, 1153, 1163, 1164, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1176, 1177, 1179, 1180, 1181, 1188, 1189, 1190, 1191, 1198, 1199, 1203, 1224, 1225, 1227, 1235, 1244, 1252, 1259, 1263, 1265, 1269, 1270], "type_coercion": [42, 43, 44, 45, 53, 54, 795, 796, 805, 831, 842, 884], "typeerror": [35, 309], "typenam": [36, 309], "typic": [119, 131, 148, 219, 309, 401, 890, 974, 1103, 1244], "tz": [664, 1201], "tzinfo": [133, 144, 890], "u": [36, 62, 64, 148, 161, 216, 309, 394, 396, 402, 422, 434, 661, 664, 693, 695, 717, 718, 719, 720, 726, 890, 967, 969, 975, 999, 1011, 1198, 1201, 1256, 1266], "u1": [267, 309], "u16": [143, 1268, 1273], "u32": [12, 131, 171, 173, 179, 231, 285, 286, 290, 294, 300, 302, 309, 319, 325, 332, 333, 334, 335, 336, 339, 340, 342, 351, 366, 378, 379, 464, 484, 488, 489, 492, 504, 509, 552, 568, 580, 588, 589, 593, 595, 597, 599, 601, 604, 606, 608, 612, 629, 638, 643, 644, 681, 686, 688, 692, 696, 700, 701, 707, 709, 730, 733, 744, 774, 789, 792, 799, 829, 859, 860, 863, 867, 873, 875, 884, 890, 905, 906, 907, 910, 911, 913, 922, 939, 942, 953, 1037, 1061, 1062, 1065, 1077, 1082, 1123, 1131, 1132, 1147, 1166, 1175, 1180, 1181, 1227, 1231, 1233, 1244, 1252, 1260, 1261, 1265, 1270], "u64": [202, 286, 309, 462, 582, 774, 831, 860, 884, 890, 1035, 1125, 1244], "u8": [173, 264, 265, 277, 309, 585, 691, 774, 792, 884, 890, 1128, 1220, 1244, 1273], "udf": [165, 219, 233, 295, 309, 387, 532, 574, 736, 774, 801, 830, 868, 884, 1103, 1244], "ufunc": 90, "uid": 131, "uint": 1273, "uint16": [143, 382, 383, 677, 774, 890, 956, 957, 1215, 1225, 1228, 1244], "uint2": 1268, "uint32": [124, 151, 173, 187, 241, 286, 309, 334, 339, 340, 366, 378, 440, 456, 459, 484, 488, 489, 504, 583, 588, 589, 590, 629, 643, 644, 681, 707, 730, 733, 774, 792, 835, 860, 884, 890, 906, 910, 911, 936, 939, 1016, 1018, 1061, 1062, 1077, 1131, 1132, 1166, 1180, 1181, 1227, 1228, 1244], "uint4": 1270, "uint64": [124, 202, 241, 286, 309, 339, 340, 440, 462, 488, 489, 582, 590, 774, 835, 860, 884, 890, 910, 911, 1018, 1035, 1061, 1062, 1125, 1228, 1244], "uint8": [131, 173, 265, 266, 267, 277, 309, 382, 383, 585, 677, 691, 774, 792, 884, 890, 956, 957, 1128, 1215, 1228, 1244, 1273], "uint8_pair": 1273, "uit": [651, 1188], "uk": [635, 1172], "un": [217, 309], "unabl": [92, 134], "unari": [566, 774], "unbias": [441, 442, 774, 1019, 1020, 1244], "unchang": [187, 309, 584, 681, 774, 822, 868, 884, 1016, 1127, 1227, 1244], "uncompress": [31, 37, 38, 41, 45, 135, 146, 309, 884], "undefin": [684, 774], "under": [46, 48, 49, 50, 51, 84, 85, 139, 141, 143, 146, 147, 148, 256, 309, 766, 767, 769, 770, 775, 776, 779, 781, 782, 783, 845, 884, 1236, 1238, 1240, 1245, 1249, 1250, 1251], "underli": [1, 46, 61, 62, 64, 77, 85, 89, 99, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 141, 147, 156, 159, 163, 188, 189, 213, 214, 243, 261, 267, 309, 363, 394, 395, 396, 400, 403, 404, 405, 406, 407, 408, 409, 410, 413, 415, 416, 417, 419, 432, 433, 434, 435, 582, 609, 627, 630, 638, 774, 806, 884, 890, 933, 942, 967, 968, 969, 973, 976, 977, 978, 982, 983, 984, 986, 987, 990, 992, 993, 994, 996, 1009, 1010, 1011, 1012, 1023, 1125, 1143, 1153, 1164, 1167, 1175, 1219, 1225, 1244, 1270], "understood": 736, "undo": [546, 553, 554, 556, 558, 560, 561], "unexpect": [99, 108, 131, 531, 532, 774, 1103, 1244], "unhelpfulli": [152, 154], "unicod": [20, 639, 644, 651, 662, 890, 1176, 1181, 1188, 1199], "unifi": [36, 266, 271, 309, 890], "uniform": [36, 309, 577, 774, 1121, 1244], "unimod": [620, 774, 1158, 1244], "unintend": [192, 309, 809, 884], "union": [53, 54, 55, 515, 795, 796, 805, 831, 842, 884, 890, 1088, 1269, 1270], "uniqu": [41, 45, 47, 156, 157, 158, 161, 163, 171, 210, 215, 230, 234, 244, 300, 309, 325, 336, 351, 385, 480, 509, 552, 577, 661, 663, 664, 668, 686, 688, 696, 744, 774, 789, 817, 873, 884, 888, 907, 922, 959, 1054, 1082, 1110, 1121, 1198, 1200, 1201, 1205, 1231, 1233, 1244, 1259, 1261], "unique_column_valu": [234, 309], "unique_count": [774, 1244], "uniquekeepstrategi": [274, 309, 850, 884], "unit": [36, 62, 64, 152, 153, 154, 155, 159, 163, 187, 309, 366, 394, 396, 402, 422, 434, 440, 446, 529, 542, 661, 664, 687, 717, 718, 719, 720, 726, 774, 831, 884, 888, 890, 936, 967, 969, 975, 999, 1011, 1016, 1018, 1024, 1102, 1198, 1201, 1232, 1244, 1273], "unix": [61, 62, 402, 726, 975], "unknown": [634, 734, 1171], "unless": [36, 47, 118, 266, 271, 309, 656, 657, 749, 884, 1193, 1265], "unlik": [126, 201, 309, 813, 884], "unnam": [636, 1173], "unnest": [126, 309, 385, 577, 588, 635, 636, 653, 654, 674, 675, 688, 774, 884, 929, 959, 1096, 1121, 1131, 1190, 1191, 1244, 1263, 1269], "unoptim": [217, 309], "unpivot": [225, 309, 826, 884], "unregist": [1254, 1255, 1256, 1270, 1272], "unsaf": [774, 888], "unset": [34, 141, 146, 158, 294, 309, 417, 523, 867, 994, 1252], "unsign": [78, 79, 80, 81, 582, 774, 890, 1125, 1244], "unsigned_integ": 890, "unstabl": [41, 42, 43, 44, 45, 53, 54, 63, 65, 114, 126, 131, 141, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 256, 266, 271, 277, 278, 309, 312, 313, 384, 385, 418, 464, 532, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 750, 751, 774, 795, 796, 805, 845, 853, 884, 943, 958, 959, 995, 1037, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1223, 1228, 1244, 1248], "unstack": 309, "unstackdirect": [277, 309], "unsuit": 115, "unsupport": [35, 309], "until": [84, 201, 217, 309, 645, 646, 671, 813, 884, 1182, 1183, 1208], "up": [10, 36, 76, 132, 213, 216, 234, 243, 244, 250, 263, 309, 373, 532, 639, 662, 774, 817, 818, 822, 840, 884, 890, 945, 1176, 1199, 1244], "upcast": [324, 774], "upcast_integer_typ": [1, 50], "updat": [35, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 180, 309, 800, 884], "upgrad": 95, "upheld": [822, 884], "upon": 130, "upper": [129, 130, 131, 187, 201, 309, 374, 464, 469, 523, 555, 687, 697, 715, 716, 718, 719, 761, 762, 774, 813, 884, 948, 1016, 1037, 1041, 1102, 1232, 1244, 1261, 1263], "upper_bound": [201, 309, 374, 469, 523, 774, 813, 884, 948, 1041, 1102, 1244], "uppercas": [561, 670, 1207, 1265], "upsampl": [201, 309, 813, 884], "urandom": [366, 936], "uri": [34, 35, 131, 132, 133, 144, 145, 309], "url": [131, 132, 141, 146, 148, 634, 636, 1171, 1173], "urllib": 132, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 87, 91, 114, 117, 119, 120, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 171, 172, 173, 176, 180, 182, 184, 190, 191, 192, 194, 200, 201, 208, 210, 212, 213, 214, 216, 219, 225, 229, 230, 232, 233, 234, 241, 242, 243, 244, 245, 247, 248, 250, 255, 256, 257, 261, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285, 286, 288, 295, 309, 312, 319, 321, 323, 325, 334, 335, 358, 363, 364, 369, 384, 387, 390, 391, 399, 417, 418, 420, 423, 431, 434, 436, 439, 440, 441, 442, 443, 447, 448, 449, 453, 464, 467, 468, 469, 481, 495, 511, 519, 523, 525, 531, 532, 535, 553, 556, 558, 560, 561, 570, 577, 580, 582, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 611, 613, 615, 620, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 643, 644, 647, 648, 649, 651, 653, 655, 657, 658, 659, 660, 661, 663, 664, 668, 671, 672, 675, 683, 689, 690, 692, 693, 694, 695, 696, 699, 700, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 724, 726, 730, 731, 733, 734, 736, 737, 738, 740, 742, 743, 746, 749, 750, 751, 752, 753, 755, 756, 757, 758, 761, 762, 763, 764, 765, 770, 773, 774, 785, 786, 789, 790, 791, 792, 795, 796, 798, 800, 801, 802, 803, 804, 805, 807, 808, 809, 812, 813, 814, 818, 820, 821, 826, 835, 836, 837, 838, 840, 844, 845, 846, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 868, 884, 889, 890, 894, 895, 925, 929, 933, 934, 943, 958, 960, 963, 964, 972, 980, 981, 994, 995, 997, 1000, 1008, 1011, 1014, 1017, 1018, 1019, 1020, 1025, 1026, 1030, 1034, 1037, 1039, 1040, 1041, 1056, 1068, 1084, 1091, 1096, 1103, 1121, 1123, 1125, 1127, 1129, 1131, 1132, 1133, 1145, 1146, 1148, 1149, 1152, 1158, 1160, 1162, 1163, 1164, 1165, 1167, 1168, 1170, 1171, 1172, 1174, 1175, 1180, 1181, 1184, 1185, 1186, 1188, 1190, 1198, 1200, 1201, 1205, 1208, 1219, 1220, 1222, 1225, 1226, 1234, 1244, 1248, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1265, 1266, 1270, 1273], "usag": [159, 163, 253, 309, 890, 1153, 1244], "usd": [199, 309, 1273], "use_pyarrow": [41, 45, 129, 135, 137, 141, 267, 309, 884, 1225, 1244], "use_pyarrow_extension_arrai": [268, 309, 1226, 1244], "use_pyarrow_write_to_dataset": [41, 309], "use_statist": [141, 148], "user": [34, 131, 132, 219, 233, 295, 309, 531, 532, 574, 613, 736, 774, 830, 868, 884, 888, 1103, 1149, 1244], "user_conn": 131, "usernam": [129, 132, 135, 137], "userwarn": 1, "usr": 131, "usual": [91, 132, 271, 309, 393, 966], "utc": [133, 144, 393, 397, 399, 401, 417, 661, 664, 890, 966, 970, 974, 994, 1198, 1201], "utc_tz": 890, "utf": [33, 42, 75, 309, 884], "utf8": [20, 129, 130, 143, 639, 651, 662, 1176, 1188, 1199], "utf8_borders_onli": 20, "utf8_ful": [20, 47, 123], "utf8_full_condens": [7, 20, 123], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [271, 309, 726, 884, 888], "uvw": [635, 1172], "v": [8, 9, 41, 187, 309, 612, 693, 695, 774, 1147, 1244, 1255, 1256], "v2": [8, 135, 146], "val": [36, 240, 309, 532, 574, 681, 764, 774, 834, 884], "valid": [33, 36, 42, 62, 131, 135, 137, 141, 163, 168, 182, 187, 215, 309, 384, 627, 629, 634, 635, 636, 638, 642, 647, 648, 764, 774, 802, 817, 884, 890, 958, 1016, 1164, 1166, 1171, 1172, 1173, 1175, 1179, 1184, 1185, 1244, 1252, 1253], "validate_output_schema": [822, 884], "vals_phys": [681, 774], "valu": [4, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 93, 118, 119, 121, 122, 129, 130, 131, 132, 141, 143, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 170, 171, 172, 180, 184, 186, 189, 190, 191, 192, 196, 199, 201, 202, 203, 207, 211, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 232, 234, 235, 236, 238, 241, 242, 243, 244, 245, 252, 255, 257, 258, 259, 260, 262, 263, 267, 268, 272, 273, 276, 277, 278, 279, 280, 287, 290, 291, 293, 296, 297, 299, 300, 309, 313, 317, 318, 319, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 383, 384, 385, 388, 390, 391, 396, 400, 410, 415, 432, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 516, 518, 519, 520, 521, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 548, 549, 550, 551, 552, 562, 563, 564, 565, 568, 570, 571, 574, 575, 577, 578, 580, 583, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 617, 618, 619, 620, 622, 623, 624, 626, 627, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 653, 654, 655, 662, 671, 673, 676, 677, 679, 680, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 700, 703, 704, 705, 707, 709, 710, 711, 712, 713, 723, 724, 729, 730, 731, 732, 734, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 751, 757, 758, 764, 774, 789, 790, 800, 803, 807, 808, 809, 813, 815, 816, 817, 818, 823, 824, 825, 826, 828, 829, 832, 833, 835, 841, 844, 846, 847, 849, 852, 853, 854, 863, 864, 866, 869, 870, 872, 873, 884, 890, 892, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 930, 931, 933, 934, 935, 936, 937, 939, 945, 948, 950, 951, 952, 953, 958, 959, 960, 961, 963, 964, 969, 973, 987, 992, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1065, 1066, 1067, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1089, 1091, 1092, 1093, 1094, 1097, 1098, 1103, 1104, 1105, 1107, 1108, 1110, 1112, 1113, 1114, 1116, 1117, 1120, 1121, 1122, 1123, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1151, 1155, 1156, 1157, 1158, 1160, 1163, 1164, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1187, 1188, 1190, 1191, 1192, 1199, 1208, 1211, 1215, 1216, 1217, 1218, 1225, 1226, 1227, 1231, 1233, 1235, 1244, 1248, 1252, 1257, 1259, 1261, 1262, 1264, 1265, 1266, 1268, 1270, 1272, 1273], "value1": [623, 774], "value2": [623, 774], "value_a": 1270, "value_b": 1270, "value_count": [686, 774, 1244], "value_cum_sum": [383, 774], "value_cum_sum_all_fil": [383, 774], "value_nam": [225, 276, 309, 826, 852, 884], "value_var": [225, 276, 309, 826, 852, 884], "valueerror": [15, 20], "valueexcept": 734, "var": [36, 164, 309, 607, 608, 774, 884, 1244, 1260], "var_samp": 1260, "vari": [393, 966, 1273], "variabl": [30, 72, 139, 141, 143, 146, 147, 148, 162, 165, 225, 264, 276, 309, 826, 852, 884, 1220, 1244, 1253, 1255, 1270], "variable_nam": [225, 276, 309, 826, 852, 884], "variad": 131, "varianc": [280, 309, 442, 481, 607, 608, 689, 763, 774, 854, 884, 1020, 1056, 1142, 1234, 1244, 1263], "variant": [667, 669, 670], "variou": [131, 176, 309, 774, 797, 884, 889, 890, 1244], "vector": [592, 594, 596, 598, 600, 603, 605, 607, 774, 1134, 1135, 1137, 1140, 1141, 1142, 1244], "vectoris": [411, 412, 988, 989], "vein": 168, "verbos": [29, 152, 154, 168, 635, 1172], "veri": [131, 213, 273, 309, 532, 774, 868, 1264], "versicolor": [309, 312], "version": [34, 35, 52, 133, 134, 144, 151, 156, 157, 158, 159, 163, 166, 170, 171, 181, 202, 225, 249, 256, 266, 267, 271, 285, 290, 309, 387, 399, 411, 412, 434, 455, 462, 538, 544, 547, 584, 626, 628, 633, 675, 690, 699, 748, 753, 774, 789, 801, 805, 826, 839, 845, 858, 859, 863, 884, 890, 972, 980, 981, 988, 989, 1011, 1034, 1035, 1127, 1163, 1165, 1170, 1223, 1225, 1228, 1244], "versu": [180, 309, 800, 884], "vertic": [55, 189, 277, 281, 309, 626, 640, 1163, 1177], "vertical_relax": 55, "via": [30, 129, 130, 131, 141, 143, 146, 147, 148, 181, 213, 243, 309, 387, 532, 636, 774, 801, 884, 1173], "view": [532, 774], "visibl": [17, 187, 309, 1016, 1244], "visit": [384, 774, 958, 1244], "visual": [208, 210, 309, 842, 884], "volk": 126, "vote": [634, 636, 1171, 1173], "vowel": [647, 648, 1184, 1185], "vstack": [55, 189, 309], "w": [36, 131, 201, 244, 309, 629, 634, 636, 693, 695, 813, 884, 890, 1166, 1171, 1173, 1194, 1255, 1256, 1259], "w_i": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "wa": [34, 52, 91, 134, 152, 181, 266, 267, 309, 387, 585, 649, 720, 774, 801, 884, 890, 1128, 1186, 1225, 1244], "wai": [84, 85, 116, 118, 119, 120, 122, 138, 139, 147, 200, 214, 233, 255, 288, 309, 570, 574, 623, 634, 707, 770, 774, 798, 804, 812, 830, 836, 844, 855, 861, 868, 884, 1171], "walk": 705, "want": [54, 119, 121, 134, 189, 219, 230, 241, 256, 309, 392, 449, 531, 532, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 628, 643, 649, 702, 710, 724, 746, 749, 765, 774, 796, 814, 821, 845, 884, 890, 965, 1023, 1103, 1165, 1180, 1186, 1244, 1258], "warehous": 132, "warn": [86, 87, 90, 91, 94, 101, 103, 104, 114, 570, 774, 1244], "watermark": [41, 309], "wb": [36, 309], "we": [41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 180, 181, 201, 216, 234, 241, 279, 309, 387, 414, 418, 431, 464, 495, 523, 531, 532, 590, 593, 595, 597, 599, 601, 604, 606, 608, 636, 666, 714, 715, 716, 717, 718, 719, 734, 761, 762, 764, 774, 800, 801, 813, 818, 822, 835, 884, 991, 995, 1008, 1037, 1068, 1103, 1173, 1203, 1244, 1255], "weather": [647, 648, 1184, 1185], "wednesdai": [201, 309, 420, 423, 813, 884, 997, 1000], "week": [201, 216, 241, 279, 309, 392, 414, 418, 431, 433, 440, 590, 593, 595, 597, 599, 601, 604, 606, 608, 702, 715, 716, 718, 719, 720, 761, 762, 774, 813, 818, 835, 884, 890, 965, 991, 995, 1008, 1010, 1018, 1244, 1266], "week_mask": [392, 702, 965], "weekdai": [400, 415], "weekend": [392, 702, 965], "weekli": [201, 309, 431, 813, 884, 1008], "weghorst": [636, 1173], "weight": [126, 439, 440, 441, 442, 591, 592, 594, 596, 598, 600, 603, 605, 607, 620, 774, 1017, 1018, 1019, 1020, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1158, 1244], "wei\u00df": 1265, "welcom": [669, 1206], "well": [36, 129, 130, 131, 143, 309, 469, 753, 774, 1041, 1244, 1270], "were": [168, 584, 585, 770, 774, 1127, 1128, 1244], "what": [230, 309, 312, 392, 531, 628, 649, 774, 965, 1165, 1186, 1244, 1248], "whatev": 168, "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 37, 38, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 126, 129, 130, 131, 132, 134, 135, 137, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 172, 180, 185, 187, 189, 191, 194, 201, 215, 219, 233, 242, 244, 247, 248, 252, 255, 261, 264, 266, 267, 271, 272, 274, 278, 284, 309, 353, 374, 392, 439, 441, 442, 448, 516, 523, 542, 574, 584, 585, 614, 622, 623, 628, 633, 637, 639, 643, 644, 649, 651, 656, 657, 658, 661, 662, 700, 702, 710, 724, 774, 790, 800, 808, 813, 817, 822, 837, 838, 841, 844, 849, 850, 853, 857, 884, 924, 948, 960, 965, 1016, 1017, 1019, 1020, 1023, 1026, 1089, 1127, 1128, 1146, 1148, 1151, 1165, 1170, 1174, 1176, 1180, 1181, 1186, 1188, 1193, 1194, 1195, 1198, 1199, 1219, 1220, 1225, 1244, 1258, 1270], "when_matched_update_al": [35, 309], "when_not_matched_insert_al": [35, 309], "where": [36, 47, 91, 131, 132, 134, 184, 189, 192, 201, 213, 225, 234, 243, 256, 257, 266, 271, 276, 278, 280, 309, 335, 433, 436, 438, 440, 449, 519, 525, 531, 565, 583, 612, 620, 623, 625, 649, 689, 701, 706, 708, 750, 751, 753, 755, 763, 764, 774, 803, 809, 813, 826, 845, 846, 852, 853, 854, 884, 906, 1010, 1014, 1018, 1023, 1027, 1147, 1158, 1162, 1186, 1234, 1235, 1244, 1252, 1269, 1270, 1272], "wherea": [129, 143, 241, 309, 418, 431, 562, 563, 590, 774, 814, 821, 835, 884, 995, 1008, 1112, 1113, 1244], "wherev": [36, 219, 295, 309, 532, 774, 1103, 1244], "whether": [33, 42, 120, 122, 126, 141, 146, 148, 163, 167, 186, 212, 216, 250, 255, 309, 321, 323, 337, 338, 404, 419, 461, 486, 487, 613, 623, 637, 700, 774, 822, 840, 844, 884, 890, 894, 895, 908, 909, 941, 943, 977, 996, 1015, 1033, 1034, 1059, 1060, 1174, 1244, 1255, 1270], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 119, 121, 129, 130, 131, 132, 133, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 159, 162, 164, 172, 173, 180, 181, 184, 189, 190, 200, 201, 206, 216, 241, 249, 266, 267, 272, 274, 279, 309, 321, 358, 387, 392, 414, 418, 420, 431, 440, 446, 469, 471, 474, 476, 477, 478, 479, 523, 531, 532, 542, 544, 590, 593, 595, 597, 599, 601, 604, 606, 608, 666, 702, 715, 716, 718, 719, 720, 761, 762, 764, 774, 790, 792, 795, 798, 800, 801, 803, 804, 805, 813, 818, 835, 839, 849, 850, 855, 884, 890, 929, 965, 991, 995, 997, 1008, 1018, 1023, 1024, 1041, 1044, 1047, 1049, 1050, 1051, 1052, 1096, 1148, 1203, 1223, 1225, 1244, 1253, 1259, 1270, 1273], "while": [35, 54, 130, 133, 134, 144, 159, 163, 168, 213, 225, 273, 276, 278, 309, 584, 644, 774, 796, 826, 852, 853, 884, 1127, 1181, 1244], "white": [36, 309], "whitespac": [123, 656, 657, 658, 1193, 1194, 1195, 1265], "whole": [531, 622, 623, 634, 774, 868, 884, 1171], "whose": [47, 216, 234, 309, 443, 722, 774, 818, 884, 890], "why": [795, 884], "wide": [131, 199, 225, 234, 276, 277, 309, 826, 852, 884], "width": [26, 36, 56, 129, 130, 143, 309, 312, 522, 884, 1095], "wiki": 20, "wikipedia": 20, "wildcard": [443, 672, 710, 711, 724, 748, 770, 774, 888], "win_loss": [36, 309], "window": [129, 130, 143, 201, 241, 309, 384, 439, 441, 442, 532, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 704, 750, 751, 774, 813, 835, 884, 958, 1017, 1019, 1020, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1244], "window_s": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 750, 751, 774, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1244], "windowmappingstrategi": [570, 774], "winter": [637, 647, 648, 1174], "wise": [36, 47, 131, 194, 309, 326, 327, 328, 329, 330, 331, 375, 376, 377, 444, 527, 617, 618, 619, 679, 680, 724, 748, 774, 897, 898, 899, 900, 901, 902, 950, 951, 952, 1021, 1100, 1101, 1155, 1156, 1157, 1217, 1218, 1244], "wish": [172, 272, 309, 368, 369, 682, 683, 774, 790, 849, 884, 938, 1229, 1244], "with_column": [1, 12, 50, 53, 54, 201, 233, 241, 271, 277, 284, 309, 318, 320, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 351, 352, 353, 354, 358, 363, 364, 366, 370, 374, 379, 380, 381, 382, 383, 385, 388, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 435, 437, 438, 440, 447, 448, 453, 458, 460, 462, 467, 468, 469, 472, 473, 475, 476, 477, 478, 479, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 549, 551, 553, 554, 556, 558, 560, 561, 564, 565, 566, 570, 571, 574, 575, 577, 580, 584, 585, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 610, 614, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 667, 669, 670, 671, 673, 675, 676, 681, 684, 691, 693, 695, 698, 702, 703, 704, 705, 710, 711, 713, 714, 716, 717, 721, 731, 735, 738, 740, 743, 754, 758, 760, 762, 764, 770, 774, 795, 796, 805, 813, 815, 830, 831, 835, 842, 857, 884, 890, 959, 994, 1121, 1244, 1270], "with_column_nam": 143, "with_columns_seq": [309, 884], "with_context": 884, "with_field": [532, 774], "with_replac": [245, 309, 511, 611, 774, 1084, 1145, 1244], "with_row_count": [309, 884], "with_row_index": [1, 241, 285, 309, 593, 595, 597, 599, 601, 604, 606, 608, 774, 859, 884, 1146, 1244], "within": [41, 56, 72, 152, 153, 154, 155, 200, 201, 202, 216, 241, 279, 309, 462, 580, 623, 774, 813, 818, 835, 884, 1035, 1244, 1270], "without": [1, 42, 43, 44, 45, 52, 53, 54, 63, 65, 91, 94, 123, 126, 133, 136, 141, 142, 144, 145, 146, 148, 149, 156, 157, 159, 160, 161, 162, 163, 164, 256, 266, 267, 271, 277, 278, 309, 312, 313, 384, 385, 418, 464, 532, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 628, 637, 649, 707, 750, 751, 752, 774, 795, 796, 805, 845, 853, 884, 941, 943, 958, 959, 995, 1037, 1121, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1165, 1174, 1186, 1223, 1225, 1228, 1244, 1248, 1272], "without_fil": [133, 144, 145], "wod": [658, 1195], "womp": [275, 309, 851, 884], "word": [132, 647, 648, 657, 658], "work": [36, 63, 65, 130, 149, 248, 284, 309, 321, 323, 359, 373, 374, 443, 452, 495, 524, 531, 532, 553, 554, 556, 558, 560, 561, 570, 639, 643, 644, 651, 662, 685, 774, 838, 857, 884, 890, 894, 895, 930, 945, 948, 1029, 1068, 1097, 1176, 1180, 1181, 1188, 1199, 1230, 1244], "workaround": 309, "workbook": [36, 134, 140, 309], "working_with_conditional_format": [36, 309], "working_with_sparklin": [36, 309], "worksheet": [36, 134, 140, 309], "world": [1, 20, 628, 649, 656, 657, 658, 669, 890, 1075, 1165, 1186, 1193, 1194, 1195, 1206, 1254, 1257], "wors": [844, 884], "worth": [495, 1068], "worthwhil": [152, 154], "would": [90, 129, 130, 143, 267, 271, 309, 334, 345, 392, 500, 531, 532, 541, 570, 580, 700, 702, 774, 905, 916, 965, 1073, 1123, 1225, 1244, 1268], "wrap": [74, 123, 370, 469, 531, 774, 939, 1244], "wrap_numer": [370, 774, 939, 1244], "wrapper": [54, 796, 884], "writabl": [31, 33, 37, 38, 39, 40, 41, 249, 267, 309, 1225, 1244], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 128, 130, 135, 168, 176, 309, 374, 547, 774, 820, 842, 884, 890, 948, 1244], "write_ascii_frame_to_stdout": 168, "write_avro": 309, "write_clipboard": [128, 309], "write_csv": [32, 130, 143, 309], "write_databas": 309, "write_delta": 309, "write_excel": 309, "write_ipc": [135, 309], "write_ipc_stream": 309, "write_json": 309, "write_ndjson": [39, 309], "write_parquet": 309, "write_t": [41, 309], "write_to_dataset": [41, 309], "writeabl": [267, 309, 1225, 1244], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 249, 309, 544, 839, 884], "ww": [1265, 1272], "www": 674, "x": [27, 47, 55, 76, 93, 117, 123, 129, 130, 132, 143, 156, 157, 159, 170, 187, 205, 208, 210, 215, 234, 243, 244, 273, 276, 277, 309, 312, 318, 320, 322, 341, 346, 366, 379, 386, 437, 438, 453, 458, 460, 462, 483, 490, 502, 528, 530, 531, 532, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 569, 575, 583, 584, 585, 589, 617, 620, 653, 675, 676, 681, 684, 691, 693, 695, 698, 699, 704, 710, 711, 713, 724, 734, 735, 738, 740, 743, 748, 753, 758, 764, 774, 817, 822, 843, 845, 852, 884, 890, 917, 942, 953, 1026, 1103, 1127, 1128, 1155, 1158, 1190, 1223, 1227, 1228, 1244, 1255, 1256, 1259, 1264, 1270, 1272], "x00": [362, 363, 364, 365, 367, 630, 932, 933, 934, 935, 937, 1167], "x00fvalu": [249, 309], "x07": 366, "x1": 366, "x17": 366, "x80": 366, "x81": [544, 839, 884], "x82": [249, 309], "x83": [249, 309, 366], "x88": 366, "x8e": 366, "x99": 366, "x9c": 366, "x_0": [277, 309, 439, 440, 441, 442, 774, 1017, 1018, 1019, 1020, 1244], "x_1": [277, 309, 440, 774, 1018, 1244], "x_2": [439, 440, 441, 442, 774, 1017, 1018, 1019, 1020, 1244], "x_i": [440, 774, 1018, 1244], "x_invers": [575, 774], "x_n": [440, 774, 1018, 1244], "x_pow_8": 1264, "x_round": 1264, "x_round_1": 1264, "x_squar": [575, 774], "x_t": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "x_uniqu": [552, 774], "x_y": [346, 502], "xa1cagg": 544, "xa1csum": 544, "xa1fcolumncfoolpartition_bi": 544, "xa1fwindow": 544, "xa1gcolumn": [249, 309, 839, 884], "xa1kmapfunct": [839, 884], "xa1mdataframescan": [839, 884], "xa2einput": [839, 884], "xa4bdf": [839, 884], "xa4d": [839, 884], "xa4dnamecfoohdatatypeeint64lbit_set": [249, 309], "xa4hfunct": 544, "xb": 366, "xb1": 366, "xb9neq": 366, "xbd": 366, "xc14": 366, "xd3": 366, "xdb": 366, "xdist": 1273, "xe9": 366, "xee": 366, "xf4": 366, "xf4v": 366, "xf9": 366, "xfb": 366, "xff": [362, 363, 364, 365, 367, 630, 932, 933, 934, 935, 937, 1167], "xi": [635, 1172], "xl": 134, "xlog2": [551, 575, 774], "xlsb": 134, "xlsx": [36, 134, 309], "xlsx2csv": [134, 151], "xlsxwriter": [36, 151, 309], "xor": 774, "xor_xi": [691, 774], "xx": [10, 48, 50, 163, 180, 256, 309, 800, 884, 890, 1259, 1265, 1272], "xxx": 674, "xy": [48, 50], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 318, 629, 635, 774, 1166, 1172, 1221, 1244], "y": [27, 47, 55, 76, 93, 117, 123, 156, 157, 159, 170, 187, 208, 210, 215, 234, 243, 244, 273, 276, 277, 309, 312, 318, 320, 322, 341, 346, 366, 420, 423, 437, 438, 458, 460, 483, 490, 502, 530, 532, 552, 554, 556, 558, 560, 561, 564, 565, 569, 583, 584, 585, 589, 661, 663, 664, 675, 684, 691, 693, 695, 698, 699, 713, 720, 734, 738, 740, 743, 753, 758, 774, 817, 843, 845, 852, 884, 890, 917, 942, 997, 1000, 1127, 1128, 1198, 1200, 1201, 1244, 1259, 1265, 1266, 1272], "y_": [439, 440, 441, 442, 774, 1017, 1018, 1019, 1020, 1244], "y_0": [277, 309, 439, 440, 441, 442, 774, 1017, 1018, 1019, 1020, 1244], "y_1": [277, 309], "y_i": [440, 774, 1018, 1244], "y_mul": 675, "y_t": [439, 441, 442, 774, 1017, 1019, 1020, 1244], "y_uniqu": [552, 774], "ya": [651, 1188], "ya29": 145, "year": [133, 144, 201, 216, 241, 256, 279, 309, 392, 404, 405, 414, 415, 418, 431, 432, 590, 593, 595, 597, 599, 601, 604, 606, 608, 702, 714, 715, 716, 717, 718, 719, 761, 762, 774, 813, 818, 835, 884, 890, 965, 977, 978, 991, 992, 995, 1008, 1009, 1266], "yellow": [309, 313, 362, 363, 364, 365, 367], "yield": [120, 122, 129, 130, 131, 143, 187, 189, 212, 273, 309, 453, 531, 570, 774, 884, 1016, 1023, 1244], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 135, 138, 139, 143, 147, 149, 168, 172, 189, 192, 201, 212, 213, 219, 230, 234, 241, 242, 243, 244, 256, 263, 266, 272, 273, 274, 276, 295, 309, 312, 368, 369, 392, 411, 412, 414, 417, 420, 423, 443, 449, 469, 495, 523, 531, 532, 575, 582, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 628, 643, 647, 648, 649, 672, 682, 683, 702, 710, 720, 724, 736, 746, 749, 753, 765, 774, 790, 796, 803, 809, 813, 814, 821, 835, 842, 845, 849, 850, 852, 868, 884, 888, 890, 938, 965, 988, 989, 994, 997, 1000, 1023, 1041, 1068, 1103, 1125, 1165, 1180, 1184, 1185, 1186, 1223, 1229, 1244, 1248, 1253, 1258, 1273], "your": [34, 36, 46, 47, 85, 129, 130, 131, 132, 134, 149, 213, 219, 243, 244, 247, 263, 283, 288, 295, 309, 397, 440, 455, 532, 636, 661, 663, 664, 671, 736, 774, 814, 821, 822, 837, 856, 861, 868, 884, 970, 1018, 1103, 1173, 1198, 1200, 1201, 1208, 1244, 1273], "yy": [10, 48, 50, 163, 180, 256, 309, 800, 884, 890, 1259, 1265, 1272], "yyi": 674, "yyyi": [36, 309], "yz": [48, 50], "z": [36, 55, 76, 123, 157, 187, 208, 210, 215, 243, 244, 273, 276, 277, 309, 318, 320, 322, 462, 490, 532, 554, 556, 558, 560, 561, 569, 583, 584, 585, 628, 635, 637, 649, 661, 664, 693, 695, 713, 738, 740, 743, 749, 753, 758, 774, 817, 843, 845, 852, 884, 890, 1026, 1127, 1128, 1165, 1172, 1174, 1186, 1198, 1201, 1244, 1255, 1259, 1270, 1272], "z_0": [277, 309], "z_1": [277, 309], "zap": 890, "zero": [28, 36, 116, 117, 127, 129, 130, 135, 137, 141, 158, 161, 170, 191, 201, 213, 242, 256, 261, 267, 268, 309, 448, 523, 528, 612, 620, 671, 684, 774, 793, 808, 813, 884, 947, 1026, 1096, 1158, 1208, 1219, 1225, 1226, 1244, 1264, 1270], "zero_copy_onli": [1225, 1244], "zfill": [646, 691, 774, 1183], "zip": 1273, "zip_with": [194, 309, 1244], "zone": [62, 159, 160, 163, 393, 397, 417, 440, 664, 717, 718, 719, 774, 890, 966, 970, 994, 1018, 1201, 1244], "zoneinfo": [62, 890], "zoom": [36, 309], "zstd": [37, 38, 41, 43, 45, 309, 884], "zz": [163, 180, 256, 309, 800, 884, 1259, 1265, 1272], "zzz": 674, "\u03bc": [123, 173, 201, 213, 241, 243, 244, 263, 279, 309, 393, 394, 396, 397, 398, 399, 401, 403, 406, 408, 409, 411, 412, 413, 414, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 590, 593, 595, 597, 599, 601, 604, 606, 608, 661, 664, 717, 718, 719, 720, 726, 774, 792, 813, 818, 835, 884, 890, 966, 967, 969, 970, 971, 972, 974, 975, 976, 981, 982, 986, 988, 989, 990, 991, 994, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1198, 1201, 1265], "\u0441\u0438\u043d\u0438\u0439": 1265, "\u0967\u096f\u096f\u096f": 890, "\u0968\u0966\u096d\u096d": 890, "\u4eac\u90fd": 890, "\u5927\u962a": 890, "\u6771\u4eac": [643, 644, 890, 1180, 1181], "\u90fd\u5e02": 890, "\ud835\udf0b": 1264}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1259, 1271], "IF": 1262, "__dataframe__": 170, "__iter__": 287, "ab": [317, 892, 1264], "aco": 1267, "acosd": 1267, "add": 318, "add_business_dai": [392, 965], "agg": [288, 861], "agg_group": 319, "aggreg": [169, 316, 788, 891, 1260], "alia": [320, 893], "alias": [1260, 1264, 1265], "align_fram": 47, "all": [289, 321, 337, 486, 692, 862, 894, 908, 1059, 1271], "all_horizont": 693, "and_": 322, "ani": [323, 338, 487, 694, 895, 909, 1060], "any_horizont": 695, "api": [1, 48, 49, 50, 51, 786, 1270], "append": [324, 896], "approx_n_uniqu": [171, 325, 696, 789], "arang": 697, "arcco": [326, 897], "arccosh": [327, 898], "arcsin": [328, 899], "arcsinh": [329, 900], "arctan": [330, 901], "arctan2": 698, "arctan2d": 699, "arctanh": [331, 902], "arg_max": [332, 339, 488, 903, 910, 1061], "arg_min": [333, 340, 489, 904, 911, 1062], "arg_sort": [334, 905], "arg_sort_bi": 700, "arg_tru": [335, 906], "arg_uniqu": [336, 907], "arg_wher": 701, "arr": [337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931], "arrai": [56, 766, 1236, 1261], "array_agg": 1261, "array_contain": 1261, "array_get": 1261, "array_length": 1261, "array_low": 1261, "array_mean": 1261, "array_revers": 1261, "array_sum": 1261, "array_to_str": 1261, "array_uniqu": 1261, "array_upp": 1261, "asin": 1267, "asind": 1267, "assert": 1273, "assert_frame_equ": 152, "assert_frame_not_equ": 153, "assert_series_equ": 154, "assert_series_not_equ": 155, "atan": 1267, "atan2": 1267, "atan2d": 1267, "atand": 1267, "attribut": [304, 880, 1237], "avail": 1, "avg": 1260, "avro": 787, "backward_fil": 361, "base_utc_offset": [393, 966], "batched_read": 125, "batchedcsvread": 125, "bin": [362, 363, 364, 365, 366, 367, 932, 933, 934, 935, 936, 937], "binari": [57, 767, 780, 1238], "bit_length": 1265, "boolean": [58, 768, 1239], "bottom_k": [172, 368, 790, 938], "bottom_k_bi": 369, "build_info": 52, "business_day_count": 702, "cach": 791, "cancel": 877, "cast": [173, 370, 792, 939, 1268], "cast_time_unit": [394, 967], "cat": [371, 940, 941, 942, 943], "categor": 59, "categori": [769, 1240], "categoricalremappingwarn": 86, "cbrt": [372, 944, 1264], "ceil": [373, 945, 1264], "centuri": [395, 968], "chronoformatwarn": 87, "chunk_length": 946, "claus": 1259, "clear": [174, 793, 947], "clip": [374, 948], "clipboard": 787, "clone": [175, 794, 949], "co": [375, 950, 1267], "coalesc": [703, 1262], "col": 770, "collect": 795, "collect_al": 53, "collect_all_async": 54, "collect_async": 796, "collect_schema": [176, 797], "column": [156, 157, 177, 771, 798], "columnnotfounderror": 88, "combin": [396, 969], "comparison": 780, "comput": [305, 772, 1241], "computeerror": 89, "concat": [55, 490, 626, 1063, 1163, 1265], "concat_list": 704, "concat_str": 705, "concat_w": 1265, "condit": 1262, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 168], "conjunct": 780, "contain": [341, 362, 491, 627, 912, 932, 1064, 1164], "contains_ani": [628, 1165], "context": 168, "convers": 785, "convert_time_zon": [397, 970], "corr": [178, 706], "cosd": 1267, "cosh": [376, 951], "cot": [377, 952, 1267], "cotd": 1267, "count": [179, 290, 378, 707, 799, 863, 1260], "count_match": [342, 492, 629, 913, 1065, 1166], "cov": 708, "creat": 1272, "create_list_strategi": 158, "csv": [125, 787], "cum_count": [379, 709, 953], "cum_fold": 710, "cum_max": [380, 954], "cum_min": [381, 955], "cum_prod": [382, 956], "cum_reduc": 711, "cum_sum": [383, 712, 957], "cum_sum_horizont": 713, "cumulative_ev": [384, 958], "customufuncwarn": 90, "cut": [385, 959], "dai": [400, 973], "data": 314, "databas": 787, "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 309], "dataorientationwarn": 91, "dataset": 787, "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 314], "date": [61, 398, 714, 971, 1265], "date_part": 1266, "date_rang": [715, 716], "datetim": [62, 399, 717, 972], "datetime_rang": [718, 719], "decim": 63, "decod": [363, 630, 933, 1167], "decor": 168, "degre": [386, 1267], "delta": 787, "describ": [180, 800, 960], "descript": [306, 881, 1242], "deseri": [181, 387, 801], "diff": [388, 493, 961, 1066], "disable_string_cach": 84, "distinct": 1259, "div": 1264, "document": 1270, "dot": [389, 962], "drop": [182, 802, 1272], "drop_in_plac": 183, "drop_nan": [390, 963], "drop_nul": [184, 391, 494, 803, 964, 1067], "dst_offset": [401, 974], "dt": [392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "dtype": [160, 185, 804, 1013], "duplicateerror": 92, "durat": [64, 720], "element": 721, "enable_string_cach": 85, "encod": [364, 631, 934, 1168], "ends_with": [365, 632, 935, 1169, 1265], "entropi": [436, 1014], "enum": 65, "epoch": [402, 975], "eq": [437, 536], "eq_miss": 438, "equal": [186, 1015], "error": 315, "estimated_s": [187, 1016], "eval": [495, 1068], "ewm_mean": [439, 1017], "ewm_mean_bi": [440, 1018], "ewm_std": [441, 1019], "ewm_var": [442, 1020], "exampl": [1, 890, 1273], "excel": 787, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 315, 1271], "exclud": [443, 722], "execut": 1252, "execute_glob": 1253, "exp": [444, 1021, 1264], "explain": [805, 1272], "explod": [188, 343, 445, 496, 633, 806, 914, 1022, 1069, 1170], "export": [307, 1243], "expr": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691], "express": [774, 1270], "extend": [1, 189, 1023], "extend_const": [446, 1024], "extract": [634, 1171, 1266], "extract_al": [635, 1172], "extract_group": [636, 1173], "extract_mani": [637, 1174], "feather": 787, "fetch": 878, "fetch_block": 879, "field": [672, 1209, 1210], "fill_nan": [190, 447, 807, 1025], "fill_nul": [191, 448, 808, 1026], "filter": [192, 449, 809, 1027], "find": [638, 1175], "first": [291, 344, 450, 497, 723, 810, 864, 915, 1070, 1260], "flag": [193, 1028], "flatten": 451, "float32": 66, "float64": 67, "floor": [452, 1029, 1264], "floordiv": 453, "fold": [194, 724], "format": 725, "forward_fil": 454, "frame": 1270, "from": 1259, "from_arrow": 116, "from_datafram": 117, "from_dict": [118, 119], "from_epoch": 726, "from_json": 455, "from_numpi": 120, "from_panda": 121, "from_record": 122, "from_repr": 123, "function": [1, 773, 785, 890, 1263], "gather": [456, 498, 1030, 1071], "gather_everi": [195, 457, 499, 811, 1031, 1072], "ge": 458, "get": [345, 459, 500, 916, 1073], "get_categori": [371, 940], "get_chunk": 1032, "get_column": [196, 198], "get_column_index": 197, "get_index_typ": 124, "glimps": 199, "global": 1270, "greatest": 1262, "group": [727, 1259], "group_bi": [200, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 812, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876], "group_by_dynam": [201, 813], "groupbi": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 308, 882], "gt": 460, "has_multiple_output": 537, "has_nul": [461, 1033], "has_valid": 1034, "hash": [462, 1035], "hash_row": 202, "have": 1259, "head": [203, 292, 463, 501, 639, 728, 814, 865, 1036, 1074, 1176], "height": 204, "helper": 1273, "hist": [464, 1037], "hour": [403, 976], "hstack": 205, "iceberg": 787, "ifnul": 1262, "implod": [465, 729, 1038], "import": 890, "in_process": [877, 878, 879], "index": 0, "initcap": 1265, "inprocessqueri": [877, 878, 879, 883], "input": 787, "insert_column": 206, "inspect": [466, 815], "int16": 68, "int32": 69, "int64": 70, "int8": 71, "int_rang": [730, 731], "interfac": 1269, "interpol": [207, 467, 816, 1039], "interpolate_bi": [468, 1040], "intersect": 1271, "introduct": 1270, "invalidoperationerror": 93, "io": 125, "ipc": 787, "is_between": [469, 1041], "is_column_select": 538, "is_dupl": [208, 470, 1042], "is_empti": [209, 1043], "is_finit": [471, 1044], "is_first_distinct": [472, 1045], "is_in": [473, 1046], "is_infinit": [474, 1047], "is_last_distinct": [475, 1048], "is_leap_year": [404, 977], "is_loc": 941, "is_nan": [476, 1049], "is_not_nan": [477, 1050], "is_not_nul": [478, 1051], "is_nul": [479, 1052], "is_regex_project": 539, "is_sort": 1053, "is_uniqu": [210, 480, 1054], "iso_year": [405, 978], "item": [211, 1055], "iter_column": 212, "iter_row": 213, "iter_slic": 214, "join": [215, 346, 502, 640, 817, 917, 1075, 1177, 1259], "join_asof": [216, 818], "json": 787, "json_decod": [641, 1178], "json_encod": [673, 1211], "json_norm": 126, "json_path_match": [642, 1179], "keep": 553, "kurtosi": [481, 1056], "lake": 787, "last": [293, 347, 482, 503, 732, 819, 866, 918, 1076, 1260], "lazi": [217, 820], "lazyfram": [42, 43, 44, 45, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 884], "lazygroupbi": [861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876], "le": 483, "least": 1262, "left": 1265, "len": [294, 484, 504, 733, 867, 1057, 1077], "len_byt": [643, 1180], "len_char": [644, 1181], "length": 1265, "limit": [218, 485, 821, 1058, 1259], "list": [72, 161, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 775, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1245], "lit": 734, "ln": 1264, "load": [2, 168], "load_from_fil": 3, "load_profil": 162, "log": [526, 1099, 1264], "log10": [527, 1100, 1264], "log1p": [528, 1101, 1264], "log2": 1264, "lower": 1265, "lower_bound": [529, 1102], "lt": 530, "ltrim": 1265, "manag": 168, "manipul": [311, 778, 886, 1247], "map": 554, "map_batch": [531, 735, 822], "map_el": [532, 1103], "map_field": 555, "map_group": [295, 736, 868], "map_row": 219, "mapwithoutreturndtypewarn": 94, "math": 1264, "max": [220, 296, 348, 505, 533, 737, 823, 869, 919, 979, 1078, 1104, 1260], "max_horizont": [221, 738], "mean": [222, 297, 506, 534, 739, 824, 870, 980, 1079, 1105], "mean_horizont": [223, 740], "median": [224, 298, 349, 507, 535, 741, 825, 871, 920, 981, 1080, 1106, 1260], "melt": [225, 826], "merge_sort": [226, 827], "meta": [536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 776], "metadata": 887, "method": 1270, "microsecond": [406, 982], "millennium": [407, 983], "millisecond": [408, 984], "min": [227, 299, 350, 508, 548, 742, 828, 872, 921, 985, 1081, 1107, 1260], "min_horizont": [228, 743], "minut": [409, 986], "miscellan": [310, 777, 785, 885, 1246], "mod": [549, 1264], "mode": [550, 1108], "moduleupgraderequirederror": 95, "month": [410, 987], "month_end": [411, 988], "month_start": [412, 989], "mul": 551, "n_chunk": [229, 1109], "n_uniqu": [230, 300, 351, 509, 552, 744, 873, 922, 1082, 1110], "name": [553, 554, 555, 556, 557, 558, 559, 560, 561, 771, 779, 1111, 1271], "nan_max": [562, 1112], "nan_min": [563, 1113], "nanosecond": [413, 990], "ne": [540, 564], "ne_miss": 565, "neg": 566, "nest": 314, "new": 1, "new_from_index": 1114, "next_batch": 125, "nodataerror": 96, "norowsreturnederror": 97, "not_": [567, 1115], "nth": 745, "null": 73, "null_count": [231, 568, 829, 1116], "nullif": 1262, "numer": [314, 780], "object": 74, "octet_length": 1265, "od": 787, "offset": 1259, "offset_bi": [414, 991], "ones": 746, "oper": [780, 890, 1271, 1272], "option": 168, "or_": 569, "order": 1259, "ordinal_dai": [415, 992], "other": 314, "outofboundserror": 98, "output": 787, "output_nam": 541, "over": 570, "pad_end": [645, 1182], "pad_start": [646, 1183], "panic": 315, "panicexcept": 99, "parallel": 785, "parametercollisionerror": 100, "parametr": [156, 157, 158, 159, 160, 161, 162, 163, 164, 1273], "parquet": 787, "partition_bi": 232, "pct_chang": [571, 1117], "peak_max": [572, 1118], "peak_min": [573, 1119], "performancewarn": 101, "pi": 1264, "pipe": [233, 574, 830], "pivot": 234, "plot": [312, 1248], "plugin": 888, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1273], "polarserror": 102, "polarsinefficientmapwarn": 103, "polarswarn": 104, "pop": 542, "pow": [575, 1264], "prefix": 556, "prefix_field": 557, "product": [235, 576, 1120], "profil": [831, 1273], "provid": 1, "pyarrow": 787, "python": [786, 1270], "qcut": [577, 1121], "quantil": [236, 301, 578, 747, 832, 874, 1122], "quarter": [416, 993], "queri": 1270, "radian": [579, 1267], "random": 785, "rank": [580, 1123], "read_avro": 127, "read_clipboard": 128, "read_csv": 129, "read_csv_batch": 130, "read_databas": 131, "read_database_uri": 132, "read_delta": 133, "read_excel": 134, "read_ipc": 135, "read_ipc_schema": 136, "read_ipc_stream": 137, "read_json": 138, "read_ndjson": 139, "read_od": 140, "read_parquet": 141, "read_parquet_schema": 142, "rechunk": [237, 581, 1124], "reduc": 748, "refer": 786, "regexp_lik": 1265, "regist": 1254, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_glob": 1255, "register_lazyframe_namespac": 50, "register_mani": 1256, "register_series_namespac": 51, "registr": 1, "reinterpret": [582, 1125], "renam": [238, 833, 1126], "rename_field": [674, 1212], "repeat": 749, "repeat_bi": 583, "replac": [584, 647, 1127, 1184, 1265], "replace_al": [648, 1185], "replace_column": 239, "replace_mani": [649, 1186], "replace_strict": [585, 1128], "replace_time_zon": [417, 994], "reshap": [586, 1129], "restore_default": 4, "revers": [240, 352, 510, 587, 650, 834, 923, 1083, 1130, 1187, 1265], "right": 1265, "rle": [588, 1131], "rle_id": [589, 1132], "roll": [241, 590, 835], "rolling_corr": 750, "rolling_cov": 751, "rolling_map": [591, 1133], "rolling_max": [592, 1134], "rolling_max_bi": 593, "rolling_mean": [594, 1135], "rolling_mean_bi": 595, "rolling_median": [596, 1136], "rolling_median_bi": 597, "rolling_min": [598, 1137], "rolling_min_bi": 599, "rolling_quantil": [600, 1138], "rolling_quantile_bi": 601, "rolling_skew": [602, 1139], "rolling_std": [603, 1140], "rolling_std_bi": 604, "rolling_sum": [605, 1141], "rolling_sum_bi": 606, "rolling_var": [607, 1142], "rolling_var_bi": 608, "root_nam": 543, "round": [418, 609, 995, 1143, 1264], "round_sig_fig": [610, 1144], "row": [242, 243], "rows_by_kei": 244, "rowserror": 105, "rtrim": 1265, "sampl": [245, 511, 611, 1084, 1145], "save": [5, 168], "save_to_fil": 6, "scan_csv": 143, "scan_delta": 144, "scan_iceberg": 145, "scan_ipc": 146, "scan_ndjson": 147, "scan_parquet": 148, "scan_pyarrow_dataset": 149, "scatter": 1146, "schema": [246, 836, 889, 1213], "schemaerror": 108, "schemafieldnotfounderror": 109, "search_sort": [612, 1147], "second": [419, 996], "select": [247, 311, 752, 778, 837, 886, 1247, 1259], "select_seq": [248, 838], "selector": 890, "seri": [163, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1244], "serial": [249, 310, 544, 839, 885], "set": [890, 1148, 1271], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [512, 1085], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [513, 1086], "set_profil": 164, "set_random_se": 150, "set_sort": [250, 613, 840, 1149], "set_streaming_chunk_s": 14, "set_symmetric_differ": [514, 1087], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [515, 1088], "set_verbos": 29, "shape": [251, 1150], "shapeerror": 110, "shift": [252, 353, 516, 614, 841, 924, 1089, 1151], "show": 1272, "show_graph": 842, "show_vers": 151, "shrink_dtyp": [615, 1152], "shrink_to_fit": [253, 1153], "shuffl": [616, 1154], "sign": [617, 1155, 1264], "sin": [618, 1156, 1267], "sind": 1267, "sinh": [619, 1157], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "size": [366, 936], "skew": [620, 1158], "slice": [254, 517, 621, 651, 843, 1090, 1159, 1188], "sort": [255, 354, 518, 622, 844, 925, 1091, 1160], "sort_bi": 623, "split": [652, 1189], "split_exact": [653, 1190], "splitn": [654, 1191], "sql": [256, 753, 845, 1259, 1263, 1269, 1270], "sql_expr": 754, "sqlcontext": [1252, 1253, 1254, 1255, 1256, 1257, 1258, 1270], "sqlinterfaceerror": 106, "sqlsyntaxerror": 107, "sqrt": [624, 1161, 1264], "starts_with": [367, 655, 937, 1192, 1265], "state": [30, 168], "std": [257, 355, 519, 625, 755, 846, 926, 1092, 1162], "stddev": 1260, "str": [626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208], "strategi": 1273, "strftime": [420, 997, 1266], "string": [75, 314, 781, 1249, 1265], "stringcach": [46, 785], "stringcachemismatcherror": 111, "strip_char": [656, 1193], "strip_chars_end": [657, 1194], "strip_chars_start": [658, 1195], "strip_prefix": [659, 1196], "strip_suffix": [660, 1197], "strpo": 1265, "strptime": [661, 1198, 1265], "struct": [76, 672, 673, 674, 675, 756, 782, 1209, 1210, 1211, 1212, 1213, 1214, 1250], "structfieldnotfounderror": 112, "style": 313, "sub": 676, "substr": 1265, "suffix": 558, "suffix_field": 559, "sum": [258, 302, 356, 520, 677, 757, 847, 875, 927, 1093, 1215, 1260], "sum_horizont": [259, 758], "tabl": [1257, 1272], "tail": [260, 303, 521, 662, 678, 759, 848, 876, 1094, 1199, 1216], "tan": [679, 1217, 1267], "tand": 1267, "tanh": [680, 1218], "tempor": [314, 783, 1251, 1266], "test": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 1273], "thread_pool_s": 165, "threadpool_s": 166, "time": [77, 421, 760, 998], "time_rang": [761, 762], "timestamp": [422, 999, 1265], "to_arrai": [522, 1095], "to_arrow": [261, 1219], "to_dat": [663, 1200], "to_datetim": [664, 1201], "to_decim": [665, 1202], "to_dict": [262, 263], "to_dummi": [264, 1220], "to_fram": 1221, "to_init_repr": [265, 1222], "to_integ": [666, 1203], "to_jax": [266, 1223], "to_list": [357, 928, 1224], "to_loc": 942, "to_lowercas": [560, 667, 1204], "to_numpi": [267, 1225], "to_panda": [268, 1226], "to_phys": [681, 1227], "to_seri": 269, "to_str": [423, 1000], "to_struct": [270, 358, 523, 929, 1096], "to_tim": [668, 1205], "to_titlecas": [669, 1206], "to_torch": [271, 1228], "to_uppercas": [561, 670, 1207], "toomanyrowsreturnederror": 113, "top_k": [272, 682, 849, 1229], "top_k_bi": 683, "total_dai": [424, 1001], "total_hour": [425, 1002], "total_microsecond": [426, 1003], "total_millisecond": [427, 1004], "total_minut": [428, 1005], "total_nanosecond": [429, 1006], "total_second": [430, 1007], "transpos": 273, "tree_format": 545, "trigonometri": 1267, "truediv": 684, "truncat": [431, 1008, 1272], "try_cast": 1268, "type": [314, 1268], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "undo_alias": 546, "union": 1271, "uniqu": [274, 359, 524, 685, 850, 930, 1097, 1230], "unique_count": [686, 1231], "unknown": 82, "unnest": [275, 851, 1214, 1261, 1272], "unpivot": [276, 852], "unregist": 1258, "unstablewarn": 114, "unstack": 277, "unsuitablesqlerror": 115, "updat": [278, 853], "upper": 1265, "upper_bound": [687, 1232], "upsampl": 279, "us": 168, "uses_lexical_ord": 943, "using_string_cach": 167, "utf8": 83, "value_count": [688, 1233], "var": [280, 360, 525, 689, 763, 854, 931, 1098, 1234], "varianc": 1260, "vstack": 281, "warn": 315, "week": [432, 1009], "weekdai": [433, 1010], "when": 764, "where": [690, 1259], "width": [282, 855], "window": 784, "with_column": [283, 856], "with_columns_seq": [284, 857], "with_context": 858, "with_field": 675, "with_row_count": [285, 859], "with_row_index": [286, 860], "with_time_unit": [434, 1011], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 547], "write_ndjson": 40, "write_parquet": 41, "xor": 691, "year": [435, 1012], "zero": 765, "zfill": [671, 1208], "zip_with": 1235}})